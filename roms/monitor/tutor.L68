00008146 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 08/04/2021 10:14:13

00000000                             1  *=======================================================================*
00000000                             2  * MOTOROLA EDUCATION COMPUTER BOARD ROM PROGRAM "TUTOR"  REVISION # 1.3
00000000                             3  * This version modified for EASy68K
00000000                             4  *     ftp://nyquist.ee.ualberta.ca/pub/motorola/m68k/x68k.zip
00000000                             5  *=======================================================================*
00000000                             6  
00000000                             7  * MACROS
00000000                             8  
00000000                             9  
00000000                            10  ADDR2MEM MACRO
00000000                            11        PEA     \1(PC)         MOVE ADDRESS TO MEMORY; POSITION
00000000                            12        MOVE.L  (A7)+,\2       INDEPENDANT = TO "MOVE.L #\1,\2"
00000000                            13        ENDM
00000000                            14  
00000000                            15  
00000000                            16  SAVEREGS MACRO
00000000                            17        MOVE.L  A7,REGA7       SAVE STACK POINTER
00000000                            18        LEA     SV\@(PC),A7    A7 = RETURN ADDRESS (FOR CALL TO SAVE)
00000000                            19        MOVE.L  A7,TEMP        TEMP = RETURN ADDRESS
00000000                            20        BRA     SAVE           BSR WITHOUT USING STACK
00000000                            21  SV\@  DS      0
00000000                            22        ENDM
00000000                            23  
00000000                            24  
00000000                            25  
00000000                            26  
00000000                            27  *-------------------------------------------------------------------------
00000000                            28  
00000000                            29  * EQUATES (in alphabetical order)
00000000                            30  
00000000  =00000007                 31  BELL     EQU     $07
00000000  =00000020                 32  BLANK    EQU     $20
00000000  =00004AFB                 33  BKPOINT  EQU     $4AFB
00000000  =00000080                 34  BUFFSIZE EQU     $80
00000000  =00000050                 35  BUFSIZE  EQU     80
00000000  =0000000D                 36  CR       EQU     $0D
00000000  =00000003                 37  CTLC     EQU     $03
00000000  =00000004                 38  CTLD     EQU     $04
00000000  =00000008                 39  CTLH     EQU     $08
00000000  =00000017                 40  CTLW     EQU     $17
00000000  =00000018                 41  CTLX     EQU     $18
00000000  =0000007F                 42  DEL      EQU     $7F
00000000  =00001000                 43  DELAYC1  EQU     $1000
00000000  =00000004                 44  EOT      EQU     $04
00000000  =0000000A                 45  LF       EQU     $0A
00000000  =00000010                 46  LOCVARSZ EQU     16
00000000                            47  
00000000                            48  
00000000                            49  
00000000                            50  *-------------------------------------------------------------------------
00000000                            51  * File ARAM      DATA VARIABLES                                   05/10/82
00000000                            52  
00000000                            53  ****************************************************************
00000000                            54  *  N O T E:  Ram locations:   starting at zero                 *
00000000                            55  ****************************************************************
00000000                            56  
00000000                            57           ORG     $000000
00000000                            58  
00000000                            59  *                               DEC HEX  DESCRIPTION
00000000= 01000000                  60           DC.L    $1000000       0   $00  RESET STACK LOCATION
00000004= 00008146                  61           DC.L    START          1   $01  RESET PC
00000008                            62  
00000008                            63  
00000008                            64  AV2      DS.L    1              2   $02  BUS ERROR            "BUS "
0000000C                            65  AV3      DS.L    1              3   $03  ADDRESS ERROR        "ADDR"
00000010                            66  AV4      DS.L    1              4   $04  ILL INSTRUCTION      "OPCO"
00000014                            67           DS.L    1              5   $05  DIVIDE BY ZERO       "DIV0"
00000018                            68           DS.L    1              6   $06  CHECK TRAP           "CHCK"
0000001C                            69           DS.L    1              7   $07  TRAP V               "TP V"
00000020                            70  AV8      DS.L    1              8   $08  PRIVILEDGE VIOLATION "PRIV"
00000024                            71  AV9      DS.L    1              9   $09  TRACE
00000028                            72           DS.L    1              10  $0A  1010 LINE EMULATION  "1010"
0000002C                            73  AV11     DS.L    1              11  $0B  1111 LINE EMULATION  "1111"
00000030                            74  AV12     DS.L    1              12  $0C  USED AS TEMPORARY STORAGE FOR VECTOR MSGS.
00000034                            75           DS.L    1              13  $0D  NOT USED
00000038                            76           DS.L    1              14  $0E
0000003C                            77           DS.L    1              15  $0F
00000040                            78           DS.L    1              16  $10
00000044                            79           DS.L    1              17  $11
00000048                            80           DS.L    1              18  $12
0000004C                            81           DS.L    1              19  $13
00000050                            82           DS.L    1              20  $14
00000054                            83           DS.L    1              21  $15
00000058                            84           DS.L    1              22  $16
0000005C                            85           DS.L    1              23  $17
00000060                            86  AV24     DS.L    1              24  $18   0  AUTO VECTORS     "SPUR"
00000064                            87           DS.L    1              25  $19   1                   "AV#1"
00000068                            88           DS.L    1              26  $1A   2                   "AV#2"   TEST BUTTON
0000006C                            89           DS.L    1              27  $1B   3                   "AV#3"
00000070                            90           DS.L    1              28  $1C   4                   "AV#4"
00000074                            91           DS.L    1              29  $1D   5                   "AV#5"
00000078                            92           DS.L    1              30  $1E   6                   "AV#6"
0000007C                            93  AV31     DS.L    1              31  $1F   7                   "AV#7   [ABORT BUTTON]
00000080                            94           DS.L    1              32  $20   TRAP  0             "UT 0"
00000084                            95           DS.L    1              33  $21   TRAP  1             "UT 1"
00000088                            96           DS.L    1              34  $22   TRAP  2             "UT 2"
0000008C                            97           DS.L    1              35  $23   TRAP  3             "UT 3"
00000090                            98           DS.L    1              36  $24   TRAP  4             "UT 4"
00000094                            99           DS.L    1              37  $25   TRAP  5             "UT 5"
00000098                           100           DS.L    1              38  $26   TRAP  6             "UT 6"
0000009C                           101           DS.L    1              39  $27   TRAP  7             "UT 7"
000000A0                           102           DS.L    1              40  $28   TRAP  8             "UT 8"
000000A4                           103           DS.L    1              41  $29   TRAP  9             "UT 9"
000000A8                           104           DS.L    1              42  $2A   TRAP 10             "UT A"
000000AC                           105           DS.L    1              43  $2B   TRAP 11             "UT B"
000000B0                           106           DS.L    1              44  $2C   TRAP 12             "UT C"
000000B4                           107           DS.L    1              45  $2D   TRAP 13             "UT D"
000000B8                           108  AV46     DS.L    1              46  $2E   TRAP 14             "UT E"
000000BC                           109  AV47     DS.L    1              47  $2F   TRAP 15             "UT F"
000000C0                           110  AV48     DS.L    1              48  $30
000000C4                           111           DS.L    1              49  $31
000000C8                           112           DS.L    1              50  $32
000000CC                           113           DS.L    1              51  $33
000000D0                           114           DS.L    1              52  $34
000000D4                           115           DS.L    1              53  $35
000000D8                           116           DS.L    1              54  $36
000000DC                           117           DS.L    1              55  $37
000000E0                           118           DS.L    1              56  $38
000000E4                           119           DS.L    1              57  $39
000000E8                           120           DS.L    1              58  $3A
000000EC                           121           DS.L    1              59  $3B
000000F0                           122           DS.L    1              60  $3C
000000F4                           123           DS.L    1              61  $3D
000000F8                           124           DS.L    1              62  $3E
000000FC                           125           DS.L    1              63  $3F
00000100                           126           DS.L    1              64  $40
00000104                           127           DS.L    1              65  $41
00000108                           128           DS.L    1              66  $42
0000010C                           129           DS.L    1              67  $43
00000110                           130           DS.L    1              68  $44
00000114                           131           DS.L    1              69  $45
00000118                           132           DS.L    1              70  $46
0000011C                           133           DS.L    1              71  $47
00000120                           134           DS.L    1              72  $48
00000124                           135           DS.L    1              73  $49
00000128                           136           DS.L    1              74  $4A
0000012C                           137           DS.L    1              75  $4B
00000130                           138           DS.L    1              76  $4C
00000134                           139           DS.L    1              77  $4D
00000138                           140           DS.L    1              78  $4E
0000013C                           141           DS.L    1              79  $4F
00000140                           142           DS.L    1              80  $50
00000144                           143           DS.L    1              81  $51
00000148                           144           DS.L    1              82  $52
0000014C                           145           DS.L    1              83  $53
00000150                           146           DS.L    1              84  $54
00000154                           147           DS.L    1              85  $55
00000158                           148           DS.L    1              86  $56
0000015C                           149           DS.L    1              87  $57
00000160                           150           DS.L    1              88  $58
00000164                           151           DS.L    1              89  $59
00000168                           152           DS.L    1              90  $5A
0000016C                           153           DS.L    1              91  $5B
00000170                           154           DS.L    1              92  $5C
00000174                           155           DS.L    1              93  $5D
00000178                           156           DS.L    1              94  $5E
0000017C                           157           DS.L    1              95  $5F
00000180                           158           DS.L    1              96  $60
00000184                           159           DS.L    1              97  $61
00000188                           160           DS.L    1              98  $62
0000018C                           161           DS.L    1              99  $63
00000190                           162           DS.L    1              100  $64
00000194                           163           DS.L    1              101  $65
00000198                           164           DS.L    1              102  $66
0000019C                           165           DS.L    1              103  $67
000001A0                           166           DS.L    1              104  $68
000001A4                           167           DS.L    1              105  $69
000001A8                           168           DS.L    1              106  $6A
000001AC                           169           DS.L    1              107  $6B
000001B0                           170           DS.L    1              108  $6C
000001B4                           171           DS.L    1              109  $6D
000001B8                           172           DS.L    1              110  $6E
000001BC                           173           DS.L    1              111  $6F
000001C0                           174           DS.L    1              112  $70
000001C4                           175           DS.L    1              113  $71
000001C8                           176           DS.L    1              114  $72
000001CC                           177           DS.L    1              115  $73
000001D0                           178           DS.L    1              116  $74
000001D4                           179           DS.L    1              117  $75
000001D8                           180           DS.L    1              118  $76
000001DC                           181           DS.L    1              119  $77
000001E0                           182           DS.L    1              120  $78
000001E4                           183           DS.L    1              121  $79
000001E8                           184           DS.L    1              122  $7A
000001EC                           185           DS.L    1              123  $7B
000001F0                           186           DS.L    1              124  $7C
000001F4                           187           DS.L    1              125  $7D
000001F8                           188           DS.L    1              126  $7E
000001FC                           189           DS.L    1              127  $7F
00000200                           190           DS.L    1              128  $80
00000204                           191           DS.L    1              129  $81
00000208                           192           DS.L    1              130  $82
0000020C                           193           DS.L    1              131  $83
00000210                           194           DS.L    1              132  $84
00000214                           195           DS.L    1              133  $85
00000218                           196           DS.L    1              134  $86
0000021C                           197           DS.L    1              135  $87
00000220                           198           DS.L    1              136  $88
00000224                           199           DS.L    1              137  $89
00000228                           200           DS.L    1              138  $8A
0000022C                           201           DS.L    1              139  $8B
00000230                           202           DS.L    1              140  $8C
00000234                           203           DS.L    1              141  $8D
00000238                           204           DS.L    1              142  $8E
0000023C                           205           DS.L    1              143  $8F
00000240                           206           DS.L    1              144  $90
00000244                           207           DS.L    1              145  $91
00000248                           208           DS.L    1              146  $92
0000024C                           209           DS.L    1              147  $93
00000250                           210           DS.L    1              148  $94
00000254                           211           DS.L    1              149  $95
00000258                           212           DS.L    1              150  $96
0000025C                           213           DS.L    1              151  $97
00000260                           214           DS.L    1              152  $98
00000264                           215           DS.L    1              153  $99
00000268                           216           DS.L    1              154  $9A
0000026C                           217           DS.L    1              155  $9B
00000270                           218           DS.L    1              156  $9C
00000274                           219           DS.L    1              157  $9D
00000278                           220           DS.L    1              158  $9E
0000027C                           221           DS.L    1              159  $9F
00000280                           222           DS.L    1              160  $A0
00000284                           223           DS.L    1              161  $A1
00000288                           224           DS.L    1              162  $A2
0000028C                           225           DS.L    1              163  $A3
00000290                           226           DS.L    1              164  $A4
00000294                           227           DS.L    1              165  $A5
00000298                           228           DS.L    1              166  $A6
0000029C                           229           DS.L    1              167  $A7
000002A0                           230           DS.L    1              168  $A8
000002A4                           231           DS.L    1              169  $A9
000002A8                           232           DS.L    1              170  $AA
000002AC                           233           DS.L    1              171  $AB
000002B0                           234           DS.L    1              172  $AC
000002B4                           235           DS.L    1              173  $AD
000002B8                           236           DS.L    1              174  $AE
000002BC                           237           DS.L    1              175  $AF
000002C0                           238           DS.L    1              176  $B0
000002C4                           239           DS.L    1              177  $B1
000002C8                           240           DS.L    1              178  $B2
000002CC                           241           DS.L    1              179  $B3
000002D0                           242           DS.L    1              180  $B4
000002D4                           243           DS.L    1              181  $B5
000002D8                           244           DS.L    1              182  $B6
000002DC                           245           DS.L    1              183  $B7
000002E0                           246           DS.L    1              184  $B8
000002E4                           247           DS.L    1              185  $B9
000002E8                           248           DS.L    1              186  $BA
000002EC                           249           DS.L    1              187  $BB
000002F0                           250           DS.L    1              188  $BC
000002F4                           251           DS.L    1              189  $BD
000002F8                           252           DS.L    1              190  $BE
000002FC                           253           DS.L    1              191  $BF
00000300                           254           DS.L    1              192  $C0
00000304                           255           DS.L    1              193  $C1
00000308                           256           DS.L    1              194  $C2
0000030C                           257           DS.L    1              195  $C3
00000310                           258           DS.L    1              196  $C4
00000314                           259           DS.L    1              197  $C5
00000318                           260           DS.L    1              198  $C6
0000031C                           261           DS.L    1              199  $C7
00000320                           262           DS.L    1              200  $C8
00000324                           263           DS.L    1              201  $C9
00000328                           264           DS.L    1              202  $CA
0000032C                           265           DS.L    1              203  $CB
00000330                           266           DS.L    1              204  $CC
00000334                           267           DS.L    1              205  $CD
00000338                           268           DS.L    1              206  $CE
0000033C                           269           DS.L    1              207  $CF
00000340                           270           DS.L    1              208  $D0
00000344                           271           DS.L    1              209  $D1
00000348                           272           DS.L    1              210  $D2
0000034C                           273           DS.L    1              211  $D3
00000350                           274           DS.L    1              212  $D4
00000354                           275           DS.L    1              213  $D5
00000358                           276           DS.L    1              214  $D6
0000035C                           277           DS.L    1              215  $D7
00000360                           278           DS.L    1              216  $D8
00000364                           279           DS.L    1              217  $D9
00000368                           280           DS.L    1              218  $DA
0000036C                           281           DS.L    1              219  $DB
00000370                           282           DS.L    1              220  $DC
00000374                           283           DS.L    1              221  $DD
00000378                           284           DS.L    1              222  $DE
0000037C                           285           DS.L    1              223  $DF
00000380                           286           DS.L    1              224  $E0
00000384                           287           DS.L    1              225  $E1
00000388                           288           DS.L    1              226  $E2
0000038C                           289           DS.L    1              227  $E3
00000390                           290           DS.L    1              228  $E4
00000394                           291           DS.L    1              229  $E5
00000398                           292           DS.L    1              230  $E6
0000039C                           293           DS.L    1              231  $E7
000003A0                           294           DS.L    1              232  $E8
000003A4                           295           DS.L    1              233  $E9
000003A8                           296           DS.L    1              234  $EA
000003AC                           297           DS.L    1              235  $EB
000003B0                           298           DS.L    1              236  $EC
000003B4                           299           DS.L    1              237  $ED
000003B8                           300           DS.L    1              238  $EE
000003BC                           301           DS.L    1              239  $EF
000003C0                           302           DS.L    1              240  $F0
000003C4                           303           DS.L    1              241  $F1
000003C8                           304           DS.L    1              242  $F2
000003CC                           305           DS.L    1              243  $F3
000003D0                           306           DS.L    1              244  $F4
000003D4                           307           DS.L    1              245  $F5
000003D8                           308           DS.L    1              246  $F6
000003DC                           309           DS.L    1              247  $F7
000003E0                           310           DS.L    1              248  $F8
000003E4                           311           DS.L    1              249  $F9
000003E8                           312           DS.L    1              250  $FA
000003EC                           313           DS.L    1              251  $FB
000003F0                           314           DS.L    1              252  $FC
000003F4                           315           DS.L    1              253  $FD            3RD
000003F8                           316           DS.L    1              254  $FE            2ND
000003FC                           317           DS.L    1              255  $FF VECTOR FOR 1ST IPC DISK CONTROLLER
00000400                           318  
00000400                           319  
00000400                           320  *  PSEUDO REGISTERS
00000400                           321  
00000400                           322  REGPC    DS.L    1              USERS PROGRAM COUNTER
00000404                           323  REGSR    DS.L    1              USERS CONDITION CODES
00000408                           324  REGS     DS.L    8              D REGISTERS
00000428                           325           DS.L    7              A0 THROUGH A6 REGISTERS
00000444                           326  REGA7    DS.L    1              A7 REGISTER
00000448                           327  REGUS    DS.L    1              USER STACK
0000044C                           328  
0000044C                           329  
0000044C                           330  
0000044C                           331  ****************************************************************
0000044C                           332  *              WORKING STORAGE                                 *
0000044C                           333  *  NOTE: SUBROUTINE "INITHRAM" ZEROES RAM...                   *
0000044C                           334  *        FROM "BEGHRAM" THROUGH "ENDHRAM" WHEN IT IS EXECUTED  *
0000044C                           335  ****************************************************************
0000044C                           336  
0000044C                           337  BEGHRAM  DS      0              INITIALIZE STARTS HERE
0000044C                           338  
0000044C                           339  OFFSET   DS.L    8              ASSUMED OFFSETS (VIA "R@" FORMAT)
0000046C                           340  MEMSIZE  DS.L    1              MEMORY SIZE IN BYTES
00000470                           341  BPADD    DS.L    8              BREAKPOINT ADDRESSES
00000490                           342  BPTILL   DS.L    1              TEMPORARY BREAKPOINT
00000494                           343  BPCNT    DS.L    9              BREAKPOINT COUNTS
000004B8                           344  BPDATA   DS.W    9              HOLD USER WORDS REPLACED BY TRAP IN SET BP
000004CA                           345  BERRD    DS.L    2              SPECIAL DATA FOR BUS AND ADDR ERROR EXCEPTIONS
000004D2                           346  SAVEAV4  DS.L    1              HOLDS USER'S AV4 VECTOR (WE USE FOR BP)
000004D6                           347  TEMP     DS.L    1              TEMP
000004DA                           348  TRACECNT DS.L    1              TRACE COUNTER (-1=TRACE 1 & RUN)
000004DE                           349  TRACEON  DS.W    1              FLAG FOR TRACE ON
000004E0                           350  BPSTATUS DS.W    1              1=PB ARE IN  0=ARE OUT OF MEMORY
000004E2                           351  ECHOPT1  DS.L    1              ECHO FLAG TO PORT ONE
000004E6                           352  
000004E6                           353  
000004E6                           354  
000004E6                           355  * THE FOLLOWING MUST REMAIN AS IS
000004E6                           356  *  User docomentation DEPENDS upon it!
000004E6                           357  *
000004E6                           358  OPTIONS  DS.W    0              FORCE WORD BOUNDRY
000004E6                           359           DS.B    1              X-ON CHARACTER
000004E7                           360           DS.B    1              X-OFF CHARACTER
000004E8                           361           DS.B    1              NO NO-AUTO LINEFEED
000004E9                           362           DS.B    1              SHORT FORM REGISTER DISPLAY
000004EA                           363           DS.B    1              TM  trailing character
000004EB                           364           DS.B    1              TM  exit character
000004EC  =000004E6                365  XONOFF   EQU     OPTIONS
000004EC  =000004EA                366  TMCHARS  EQU     OPTIONS+4
000004EC                           367  
000004EC                           368  * END of as is section
000004EC                           369  
000004EC                           370  
000004EC                           371  
000004EC                           372  ***************************
000004EC                           373  * TARGET SUPERVISOR STACK *
000004EC                           374  ***************************
000004EC                           375  
000004EC                           376           DS.L    20
0000053C                           377  SSA7     DS.L    1
00000540                           378  
00000540                           379  
00000540                           380  
00000540                           381  **************
00000540                           382  * I/O BUFFER *
00000540                           383  **************
00000540                           384  
00000540                           385  BUFFER   DS.B    BUFFSIZE
000005C0                           386  
000005C0                           387  DUMPTEMP DS.B    80             HEADER TEMP BUFFER
00000610                           388  
00000610                           389  SCREEN1  DS.L    1              PRINT THIS BEFORE TRACE DISPLAY
00000614                           390  SCREEN2  DS.L    1              PRINT THIS AFTER TRACE DISPLAY
00000618                           391  
00000618                           392  NULLPADS DS.B    2              CHARACTER NULL PADS
0000061A                           393  CRPADS   DS.B    2              CARRIAGE RETURN NULL PADS
0000061C                           394  
0000061C                           395  OUTTO    DS.L    1              HOLDS ADDRESS OF OUTPUT ROUTINE
00000620                           396  INFROM   DS.L    1              HOLDS ADDRESS OF INPUT ROUTINE
00000624                           397  ALTSER1  DS.L    1              ALTERNATE SERIAL PORT#1
00000628                           398  ALTSER2  DS.L    1              ALTERNATE SERIAL PORT#2
0000062C                           399  INPORT1  DS.L    1              INPUT ROUTINE ADDRESS
00000630                           400  OUTPORT1 DS.L    1              ADDRESS FOR OUPUT ROUTINE
00000634                           401  INPORT2  DS.L    1              ADDRESS FOR INPUT ROUTINE
00000638                           402  OUTPORT2 DS.L    1              FOR OUTPURT ROUTINE
0000063C                           403  INPORT3  DS.L    1              THIS MIGHT BE FOR TAPE
00000640                           404  OUTPORT3 DS.L    1              THIS MIGHT BE FOR PRINTER
00000644                           405  *INPORT4  DS.L    1              CASSETTE
00000644                           406  *OUTPORT4 DS.L    1              CASSETTE
00000644                           407  *MD1CON   DS.W    1              ACIA PROFILE (PORT1/PORT2)
00000644                           408  PDIPORT  DS.L    1              PDIPORT ADDRESS
00000648                           409  CRTPNT   DS.W    1              OUTPUT TO PRINTER AND CRT
0000064A                           410  TAPENULS DS.B    1              NULLS FOR CASSETTE
0000064B                           411  
0000064B                           412           DS.B    1              PAD BYTE
0000064C                           413  
0000064C                           414  CTLINK   DS.L    1              POINTER TO FIRST TABLE
00000650                           415  
00000650                           416  
00000650                           417  
00000650                           418  ENDHRAM  DS.W    0              MUST START ON WORD BOUNDRY
00000650                           419  
00000650                           420  
00000650                           421  
00000650                           422  *********************
00000650                           423  * SYSTEM STACK AREA *
00000650                           424  *********************
00000650                           425  
00000650                           426           DS.W    0              FORCE ON WORD BOUNDRY
00000650                           427           DS.B    300            ROOM FOR STACK
0000077C                           428  SYSTACK  DS.W    1              START OF STACK (ADDRESS DECREASES)
0000077E                           429           DS.B    4              STRETCHED STACK (USED BY 'SAVE')
00000782                           430  
00000782                           431           DS.B    120            EXTENDED AREA USED IF DISASSEMBLER
000007FA                           432  
000007FA                           433           DS.B    0              LAST LOW MEMORY LOCATION USED + 1
000007FA                           434  
000007FA                           435  
000007FA                           436  *-------------------------------------------------------------------------
000007FA                           437  
000007FA                           438  *CODE68K
00000000=                          439           OFFSET  0
00000000=                          440  ESKB     DS      0
00000000=                          441  TDATA    DS.B    10
0000000A=                          442  TNB      DS.B    1
0000000B=                          443  TLSPEC   DS.B    1
0000000C=                          444  TLENGTH  DS.W    1
0000000E=                          445  PCOUNTER DS.L    1
00000012=                          446  PTROP    DS.L    1              POINTER TO OPERAND
00000016=                          447  PENDOP   DS.L    1              POINTER END OF OPERAND
0000001A=                          448  PTRBUFE  DS.L    1              POINTER TO END OF FORMATED SOURCE
0000001E=                          449  LINK     DS.L    1              SAVE FOR UNLINK
00000022=                          450  ESKE     DS.B    0
00000022=                          451  
00000022=                          452  
00000022=                          453  *DCODE68K
FFFFFFF0=                          454           OFFSET  -LOCVARSZ
FFFFFFF0=                          455  DDATA    DS.L    3
FFFFFFFC=                          456  HISPC    DS.L    1
00000000=                          457  
00000000=                          458  
00000000=                          459  *LOAD
FFFFFFBC=                          460           OFFSET  -((BUFFSIZE/2)+4)
FFFFFFBC=                          461  CC       DS.L    1              CC (BYTE COUNT)
FFFFFFC0=                          462  ADDRESS  DS.L    1              ADDRESS + OFFSET
FFFFFFC4=                          463  LDATA    DS.B    1
FFFFFFC5=                          464  
FFFFFFC5=                          465  
FFFFFFC5=                          466  
FFFFFFC5=                          467  
FFFFFFC5=                          468  *-------------------------------------------------------------------------
FFFFFFC5=                          469  * File B         Init Vectors+Ram                                 05/29/82
FFFFFFC5=                          470  
00008000                           471           ORG     $008000
00008000                           472  
00008000= 00000444                 473  FIRST    DC.L    REGA7          SUPERVISOR STACK
00008004= 00008146                 474           DC.L    START          PROGRAM COUNTER
00008008  6000 0C22                475  V2       BRA.L   TRACE
0000800C                           476  
0000800C                           477  
0000800C                           478  **********************************
0000800C                           479  * INITIALIZE HIGH RAM SUBROUTINE *
0000800C                           480  **********************************
0000800C                           481  
0000800C  41F8 044C                482  INITHRAM LEA     BEGHRAM,A0     START OF WORK RAM (PAST REGISTERS)
00008010  203C 00000204            483           MOVE.L  #(ENDHRAM-BEGHRAM),D0  BYTES TO ZERO
00008016  4281                     484           CLR.L   D1
00008018  10C1                     485  INIT     MOVE.B  D1,(A0)+       ZERO MEMORY
0000801A  5380                     486           SUBQ.L  #1,D0
0000801C  66FA                     487           BNE     INIT
0000801E                           488  
0000801E                           489m          ADDR2MEM BERRMSG,AV2   POINT AT BUS TRAP ERROR MESSAGE ROUTINE
0000801E  487A 0010                490m       PEA     BERRMSG(PC)         MOVE ADDRESS TO MEMORY; POSITION
00008022  21DF 0008                491m       MOVE.L  (A7)+,AV2       INDEPENDANT = TO "MOVE.L #BERRMSG,AV2"
00008026                           492m       ENDM
00008026                           493  
00008026                           494m          ADDR2MEM ADDRMSG,AV3   POINT AT ADDRESS TRAP ERROR MESSAGE ROUTINE
00008026  487A 0012                495m       PEA     ADDRMSG(PC)         MOVE ADDRESS TO MEMORY; POSITION
0000802A  21DF 000C                496m       MOVE.L  (A7)+,AV3       INDEPENDANT = TO "MOVE.L #ADDRMSG,AV3"
0000802E                           497m       ENDM
0000802E                           498  
0000802E  4E75                     499           RTS
00008030                           500  
00008030                           501  
00008030                           502  ****************************************************
00008030                           503  * SPECIAL HANDLING FOR BUS ERROR AND ADDRESS ERROR *
00008030                           504  ****************************************************
00008030                           505  
00008030  21FC 42555320 0030       506  BERRMSG  MOVE.L  #'BUS ',$30
00008038                           507  
00008038  6008                     508           BRA.S   VECTBE
0000803A                           509  
0000803A  21FC 41444452 0030       510  ADDRMSG  MOVE.L  #'ADDR',$30
00008042                           511  
00008042                           512  
00008042  21DF 04CA                513  VECTBE   MOVE.L  (A7)+,BERRD
00008046  21DF 04CE                514           MOVE.L  (A7)+,BERRD+4
0000804A                           515  
0000804A                           516m          SAVEREGS
0000804A  21CF 0444                517m       MOVE.L  A7,REGA7       SAVE STACK POINTER
0000804E  4FFA 000A                518m       LEA     SV_3(PC),A7    A7 = RETURN ADDRESS (FOR CALL TO SAVE)
00008052  21CF 04D6                519m       MOVE.L  A7,TEMP        TEMP = RETURN ADDRESS
00008056  6000 0BA6                520m       BRA     SAVE           BSR WITHOUT USING STACK
0000805A                           521m SV_3  DS      0
0000805A                           522m       ENDM
0000805A  6100 184E                523           BSR     FIXBUF
0000805E  3CFC 0D0A                524           MOVE.W  #$D0A,(A6)+
00008062  3038 04CA                525           MOVE.W  BERRD,D0
00008066  6100 157A                526           BSR     PNT4HX         FORMAT FUNCTION CODE
0000806A                           527  
0000806A  1CFC 0020                528           MOVE.B  #BLANK,(A6)+   SPACE
0000806E  2038 04CC                529           MOVE.L  BERRD+2,D0
00008072  6100 1560                530           BSR     PNT8HX         FORMAT ACCESS ADDRESS
00008076                           531  
00008076  1CFC 0020                532           MOVE.B  #BLANK,(A6)+   SPACE
0000807A  3038 04D0                533           MOVE.W  BERRD+6,D0
0000807E  6100 1562                534           BSR     PNT4HX         FORMAT INSTRUCTION REGISTER
00008082                           535  
00008082  6100 17B8                536           BSR     OUTPUT
00008086  6000 1528                537           BRA     EVECT2         GO DISPLAY REGISTERS & PROMPT
0000808A                           538  
0000808A= 53 59 4E 54 41 58 20     539  MSG008   DC.B    'SYNTAX '
00008091                           540  
00008091= 45 52 52 4F 52 20        541  MSG008E  DC.B    'ERROR '
00008097                           542  
00008097= 04                       543  MSGEOT   DC.B    EOT
00008098                           544  
00008098= 57 48 41 54 04           545  MSG021   DC.B    'WHAT',EOT
0000809D                           546  
0000809D= 00                       547           DC.B    0              PAD BYTE
0000809E                           548  
0000809E                           549  
0000809E                           550  * PRINT WHAT
0000809E                           551  
0000809E  4BFA FFF8                552  WHAT     LEA     MSG021(PC),A5  PRINT 'WHAT' AND ENTER MACSBUG
000080A2  614E                     553  WHAT93   BSR.S   FIXDATA
000080A4  4278 04DE                554           CLR.W   TRACEON
000080A8  6100 1778                555  MSG      BSR     OUT1CR
000080AC  6000 0116                556           BRA     MACSBUG
000080B0                           557  
000080B0                           558  
000080B0                           559  * PRINT ERROR
000080B0                           560  
000080B0  4BFA FFDF                561  ERROR    LEA     MSG008E(PC),A5
000080B4  60EC                     562           BRA     WHAT93
000080B6                           563  
000080B6  4BFA FFD2                564  SYNTAX   LEA     MSG008(PC),A5  'SYNTAX ERROR'
000080BA  60E6                     565           BRA     WHAT93
000080BC                           566  
000080BC                           567  * FORMAT PHYSICAL ADDRESS FROM (D0)
000080BC  4BFA 0022                568  PPHY     LEA     MSG019(PC),A5
000080C0  6130                     569           BSR.S   FIXDATA
000080C2  6012                     570           BRA.S   P2PHY2
000080C4                           571  
000080C4                           572  * FORMAT TWO PHYSICAL ADDRESSES FROM (A0) & (A1)
000080C4  4BFA 001A                573  P2PHY    LEA     MSG019(PC),A5  'PHYSICAL ADDRESS='
000080C8  6128                     574           BSR.S   FIXDATA
000080CA  2008                     575           MOVE.L  A0,D0
000080CC  6100 1506                576           BSR     PNT8HX         FORMAT ADDR1
000080D0  1CFC 0020                577           MOVE.B  #BLANK,(A6)+   SPACE FOR FORMATING
000080D4  2009                     578           MOVE.L  A1,D0
000080D6  6100 14FC                579  P2PHY2   BSR     PNT8HX         FORMAT ADDR2
000080DA  6100 1746                580           BSR     OUT1CR         DISPLAY IT
000080DE  4E75                     581           RTS
000080E0                           582  
000080E0= 50 48 59 53 49 43 41     583  MSG019   DC.B    'PHYSICAL ADDRESS=',EOT
          4C 20 41 44 44 52 45  
          53 53 3D 04           
000080F2                           586  
000080F2                           587  
000080F2                           588  
000080F2                           589  
000080F2                           590  
000080F2                           591  *************************************************************
000080F2                           592  * -FIXDATA- SUBROUTINE...  MOVES MESSAGE POINTED TO BY (A5) *
000080F2                           593  *                          INTO "BUFFER". EOT, ($04), ENDS  *
000080F2                           594  *                          THE MOVE. AT COMPLETION (A5) IS  *
000080F2                           595  *                          POINTING AT THE BEGINNING, (A6)  *
000080F2                           596  *                          POINTS AT END.                   *
000080F2                           597  *************************************************************
000080F2                           598  
000080F2  4DF8 0540                599  FIXDATA  LEA     BUFFER,A6
000080F6  0C15 0004                600  FIXDADD  CMPI.B  #EOT,(A5)
000080FA  6704                     601           BEQ.S   FIXD2
000080FC  1CDD                     602           MOVE.B  (A5)+,(A6)+
000080FE  60F6                     603           BRA     FIXDADD
00008100  4BF8 0540                604  FIXD2    LEA     BUFFER,A5
00008104  4E75                     605           RTS
00008106                           606  
00008106                           607  
00008106                           608  ************************************************************
00008106                           609  * -FIXDCRLF- SUBROUTINE INSERTS A CARRIAGE RETURN AND LINE *
00008106                           610  *                       FEED IN FRONT OF THE TEXT, THEN    *
00008106                           611  *                       USES THE REMAINING PORTION OF THE  *
00008106                           612  *                       FIXDATA.                           *
00008106                           613  ************************************************************
00008106                           614  
00008106  4DF8 0540                615  FIXDCRLF LEA     BUFFER,A6
0000810A  3CFC 0D0A                616           MOVE.W  #$0D0A,(A6)+   CR,LF
0000810E  60E6                     617           BRA     FIXDADD
00008110                           618  
00008110                           619  
00008110                           620  
00008110                           621  
00008110                           622  *-------------------------------------------------------------------------
00008110                           623  * File E         VERSAbug entry point                             01/08/81
00008110                           624  
00008110                           625  **********************
00008110                           626  * INITIALIZE VECTORS *
00008110                           627  **********************
00008110                           628  *                               Set most vectors to point at "????" routine
00008110  41F8 0008                629  INITVECT LEA     8,A0           Skip (Restart) STACK & ADDRESS vectors
00008114  43FA 1482                630           LEA     ABORTE(PC),A1  A1 = "Default" TRAP ERROR routine address
00008118                           631  
00008118  20C9                     632  INIT0    MOVE.L  A1,(A0)+       INITIALIZE VECTOR
0000811A  B1FC 00000400            633           CMPA.L  #$400,A0       Done?
00008120  6BF6                     634           BMI.S   INIT0          *
00008122  4E75                     635           RTS
00008124                           636  
00008124                           637  
00008124                           638  * SPECIAL ENTRY THAT DOES NOT CHANGE VECTORS
00008124                           639  
00008124  48B8 0001 0406           640  START1S  MOVEM.W D0,REGSR+2     Assure good parity.
0000812A  40F8 0406                641           MOVE.W  SR,REGSR+2     SAVE TARGET'S STATUS REGISTER
0000812E  21CF 0444                642           MOVE.L  A7,REGA7       SAVE TARGET'S STACK
00008132  21D7 0400                643           MOVE.L  (A7),REGPC     .PROGRAM COUNTER
00008136  4FF8 0444                644           LEA     REGA7,A7
0000813A  48E7 FFFE                645           MOVEM.L D0-D7/A0-A6,-(A7) .REGISTERS
0000813E  4FF8 077C                646           LEA     SYSTACK,A7
00008142  6000 0020                647           BRA     START11
00008146                           648  
00008146                           649  
00008146                           650  ************************
00008146                           651  *    INITIALIZATION    *
00008146                           652  ************************
00008146                           653  
00008146                           654  * SAVE PROCESSOR REGISTERS (EXCEPT A7 & PC)
00008146                           655  
00008146  48B8 0001 0406           656  START    MOVEM.W D0,REGSR+2     Assure good parity
0000814C  40F8 0406                657           MOVE.W  SR,REGSR+2     SAVE STATUS REGISTER
00008150  48E7 FFFE                658           MOVEM.L D0-D7/A0-A6,-(A7)
00008154                           659  
00008154  4FF8 077C                660           LEA     SYSTACK,A7     SET UP STACK
00008158  21CF 0444                661           MOVE.L  A7,REGA7
0000815C                           662  
0000815C  4281                     663           CLR.L   D1
0000815E  21C1 0400                664           MOVE.L  D1,REGPC       PC = 000000
00008162                           665  
00008162  61AC                     666           BSR     INITVECT
00008164                           667  
00008164                           668  
00008164  46FC 2700                669  START11  MOVE.W  #$2700,SR      MASK OFF INTERRUPTS
00008168                           670  
00008168  48E7 C000                671           MOVEM.L  D0-D1,-(A7)
0000816C  4201                     672           CLR.B    D1
0000816E  103C 000C                673           MOVE.B   #12,D0         EASy68K trap task (turn off keyboard echo)
00008172  4E4F                     674           TRAP     #15
00008174  4CDF 0003                675           MOVEM.L  (A7)+,D0-D1
00008178                           676  
00008178  4E68                     677           MOVE.L  USP,A0
0000817A  21C8 0448                678           MOVE.L  A0,REGUS       USER STACK
0000817E                           679  
0000817E  6100 FE8C                680           BSR     INITHRAM       ZERO (INITIALIZE) HIGH RAM
00008182                           681  
00008182                           682  
00008182                           683  * VECTMSG.SA
00008182  6100 0168                684           BSR     INITVMSG
00008186                           685  
00008186                           686  
00008186                           687  * H.SA
00008186                           688m          ADDR2MEM CHKBP,AV4     ILLEGAL INSTRUCTION
00008186  487A 0BCE                689m       PEA     CHKBP(PC)         MOVE ADDRESS TO MEMORY; POSITION
0000818A  21DF 0010                690m       MOVE.L  (A7)+,AV4       INDEPENDANT = TO "MOVE.L #CHKBP,AV4"
0000818E                           691m       ENDM
0000818E                           692  
0000818E                           693  
0000818E                           694  * TM.SA
0000818E  31FC 1801 04EA           695           MOVE.W  #$1801,TMCHARS CNTLX,CNTL/A
00008194                           696  
00008194                           697  
00008194                           698  * W.SA
00008194                           699m          ADDR2MEM  ABORTB,AV31  ABORT
00008194  487A 13C6                700m       PEA     ABORTB(PC)         MOVE ADDRESS TO MEMORY; POSITION
00008198  21DF 007C                701m       MOVE.L  (A7)+,AV31       INDEPENDANT = TO "MOVE.L #ABORTB,AV31"
0000819C                           702m       ENDM
0000819C                           703  
0000819C                           704  
0000819C                           705  * Y.SA
0000819C                           706m          ADDR2MEM  OUT1CR0,OUTPORT1 INITIALIZE I/O ROUTINES
0000819C  487A 169E                707m       PEA     OUT1CR0(PC)         MOVE ADDRESS TO MEMORY; POSITION
000081A0  21DF 0630                708m       MOVE.L  (A7)+,OUTPORT1       INDEPENDANT = TO "MOVE.L #OUT1CR0,OUTPORT1"
000081A4                           709m       ENDM
000081A4                           710m          ADDR2MEM  PORTIN10,INPORT1
000081A4  487A 172C                711m       PEA     PORTIN10(PC)         MOVE ADDRESS TO MEMORY; POSITION
000081A8  21DF 062C                712m       MOVE.L  (A7)+,INPORT1       INDEPENDANT = TO "MOVE.L #PORTIN10,INPORT1"
000081AC                           713m       ENDM
000081AC                           714  
000081AC                           715  
000081AC                           716  * INITIALIZE XON/XOFF (READER ON / READER OFF)
000081AC                           717  *            AUTO-LINE FEED OVERRIDE
000081AC                           718  
000081AC  21FC 00000000 04E6       719           MOVE.L  #$00000000,XONOFF
000081B4                           720  
000081B4                           721  * TRAP14.SA
000081B4                           722m          ADDR2MEM  TRAP14,AV46
000081B4  487A 34BC                723m       PEA     TRAP14(PC)         MOVE ADDRESS TO MEMORY; POSITION
000081B8  21DF 00B8                724m       MOVE.L  (A7)+,AV46       INDEPENDANT = TO "MOVE.L #TRAP14,AV46"
000081BC                           725m       ENDM
000081BC  21FC FE00B716 064C       726           MOVE.L  #(254<<24)+CT,CTLINK
000081C4                           727  
000081C4                           728  
000081C4                           729  ************************************************************************
000081C4                           730  *                    V E R S I O N   N U M B E R   A N D   P R O M P T *
000081C4                           731  ************************************************************************
000081C4                           732  
000081C4  46FC 2700                733  MACSBUG  MOVE.W  #$2700,SR      MASK OFF INTERRUPTS
000081C8  4FF8 077C                734           LEA     SYSTACK,A7     RESTORE SYSTEM STACK
000081CC  6100 0B40                735           BSR     SWAPOUT        GET BP OUT OF USER MEMORY
000081D0                           736  
000081D0  42B8 0490                737           CLR.L   BPTILL         GET RID OF 'TILL' BREAKPOINT
000081D4  42B8 061C                738           CLR.L   OUTTO          INITIALIZE I/O TO DEFAULT
000081D8  42B8 0620                739           CLR.L   INFROM         INITIALIZE I/O TO DEFAULT
000081DC  4238 04E2                740           CLR.B   ECHOPT1        NO ECHO TO PORT1
000081E0                           741  
000081E0  4BFA 00AA                742           LEA     MSG001(PC),A5  > (Prompt)
000081E4  6100 FF0C                743           BSR     FIXDATA
000081E8                           744  
000081E8  4A78 04DE                745           TST.W   TRACEON        SEE IF IN TRACE MODE
000081EC  6704                     746           BEQ.S   MACSBUG1
000081EE  1CFC 003A                747           MOVE.B  #':',(A6)+     IN TRACE MODE
000081F2  1CFC 003E                748  MACSBUG1 MOVE.B  #'>',(A6)+     PROMPT
000081F6  1CFC 0020                749           MOVE.B  #BLANK,(A6)+   .. SPACE
000081FA  6100 1640                750           BSR     OUTPUT         GO PRINT IT
000081FE                           751  
000081FE                           752  * INPUT LINE
000081FE  6100 16AA                753           BSR     FIXBUF         GET READY FOR INPUT
00008202  6100 16AE                754           BSR     PORTIN1        GET A COMMAND
00008206  1CBC 0020                755  DECODE6  MOVE.B  #BLANK,(A6)    BLANK OUT END+1
0000820A                           756  
0000820A                           757  *  DECODE A COMMAND
0000820A                           758  *
0000820A                           759  *  DECODE SPECIAL CHARACTER USAGE:
0000820A                           760  *    LEADING SPACES IGNORED
0000820A                           761  *    LEADING NULLS IGNORED
0000820A                           762  *    IF SECOND CHAR  *  CHAR CAN BE ANY CHAR
0000820A                           763  
0000820A  BBCE                     764           CMP.L   A6,A5          SEE IF ANYTHING ENTERED
0000820C  6B08                     765           BMI.S   DECODE1
0000820E  4A78 04DE                766           TST.W   TRACEON        SEE IF IN TRACE MODE
00008212  6600 02FA                767           BNE     TCMDHOT        DIRECT TO TRACE 1 COMMAND
00008216                           768  
00008216  BBCE                     769  DECODE1  CMP.L   A6,A5          SEE IF AT END OF BUFFER
00008218  6200 FE84                770           BHI     WHAT           GO TO 'WHAT' IF CONFUSED
0000821C  1015                     771           MOVE.B  (A5),D0        GRAB FIRST CHARACTER
0000821E  0C00 002A                772           CMPI.B  #'*',D0        SEND LINE COMMAND
00008222  6608                     773           BNE.S   DECODE10
00008224  528D                     774           ADDQ.L  #1,A5          GET PAST PHOENY PROMPT
00008226  6100 161E                775           BSR     OUTPUT2        SEND LINE+CR (NO LF) TO PORT2
0000822A  6098                     776           BRA     MACSBUG        REENTER COMMAND MODE
0000822C                           777  
0000822C  0C00 0020                778  DECODE10 CMPI.B  #$20,D0        IGNORE LEADING SPACES
00008230  6604                     779           BNE.S   DECODE2        WHERE TO GO IF NOT A SPACE
00008232  528D                     780           ADDQ.L  #1,A5          BUMP START OF BUFFER
00008234  60E0                     781           BRA.S   DECODE1        TRY NEXT CHARACTER
00008236                           782  *
00008236  1215                     783  DECODE2  MOVE.B  (A5),D1        GET 2 LETTERS OF COMMAND
00008238  E149                     784           LSL.W   #8,D1          MAKE ROOM FOR SECOND CHAR
0000823A  122D 0001                785           MOVE.B  1(A5),D1       GET SECOND CHAR
0000823E  4283                     786           CLR.L   D3             D3 = CLEAR "NO" SWITCH
00008240                           787  
00008240  43FA 0058                788  DECODE21 LEA     SOLIST(PC),A1  A1 = COMMAND LIST ADDRESS
00008244  3419                     789  DECODE4  MOVE.W  (A1)+,D2       D2 = 2 CHAR COMMAND FROM LIST
00008246  4280                     790           CLR.L   D0             CLEAR HIGH BITS
00008248  3019                     791           MOVE.W  (A1)+,D0       D0 = OFFSET FROM START OF ROM
0000824A                           792  
0000824A  4A83                     793           TST.L   D3
0000824C  6704                     794           BEQ.S   DECODE41       NOT A "NO"
0000824E  4A02                     795           TST.B   D2             IS "NO" OPTION SUPPORTED THIS COMMAND?
00008250  6AF2                     796           BPL     DECODE4        NO...THEN RUN OUT OF COMMANDS
00008252                           797  
00008252  0242 7F7F                798  DECODE41 ANDI.W  #$7F7F,D2      CLEAR "INVISABLE" & "NO" BITS
00008256  0C42 7F7F                799           CMPI.W  #$7F7F,D2      END OF LIST?
0000825A  6700 FE42                800           BEQ     WHAT           Command not found
0000825E                           801  
0000825E  0C02 002A                802           CMPI.B  #'*',D2        SEE IF DON'T CARE CHARACTER
00008262  6602                     803           BNE.S   DECODE3
00008264  1401                     804           MOVE.B  D1,D2          DEFAULT
00008266                           805  
00008266  B441                     806  DECODE3  CMP.W   D1,D2          Command from table = the input?
00008268  66DA                     807           BNE     DECODE4        COMMAND NOT FOUND
0000826A                           808  
0000826A  4278 04DE                809           CLR.W   TRACEON        TURN OFF TRACE MODE
0000826E                           810  
0000826E  548D                     811           ADDQ.L  #2,A5          POINT A5 PAST 2 DIGIT COMMAND
00008270                           812  
00008270  487A FD8E                813           PEA     FIRST(PC)      BUILD GO TO ADDRESS
00008274  D197                     814           ADD.L   D0,(A7)        ON STACK.
00008276  D797                     815           ADD.L   D3,(A7)
00008278                           816  
00008278  205F                     817           MOVE.L  (A7)+,A0       GO TO COMMAND
0000827A  4E90                     818           JSR     (A0)           * SAVE MARK FOR RETURN
0000827C  6000 FF46                819           BRA     MACSBUG        *  RETURN HERE
00008280                           820  
00008280                           821  *
00008280                           822  *    NO COMMAND
00008280                           823  *
00008280  76FC                     824  NOCMD    MOVEQ   #-4,D3         SET "NO" SWITCH
00008282  1215                     825           MOVE.B  (A5),D1        MOVE CHAR #3
00008284  E141                     826           ASL.W   #8,D1          MOVE OVER 1 CHAR
00008286  122D 0001                827           MOVE.B  1(A5),D1       MOVE CHAR #4
0000828A  60B4                     828           BRA     DECODE21       WHICH "NO" COMMAND?
0000828C                           829  
0000828C                           830  
0000828C                           831  *-------------------------------------------------------------------------
0000828C                           832  * File COMMANDS  Command list                                     06/20/82
0000828C                           833  
0000828C= 0D 0A 54 55 54 4F 52     834  MSG001   DC.B    CR,LF,'TUTOR  1.3 ',EOT    "PROMPT"
          20 20 31 2E 33 20 04  
0000829A                           836  
0000829A                           837  *******************************************************
0000829A                           838  * C O P Y R I G H T . 1 9 8 1 . B Y . M O T O R O L A *
0000829A                           839  *******************************************************
0000829A                           840  
0000829A                           841  * VERSAbug command generation macro
0000829A                           842  CMD      MACRO
0000829A                           843  FLAG     SET     0              *
0000829A                           844           IFC     '\2','HELP=NO'
0000829A                           845  FLAG     SET     FLAG+$8000     * "Help" will not display this command
0000829A                           846           ENDC
0000829A                           847           IFC     '\3','HELP=NO'
0000829A                           848  FLAG     SET     FLAG+$8000     * "Help" will not display this command
0000829A                           849           ENDC
0000829A                           850           IFC     '\2','NORTN=YES'
0000829A                           851  FLAG     SET     FLAG+$80       * "NO\1".Command
0000829A                           852           ENDC
0000829A                           853           IFC     '\3','NORTN=YES'
0000829A                           854  FLAG     SET     FLAG+$80       * "NO\1".Command
0000829A                           855           ENDC
0000829A                           856           IFC     '\1','PER'     Check for the "PER" command
0000829A                           857           DC.W    '.*'+FLAG      * Reg commands (.A2 .D6 .PC .R0 etc.)
0000829A                           858           DC.W    \1CMD-FIRST    *************************************
0000829A                           859           ENDC
0000829A                           860           IFNC    '\1','PER'     If not PERCMD...
0000829A                           861           IFEQ    '\1'&($00FF)   If 1 digit code, 2nd will be a blank.
0000829A                           862           DC.W    '\1 '+FLAG     * "\1"....Command  -  -  (Single Digit)
0000829A                           863           ENDC
0000829A                           864           IFNE    '\1'&($00FF)   If 2 digit code, leave as is.
0000829A                           865           DC.W    '\1'+FLAG      * "\1"...Command
0000829A                           866           ENDC
0000829A                           867           DC.W    \1CMD-FIRST    *************************************
0000829A                           868           ENDC
0000829A                           869           ENDM
0000829A                           870  
0000829A                           871  SOLIST   DS      0              Start Of LIST
0000829A                           872m          CMD     PER,HELP=NO,X
0000829A  =00000000                873m FLAG     SET     0              *
0000829A                 TRUE      874m          IFC     'HELP=NO','HELP=NO'
0000829A  =00008000                875m FLAG     SET     FLAG+$8000     * "HELP" WILL NOT DISPLAY THIS COMMAND
0000829A                           876m          ENDC
0000829A                 FALSE     877m          IFC     'X','HELP=NO'
0000829A                           878m          ENDC
0000829A                 FALSE     879m          IFC     'HELP=NO','NORTN=YES'
0000829A                           880m          ENDC
0000829A                 FALSE     881m          IFC     'X','NORTN=YES'
0000829A                           882m          ENDC
0000829A                 TRUE      883m          IFC     'PER','PER'     CHECK FOR THE "PER" COMMAND
0000829A= AE2A                     884m          DC.W    '.*'+FLAG      * REG COMMANDS (.A2 .D6 .PC .R0 ETC.)
0000829C= 135A                     885m          DC.W    PERCMD-FIRST    *************************************
0000829E                           886m          ENDC
0000829E                 FALSE     887m          IFNC    'PER','PER'     IF NOT PERCMD...
0000829E                           888m          ENDC
0000829E                           889m          ENDM
0000829E                           890m          CMD     NO,HELP=NO,X
0000829E  =00000000                891m FLAG     SET     0              *
0000829E                 TRUE      892m          IFC     'HELP=NO','HELP=NO'
0000829E  =00008000                893m FLAG     SET     FLAG+$8000     * "HELP" WILL NOT DISPLAY THIS COMMAND
0000829E                           894m          ENDC
0000829E                 FALSE     895m          IFC     'X','HELP=NO'
0000829E                           896m          ENDC
0000829E                 FALSE     897m          IFC     'HELP=NO','NORTN=YES'
0000829E                           898m          ENDC
0000829E                 FALSE     899m          IFC     'X','NORTN=YES'
0000829E                           900m          ENDC
0000829E                 FALSE     901m          IFC     'NO','PER'     CHECK FOR THE "PER" COMMAND
0000829E                           902m          ENDC
0000829E                 TRUE      903m          IFNC    'NO','PER'     IF NOT PERCMD...
0000829E                 FALSE     904m          IFEQ    'NO'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
0000829E                           905m          ENDC
0000829E                 TRUE      906m          IFNE    'NO'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
0000829E= CE4F                     907m          DC.W    'NO'+FLAG      * "NO"...COMMAND
000082A0                           908m          ENDC
000082A0= 0280                     909m          DC.W    NOCMD-FIRST    *************************************
000082A2                           910m          ENDC
000082A2                           911m          ENDM
000082A2                           912m          CMD     BF,X,X
000082A2  =00000000                913m FLAG     SET     0              *
000082A2                 FALSE     914m          IFC     'X','HELP=NO'
000082A2                           915m          ENDC
000082A2                 FALSE     916m          IFC     'X','HELP=NO'
000082A2                           917m          ENDC
000082A2                 FALSE     918m          IFC     'X','NORTN=YES'
000082A2                           919m          ENDC
000082A2                 FALSE     920m          IFC     'X','NORTN=YES'
000082A2                           921m          ENDC
000082A2                 FALSE     922m          IFC     'BF','PER'     CHECK FOR THE "PER" COMMAND
000082A2                           923m          ENDC
000082A2                 TRUE      924m          IFNC    'BF','PER'     IF NOT PERCMD...
000082A2                 FALSE     925m          IFEQ    'BF'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082A2                           926m          ENDC
000082A2                 TRUE      927m          IFNE    'BF'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082A2= 4246                     928m          DC.W    'BF'+FLAG      * "BF"...COMMAND
000082A4                           929m          ENDC
000082A4= 0456                     930m          DC.W    BFCMD-FIRST    *************************************
000082A6                           931m          ENDC
000082A6                           932m          ENDM
000082A6                           933m          CMD     BM,X,X
000082A6  =00000000                934m FLAG     SET     0              *
000082A6                 FALSE     935m          IFC     'X','HELP=NO'
000082A6                           936m          ENDC
000082A6                 FALSE     937m          IFC     'X','HELP=NO'
000082A6                           938m          ENDC
000082A6                 FALSE     939m          IFC     'X','NORTN=YES'
000082A6                           940m          ENDC
000082A6                 FALSE     941m          IFC     'X','NORTN=YES'
000082A6                           942m          ENDC
000082A6                 FALSE     943m          IFC     'BM','PER'     CHECK FOR THE "PER" COMMAND
000082A6                           944m          ENDC
000082A6                 TRUE      945m          IFNC    'BM','PER'     IF NOT PERCMD...
000082A6                 FALSE     946m          IFEQ    'BM'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082A6                           947m          ENDC
000082A6                 TRUE      948m          IFNE    'BM'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082A6= 424D                     949m          DC.W    'BM'+FLAG      * "BM"...COMMAND
000082A8                           950m          ENDC
000082A8= 04A8                     951m          DC.W    BMCMD-FIRST    *************************************
000082AA                           952m          ENDC
000082AA                           953m          ENDM
000082AA                           954m          CMD     BR,NORTN=YES,X
000082AA  =00000000                955m FLAG     SET     0              *
000082AA                 FALSE     956m          IFC     'NORTN=YES','HELP=NO'
000082AA                           957m          ENDC
000082AA                 FALSE     958m          IFC     'X','HELP=NO'
000082AA                           959m          ENDC
000082AA                 TRUE      960m          IFC     'NORTN=YES','NORTN=YES'
000082AA  =00000080                961m FLAG     SET     FLAG+$80       * "NOBR".COMMAND
000082AA                           962m          ENDC
000082AA                 FALSE     963m          IFC     'X','NORTN=YES'
000082AA                           964m          ENDC
000082AA                 FALSE     965m          IFC     'BR','PER'     CHECK FOR THE "PER" COMMAND
000082AA                           966m          ENDC
000082AA                 TRUE      967m          IFNC    'BR','PER'     IF NOT PERCMD...
000082AA                 FALSE     968m          IFEQ    'BR'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082AA                           969m          ENDC
000082AA                 TRUE      970m          IFNE    'BR'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082AA= 42D2                     971m          DC.W    'BR'+FLAG      * "BR"...COMMAND
000082AC                           972m          ENDC
000082AC= 05C4                     973m          DC.W    BRCMD-FIRST    *************************************
000082AE                           974m          ENDC
000082AE                           975m          ENDM
000082AE                           976m          CMD     BS,X,X
000082AE  =00000000                977m FLAG     SET     0              *
000082AE                 FALSE     978m          IFC     'X','HELP=NO'
000082AE                           979m          ENDC
000082AE                 FALSE     980m          IFC     'X','HELP=NO'
000082AE                           981m          ENDC
000082AE                 FALSE     982m          IFC     'X','NORTN=YES'
000082AE                           983m          ENDC
000082AE                 FALSE     984m          IFC     'X','NORTN=YES'
000082AE                           985m          ENDC
000082AE                 FALSE     986m          IFC     'BS','PER'     CHECK FOR THE "PER" COMMAND
000082AE                           987m          ENDC
000082AE                 TRUE      988m          IFNC    'BS','PER'     IF NOT PERCMD...
000082AE                 FALSE     989m          IFEQ    'BS'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082AE                           990m          ENDC
000082AE                 TRUE      991m          IFNE    'BS'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082AE= 4253                     992m          DC.W    'BS'+FLAG      * "BS"...COMMAND
000082B0                           993m          ENDC
000082B0= 068A                     994m          DC.W    BSCMD-FIRST    *************************************
000082B2                           995m          ENDC
000082B2                           996m          ENDM
000082B2                           997m          CMD     BT,X,X
000082B2  =00000000                998m FLAG     SET     0              *
000082B2                 FALSE     999m          IFC     'X','HELP=NO'
000082B2                          1000m          ENDC
000082B2                 FALSE    1001m          IFC     'X','HELP=NO'
000082B2                          1002m          ENDC
000082B2                 FALSE    1003m          IFC     'X','NORTN=YES'
000082B2                          1004m          ENDC
000082B2                 FALSE    1005m          IFC     'X','NORTN=YES'
000082B2                          1006m          ENDC
000082B2                 FALSE    1007m          IFC     'BT','PER'     CHECK FOR THE "PER" COMMAND
000082B2                          1008m          ENDC
000082B2                 TRUE     1009m          IFNC    'BT','PER'     IF NOT PERCMD...
000082B2                 FALSE    1010m          IFEQ    'BT'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082B2                          1011m          ENDC
000082B2                 TRUE     1012m          IFNE    'BT'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082B2= 4254                    1013m          DC.W    'BT'+FLAG      * "BT"...COMMAND
000082B4                          1014m          ENDC
000082B4= 07C4                    1015m          DC.W    BTCMD-FIRST    *************************************
000082B6                          1016m          ENDC
000082B6                          1017m          ENDM
000082B6                          1018m          CMD     DC,X,X
000082B6  =00000000               1019m FLAG     SET     0              *
000082B6                 FALSE    1020m          IFC     'X','HELP=NO'
000082B6                          1021m          ENDC
000082B6                 FALSE    1022m          IFC     'X','HELP=NO'
000082B6                          1023m          ENDC
000082B6                 FALSE    1024m          IFC     'X','NORTN=YES'
000082B6                          1025m          ENDC
000082B6                 FALSE    1026m          IFC     'X','NORTN=YES'
000082B6                          1027m          ENDC
000082B6                 FALSE    1028m          IFC     'DC','PER'     CHECK FOR THE "PER" COMMAND
000082B6                          1029m          ENDC
000082B6                 TRUE     1030m          IFNC    'DC','PER'     IF NOT PERCMD...
000082B6                 FALSE    1031m          IFEQ    'DC'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082B6                          1032m          ENDC
000082B6                 TRUE     1033m          IFNE    'DC'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082B6= 4443                    1034m          DC.W    'DC'+FLAG      * "DC"...COMMAND
000082B8                          1035m          ENDC
000082B8= 0816                    1036m          DC.W    DCCMD-FIRST    *************************************
000082BA                          1037m          ENDC
000082BA                          1038m          ENDM
000082BA                          1039m          CMD     DF,X,X
000082BA  =00000000               1040m FLAG     SET     0              *
000082BA                 FALSE    1041m          IFC     'X','HELP=NO'
000082BA                          1042m          ENDC
000082BA                 FALSE    1043m          IFC     'X','HELP=NO'
000082BA                          1044m          ENDC
000082BA                 FALSE    1045m          IFC     'X','NORTN=YES'
000082BA                          1046m          ENDC
000082BA                 FALSE    1047m          IFC     'X','NORTN=YES'
000082BA                          1048m          ENDC
000082BA                 FALSE    1049m          IFC     'DF','PER'     CHECK FOR THE "PER" COMMAND
000082BA                          1050m          ENDC
000082BA                 TRUE     1051m          IFNC    'DF','PER'     IF NOT PERCMD...
000082BA                 FALSE    1052m          IFEQ    'DF'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082BA                          1053m          ENDC
000082BA                 TRUE     1054m          IFNE    'DF'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082BA= 4446                    1055m          DC.W    'DF'+FLAG      * "DF"...COMMAND
000082BC                          1056m          ENDC
000082BC= 0874                    1057m          DC.W    DFCMD-FIRST    *************************************
000082BE                          1058m          ENDC
000082BE                          1059m          ENDM
000082BE                          1060m          CMD     DU,X,X
000082BE  =00000000               1061m FLAG     SET     0              *
000082BE                 FALSE    1062m          IFC     'X','HELP=NO'
000082BE                          1063m          ENDC
000082BE                 FALSE    1064m          IFC     'X','HELP=NO'
000082BE                          1065m          ENDC
000082BE                 FALSE    1066m          IFC     'X','NORTN=YES'
000082BE                          1067m          ENDC
000082BE                 FALSE    1068m          IFC     'X','NORTN=YES'
000082BE                          1069m          ENDC
000082BE                 FALSE    1070m          IFC     'DU','PER'     CHECK FOR THE "PER" COMMAND
000082BE                          1071m          ENDC
000082BE                 TRUE     1072m          IFNC    'DU','PER'     IF NOT PERCMD...
000082BE                 FALSE    1073m          IFEQ    'DU'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082BE                          1074m          ENDC
000082BE                 TRUE     1075m          IFNE    'DU'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082BE= 4455                    1076m          DC.W    'DU'+FLAG      * "DU"...COMMAND
000082C0                          1077m          ENDC
000082C0= 0992                    1078m          DC.W    DUCMD-FIRST    *************************************
000082C2                          1079m          ENDC
000082C2                          1080m          ENDM
000082C2                          1081m          CMD     GD,X,X
000082C2  =00000000               1082m FLAG     SET     0              *
000082C2                 FALSE    1083m          IFC     'X','HELP=NO'
000082C2                          1084m          ENDC
000082C2                 FALSE    1085m          IFC     'X','HELP=NO'
000082C2                          1086m          ENDC
000082C2                 FALSE    1087m          IFC     'X','NORTN=YES'
000082C2                          1088m          ENDC
000082C2                 FALSE    1089m          IFC     'X','NORTN=YES'
000082C2                          1090m          ENDC
000082C2                 FALSE    1091m          IFC     'GD','PER'     CHECK FOR THE "PER" COMMAND
000082C2                          1092m          ENDC
000082C2                 TRUE     1093m          IFNC    'GD','PER'     IF NOT PERCMD...
000082C2                 FALSE    1094m          IFEQ    'GD'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082C2                          1095m          ENDC
000082C2                 TRUE     1096m          IFNE    'GD'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082C2= 4744                    1097m          DC.W    'GD'+FLAG      * "GD"...COMMAND
000082C4                          1098m          ENDC
000082C4= 05A4                    1099m          DC.W    GDCMD-FIRST    *************************************
000082C6                          1100m          ENDC
000082C6                          1101m          ENDM
000082C6                          1102m          CMD     GO,X,X
000082C6  =00000000               1103m FLAG     SET     0              *
000082C6                 FALSE    1104m          IFC     'X','HELP=NO'
000082C6                          1105m          ENDC
000082C6                 FALSE    1106m          IFC     'X','HELP=NO'
000082C6                          1107m          ENDC
000082C6                 FALSE    1108m          IFC     'X','NORTN=YES'
000082C6                          1109m          ENDC
000082C6                 FALSE    1110m          IFC     'X','NORTN=YES'
000082C6                          1111m          ENDC
000082C6                 FALSE    1112m          IFC     'GO','PER'     CHECK FOR THE "PER" COMMAND
000082C6                          1113m          ENDC
000082C6                 TRUE     1114m          IFNC    'GO','PER'     IF NOT PERCMD...
000082C6                 FALSE    1115m          IFEQ    'GO'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082C6                          1116m          ENDC
000082C6                 TRUE     1117m          IFNE    'GO'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082C6= 474F                    1118m          DC.W    'GO'+FLAG      * "GO"...COMMAND
000082C8                          1119m          ENDC
000082C8= 0596                    1120m          DC.W    GOCMD-FIRST    *************************************
000082CA                          1121m          ENDC
000082CA                          1122m          ENDM
000082CA                          1123m          CMD     GT,X,X
000082CA  =00000000               1124m FLAG     SET     0              *
000082CA                 FALSE    1125m          IFC     'X','HELP=NO'
000082CA                          1126m          ENDC
000082CA                 FALSE    1127m          IFC     'X','HELP=NO'
000082CA                          1128m          ENDC
000082CA                 FALSE    1129m          IFC     'X','NORTN=YES'
000082CA                          1130m          ENDC
000082CA                 FALSE    1131m          IFC     'X','NORTN=YES'
000082CA                          1132m          ENDC
000082CA                 FALSE    1133m          IFC     'GT','PER'     CHECK FOR THE "PER" COMMAND
000082CA                          1134m          ENDC
000082CA                 TRUE     1135m          IFNC    'GT','PER'     IF NOT PERCMD...
000082CA                 FALSE    1136m          IFEQ    'GT'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082CA                          1137m          ENDC
000082CA                 TRUE     1138m          IFNE    'GT'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082CA= 4754                    1139m          DC.W    'GT'+FLAG      * "GT"...COMMAND
000082CC                          1140m          ENDC
000082CC= 054A                    1141m          DC.W    GTCMD-FIRST    *************************************
000082CE                          1142m          ENDC
000082CE                          1143m          ENDM
000082CE                          1144m          CMD     HE,X,X
000082CE  =00000000               1145m FLAG     SET     0              *
000082CE                 FALSE    1146m          IFC     'X','HELP=NO'
000082CE                          1147m          ENDC
000082CE                 FALSE    1148m          IFC     'X','HELP=NO'
000082CE                          1149m          ENDC
000082CE                 FALSE    1150m          IFC     'X','NORTN=YES'
000082CE                          1151m          ENDC
000082CE                 FALSE    1152m          IFC     'X','NORTN=YES'
000082CE                          1153m          ENDC
000082CE                 FALSE    1154m          IFC     'HE','PER'     CHECK FOR THE "PER" COMMAND
000082CE                          1155m          ENDC
000082CE                 TRUE     1156m          IFNC    'HE','PER'     IF NOT PERCMD...
000082CE                 FALSE    1157m          IFEQ    'HE'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082CE                          1158m          ENDC
000082CE                 TRUE     1159m          IFNE    'HE'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082CE= 4845                    1160m          DC.W    'HE'+FLAG      * "HE"...COMMAND
000082D0                          1161m          ENDC
000082D0= 0DF4                    1162m          DC.W    HECMD-FIRST    *************************************
000082D2                          1163m          ENDC
000082D2                          1164m          ENDM
000082D2                          1165m          CMD     MD,X,X
000082D2  =00000000               1166m FLAG     SET     0              *
000082D2                 FALSE    1167m          IFC     'X','HELP=NO'
000082D2                          1168m          ENDC
000082D2                 FALSE    1169m          IFC     'X','HELP=NO'
000082D2                          1170m          ENDC
000082D2                 FALSE    1171m          IFC     'X','NORTN=YES'
000082D2                          1172m          ENDC
000082D2                 FALSE    1173m          IFC     'X','NORTN=YES'
000082D2                          1174m          ENDC
000082D2                 FALSE    1175m          IFC     'MD','PER'     CHECK FOR THE "PER" COMMAND
000082D2                          1176m          ENDC
000082D2                 TRUE     1177m          IFNC    'MD','PER'     IF NOT PERCMD...
000082D2                 FALSE    1178m          IFEQ    'MD'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082D2                          1179m          ENDC
000082D2                 TRUE     1180m          IFNE    'MD'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082D2= 4D44                    1181m          DC.W    'MD'+FLAG      * "MD"...COMMAND
000082D4                          1182m          ENDC
000082D4= 0F32                    1183m          DC.W    MDCMD-FIRST    *************************************
000082D6                          1184m          ENDC
000082D6                          1185m          ENDM
000082D6                          1186m          CMD     MM,X,X
000082D6  =00000000               1187m FLAG     SET     0              *
000082D6                 FALSE    1188m          IFC     'X','HELP=NO'
000082D6                          1189m          ENDC
000082D6                 FALSE    1190m          IFC     'X','HELP=NO'
000082D6                          1191m          ENDC
000082D6                 FALSE    1192m          IFC     'X','NORTN=YES'
000082D6                          1193m          ENDC
000082D6                 FALSE    1194m          IFC     'X','NORTN=YES'
000082D6                          1195m          ENDC
000082D6                 FALSE    1196m          IFC     'MM','PER'     CHECK FOR THE "PER" COMMAND
000082D6                          1197m          ENDC
000082D6                 TRUE     1198m          IFNC    'MM','PER'     IF NOT PERCMD...
000082D6                 FALSE    1199m          IFEQ    'MM'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082D6                          1200m          ENDC
000082D6                 TRUE     1201m          IFNE    'MM'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082D6= 4D4D                    1202m          DC.W    'MM'+FLAG      * "MM"...COMMAND
000082D8                          1203m          ENDC
000082D8= 10E2                    1204m          DC.W    MMCMD-FIRST    *************************************
000082DA                          1205m          ENDC
000082DA                          1206m          ENDM
000082DA                          1207m          CMD     MS,X,X
000082DA  =00000000               1208m FLAG     SET     0              *
000082DA                 FALSE    1209m          IFC     'X','HELP=NO'
000082DA                          1210m          ENDC
000082DA                 FALSE    1211m          IFC     'X','HELP=NO'
000082DA                          1212m          ENDC
000082DA                 FALSE    1213m          IFC     'X','NORTN=YES'
000082DA                          1214m          ENDC
000082DA                 FALSE    1215m          IFC     'X','NORTN=YES'
000082DA                          1216m          ENDC
000082DA                 FALSE    1217m          IFC     'MS','PER'     CHECK FOR THE "PER" COMMAND
000082DA                          1218m          ENDC
000082DA                 TRUE     1219m          IFNC    'MS','PER'     IF NOT PERCMD...
000082DA                 FALSE    1220m          IFEQ    'MS'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082DA                          1221m          ENDC
000082DA                 TRUE     1222m          IFNE    'MS'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082DA= 4D53                    1223m          DC.W    'MS'+FLAG      * "MS"...COMMAND
000082DC                          1224m          ENDC
000082DC= 1266                    1225m          DC.W    MSCMD-FIRST    *************************************
000082DE                          1226m          ENDC
000082DE                          1227m          ENDM
000082DE                          1228m          CMD     OF,X,X
000082DE  =00000000               1229m FLAG     SET     0              *
000082DE                 FALSE    1230m          IFC     'X','HELP=NO'
000082DE                          1231m          ENDC
000082DE                 FALSE    1232m          IFC     'X','HELP=NO'
000082DE                          1233m          ENDC
000082DE                 FALSE    1234m          IFC     'X','NORTN=YES'
000082DE                          1235m          ENDC
000082DE                 FALSE    1236m          IFC     'X','NORTN=YES'
000082DE                          1237m          ENDC
000082DE                 FALSE    1238m          IFC     'OF','PER'     CHECK FOR THE "PER" COMMAND
000082DE                          1239m          ENDC
000082DE                 TRUE     1240m          IFNC    'OF','PER'     IF NOT PERCMD...
000082DE                 FALSE    1241m          IFEQ    'OF'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082DE                          1242m          ENDC
000082DE                 TRUE     1243m          IFNE    'OF'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082DE= 4F46                    1244m          DC.W    'OF'+FLAG      * "OF"...COMMAND
000082E0                          1245m          ENDC
000082E0= 148A                    1246m          DC.W    OFCMD-FIRST    *************************************
000082E2                          1247m          ENDC
000082E2                          1248m          ENDM
000082E2                          1249  *         CMD     TM,X,X
000082E2                          1250m          CMD     TR,X,X
000082E2  =00000000               1251m FLAG     SET     0              *
000082E2                 FALSE    1252m          IFC     'X','HELP=NO'
000082E2                          1253m          ENDC
000082E2                 FALSE    1254m          IFC     'X','HELP=NO'
000082E2                          1255m          ENDC
000082E2                 FALSE    1256m          IFC     'X','NORTN=YES'
000082E2                          1257m          ENDC
000082E2                 FALSE    1258m          IFC     'X','NORTN=YES'
000082E2                          1259m          ENDC
000082E2                 FALSE    1260m          IFC     'TR','PER'     CHECK FOR THE "PER" COMMAND
000082E2                          1261m          ENDC
000082E2                 TRUE     1262m          IFNC    'TR','PER'     IF NOT PERCMD...
000082E2                 FALSE    1263m          IFEQ    'TR'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082E2                          1264m          ENDC
000082E2                 TRUE     1265m          IFNE    'TR'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082E2= 5452                    1266m          DC.W    'TR'+FLAG      * "TR"...COMMAND
000082E4                          1267m          ENDC
000082E4= 04FA                    1268m          DC.W    TRCMD-FIRST    *************************************
000082E6                          1269m          ENDC
000082E6                          1270m          ENDM
000082E6                          1271m          CMD     TT,X,X
000082E6  =00000000               1272m FLAG     SET     0              *
000082E6                 FALSE    1273m          IFC     'X','HELP=NO'
000082E6                          1274m          ENDC
000082E6                 FALSE    1275m          IFC     'X','HELP=NO'
000082E6                          1276m          ENDC
000082E6                 FALSE    1277m          IFC     'X','NORTN=YES'
000082E6                          1278m          ENDC
000082E6                 FALSE    1279m          IFC     'X','NORTN=YES'
000082E6                          1280m          ENDC
000082E6                 FALSE    1281m          IFC     'TT','PER'     CHECK FOR THE "PER" COMMAND
000082E6                          1282m          ENDC
000082E6                 TRUE     1283m          IFNC    'TT','PER'     IF NOT PERCMD...
000082E6                 FALSE    1284m          IFEQ    'TT'&($00FF)   IF 1 DIGIT CODE, 2ND WILL BE A BLANK.
000082E6                          1285m          ENDC
000082E6                 TRUE     1286m          IFNE    'TT'&($00FF)   IF 2 DIGIT CODE, LEAVE AS IS.
000082E6= 5454                    1287m          DC.W    'TT'+FLAG      * "TT"...COMMAND
000082E8                          1288m          ENDC
000082E8= 0516                    1289m          DC.W    TTCMD-FIRST    *************************************
000082EA                          1290m          ENDC
000082EA                          1291m          ENDM
000082EA= FFFF                    1292           DC.W      $FFFF     End of list indicator
000082EC                          1293  
000082EC                          1294  
000082EC                          1295  *-------------------------------------------------------------------------
000082EC                          1296  * File VECTMSG   Messages for vectors                             05/29/82
000082EC                          1297  
000082EC                          1298  ************************************************************
000082EC                          1299  *Reprogram some VECTORS to specific ERROR handler routines *
000082EC                          1300  ************************************************************
000082EC                          1301  
000082EC  41FA 0026               1302  INITVMSG LEA     VECT(PC),A0    A0 = START OF VECTOR TABLE
000082F0  43F8 0010               1303           LEA     AV4,A1         A1 = FIRST VECTOR TO INITIALIZE
000082F4  700A                    1304           MOVEQ   #10,D0         D0 = COUNT
000082F6  22C8                    1305  VECTI    MOVE.L  A0,(A1)+       MOVE ADDRESS TO VECTOR
000082F8  D1C0                    1306           ADD.L   D0,A0          BUMP ADDRESS
000082FA  B3FC 00000030           1307           CMPA.L  #AV11+4,A1
00008300  66F4                    1308           BNE     VECTI
00008302                          1309  
00008302  43F8 0060               1310           LEA     AV24,A1        A1 = NEXT VECTOR TO INITIALIZE
00008306  22C8                    1311  VECTI2   MOVE.L  A0,(A1)+       MOVE ADDRESS TO VECTOR
00008308  D1C0                    1312           ADD.L   D0,A0          BUMP ADDRESS
0000830A  B3FC 000000C0           1313           CMPA.L  #AV48,A1
00008310  66F4                    1314           BNE     VECTI2
00008312  4E75                    1315           RTS
00008314                          1316  
00008314                          1317  
00008314                          1318  *************************************************************************
00008314                          1319  * STANDARD VECTOR "MESSAGE" HANDLING ROUTINE ($30 IS TEMP STORAGE AREA) *
00008314                          1320  *************************************************************************
00008314                          1321  
00008314  21FC 4F50434F 0030      1322  VECT     MOVE.L  #'OPCO',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000831C                          1323  
0000831C  604E                    1324           BRA.S   EVECT5
0000831E  21FC 44495630 0030      1325           MOVE.L  #'DIV0',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008326                          1326  
00008326  6044                    1327           BRA.S   EVECT5
00008328  21FC 4348434B 0030      1328           MOVE.L  #'CHCK',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008330                          1329  
00008330  603A                    1330           BRA.S   EVECT5
00008332  21FC 54502056 0030      1331           MOVE.L  #'TP V',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000833A                          1332  
0000833A  6030                    1333           BRA.S   EVECT5
0000833C  21FC 50524956 0030      1334           MOVE.L  #'PRIV',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008344                          1335  
00008344  6026                    1336           BRA.S   EVECT5
00008346  21FC 54524143 0030      1337           MOVE.L  #'TRAC',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000834E                          1338  
0000834E  601C                    1339           BRA.S   EVECT5
00008350  21FC 31303130 0030      1340           MOVE.L  #'1010',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008358                          1341  
00008358  6012                    1342           BRA.S   EVECT5
0000835A  21FC 31313131 0030      1343           MOVE.L  #'1111',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008362                          1344  
00008362  6008                    1345           BRA.S   EVECT5
00008364  21FC 53505552 0030      1346           MOVE.L  #'SPUR',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000836C                          1347  
0000836C  6044                    1348  EVECT5   BRA.S   EVECT6
0000836E  21FC 41562331 0030      1349           MOVE.L  #'AV#1',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008376                          1350  
00008376  603A                    1351           BRA.S   EVECT6
00008378  21FC 41562332 0030      1352           MOVE.L  #'AV#2',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008380                          1353  
00008380  6030                    1354           BRA.S   EVECT6
00008382  21FC 41562333 0030      1355           MOVE.L  #'AV#3',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000838A                          1356  
0000838A  6026                    1357           BRA.S   EVECT6
0000838C  21FC 41562334 0030      1358           MOVE.L  #'AV#4',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008394                          1359  
00008394  601C                    1360           BRA.S   EVECT6
00008396  21FC 41562335 0030      1361           MOVE.L  #'AV#5',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000839E                          1362  
0000839E  6012                    1363           BRA.S   EVECT6
000083A0  21FC 41562336 0030      1364           MOVE.L  #'AV#6',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083A8                          1365  
000083A8  6008                    1366           BRA.S   EVECT6
000083AA  21FC 41562337 0030      1367           MOVE.L  #'AV#7',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083B2                          1368  
000083B2  604E                    1369  EVECT6   BRA.S   EVECT7
000083B4  21FC 55542030 0030      1370           MOVE.L  #'UT 0',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083BC                          1371  
000083BC  6044                    1372           BRA.S   EVECT7
000083BE  21FC 55542031 0030      1373           MOVE.L  #'UT 1',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083C6                          1374  
000083C6  603A                    1375           BRA.S   EVECT7
000083C8  21FC 55542032 0030      1376           MOVE.L  #'UT 2',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083D0                          1377  
000083D0  6030                    1378           BRA.S   EVECT7
000083D2  21FC 55542033 0030      1379           MOVE.L  #'UT 3',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083DA                          1380  
000083DA  6026                    1381           BRA.S   EVECT7
000083DC  21FC 55542034 0030      1382           MOVE.L  #'UT 4',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083E4                          1383  
000083E4  601C                    1384           BRA.S   EVECT7
000083E6  21FC 55542035 0030      1385           MOVE.L  #'UT 5',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083EE                          1386  
000083EE  6012                    1387           BRA.S   EVECT7
000083F0  21FC 55542036 0030      1388           MOVE.L  #'UT 6',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
000083F8                          1389  
000083F8  6008                    1390           BRA.S   EVECT7
000083FA  21FC 55542037 0030      1391           MOVE.L  #'UT 7',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008402                          1392  
00008402  604E                    1393  EVECT7   BRA.S   EVECT
00008404  21FC 55542038 0030      1394           MOVE.L  #'UT 8',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000840C                          1395  
0000840C  6044                    1396           BRA.S   EVECT
0000840E  21FC 55542039 0030      1397           MOVE.L  #'UT 9',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008416                          1398  
00008416  603A                    1399           BRA.S   EVECT
00008418  21FC 55542041 0030      1400           MOVE.L  #'UT A',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008420                          1401  
00008420  6030                    1402           BRA.S   EVECT
00008422  21FC 55542042 0030      1403           MOVE.L  #'UT B',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000842A                          1404  
0000842A  6026                    1405           BRA.S   EVECT
0000842C  21FC 55542043 0030      1406           MOVE.L  #'UT C',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008434                          1407  
00008434  601C                    1408           BRA.S   EVECT
00008436  21FC 55542044 0030      1409           MOVE.L  #'UT D',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
0000843E                          1410  
0000843E  6012                    1411           BRA.S   EVECT
00008440  21FC 55542045 0030      1412           MOVE.L  #'UT E',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008448                          1413  
00008448  6108                    1414           BSR.S   EVECT
0000844A  21FC 55542046 0030      1415           MOVE.L  #'UT F',$30    MOVE TO $30, USE SHORT BRANCHES AND PRINT IT
00008452                          1416  
00008452                          1417  
00008452                          1418  *
00008452                          1419  *    SAVE REGISTERS AND PRINT VECTOR MSG
00008452                          1420  *
00008452  6000 114C               1421  EVECT    BRA     EVECTL
00008456                          1422  
00008456                          1423  
00008456                          1424  
00008456                          1425  
00008456                          1426  *-------------------------------------------------------------------------
00008456                          1427  * File BF        Block Fill command                               06/16/82
00008456                          1428  
00008456                          1429  *  BLOCK FILL    ADDRESS1 ADDRESS2 WORD-DATA
00008456                          1430  
00008456  41FA FC5E               1431  BFCMD    LEA     SYNTAX(PC),A0
0000845A  6100 124A               1432           BSR     FNEXTF
0000845E  6100 064C               1433           BSR     GETA
00008462  6100 1260               1434           BSR     CKWADR         CHECK WORD BOUNDRY ADDRESS
00008466  2C00                    1435           MOVE.L  D0,D6          D6 = FROM BEGIN ADDRESS
00008468                          1436  
00008468  6100 123C               1437           BSR     FNEXTF
0000846C  6100 063E               1438           BSR     GETA
00008470  6100 1252               1439           BSR     CKWADR         CHECK WORD BOUNDRY ADDRESS
00008474  2240                    1440           MOVE.L  D0,A1          A1 = FROM END ADDRESS
00008476                          1441  
00008476  6100 122E               1442           BSR     FNEXTF         FIND NEXT FIELD
0000847A  6100 12AC               1443           BSR     GETNUMA        D0 = VALUE
0000847E  2E00                    1444           MOVE.L  D0,D7
00008480                          1445  
00008480  2046                    1446           MOVE.L  D6,A0          A0 = FROM BEGIN ADDRESS
00008482  6100 FC40               1447           BSR     P2PHY          DISPLAY ADDRESSES
00008486  B3C8                    1448           CMP.L   A0,A1
00008488  6500 FC2C               1449           BCS     SYNTAX         END ADDR TOO SMALL
0000848C                          1450  
0000848C  0C87 00010000           1451           CMPI.L  #$10000,D7
00008492  6400 FC22               1452           BCC     SYNTAX         WORD OVERFLOW
00008496                          1453  
00008496                          1454  BFCMD11
00008496  3087                    1455           MOVE.W  D7,(A0)        STORE DATA
00008498  3218                    1456           MOVE.W  (A0)+,D1
0000849A  B247                    1457           CMP.W   D7,D1          VERIFY DATA
0000849C  6600 0DB6               1458           BNE     MM90           'DATA DID NOT STORE'
000084A0                          1459  
000084A0  B3C8                    1460           CMP.L   A0,A1
000084A2  64F2                    1461           BCC     BFCMD11
000084A4  6000 FD1E               1462           BRA     MACSBUG
000084A8                          1463  
000084A8                          1464  
000084A8                          1465  
000084A8                          1466  
000084A8                          1467  *-------------------------------------------------------------------------
000084A8                          1468  * File BM        BM (Block Move) Command                          11/27/81
000084A8                          1469  
000084A8                          1470  *  BLOCK MOVE
000084A8                          1471  
000084A8  41FA FC0C               1472  BMCMD    LEA     SYNTAX(PC),A0
000084AC  6100 11F8               1473           BSR     FNEXTF
000084B0  6100 05FA               1474           BSR     GETA
000084B4  2640                    1475           MOVE.L  D0,A3          A3 = FROM BEGIN ADDRESS
000084B6                          1476  
000084B6  6100 11EE               1477           BSR     FNEXTF
000084BA  6100 05F0               1478           BSR     GETA
000084BE  2240                    1479           MOVE.L  D0,A1          A1 = FROM END ADDRESS
000084C0                          1480  
000084C0  6100 11E4               1481           BSR     FNEXTF
000084C4  6100 05E6               1482           BSR     GETA
000084C8  2440                    1483           MOVE.L  D0,A2          A2 = TO BEGIN ADDRESS
000084CA                          1484  
000084CA  204B                    1485           MOVE.L  A3,A0
000084CC  6100 FBF6               1486           BSR     P2PHY          PRINT ADDRESSES (A0) & (A1)
000084D0  200A                    1487           MOVE.L  A2,D0
000084D2  6100 FBE8               1488           BSR     PPHY           PRINT TO ADDRESS
000084D6                          1489  
000084D6  2209                    1490           MOVE.L  A1,D1
000084D8  928B                    1491           SUB.L   A3,D1          D1 =  SIZE - 1
000084DA  6500 FBDA               1492           BCS     SYNTAX         END LESS THAN BEGIN
000084DE  5281                    1493           ADDQ.L  #1,D1          D1 = COUNT (SIZE)
000084E0                          1494  
000084E0  B5CB                    1495           CMP.L   A3,A2
000084E2  6408                    1496           BCC.S   BM122          MOVING LOW TO HIGH
000084E4                          1497  
000084E4  14DB                    1498  BM112    MOVE.B  (A3)+,(A2)+    MOVING HIGH TO LOW
000084E6  5381                    1499           SUBQ.L  #1,D1          COUNT
000084E8  66FA                    1500           BNE     BM112
000084EA  600A                    1501           BRA.S   BM142
000084EC                          1502  
000084EC  D7C1                    1503  BM122    ADD.L   D1,A3          MOVING LOW TO HIGH
000084EE  D5C1                    1504           ADD.L   D1,A2
000084F0  1523                    1505  BM132    MOVE.B  -(A3),-(A2)
000084F2  5381                    1506           SUBQ.L  #1,D1
000084F4  66FA                    1507           BNE     BM132
000084F6  6000 FCCC               1508  BM142    BRA     MACSBUG
000084FA                          1509  
000084FA                          1510  
000084FA                          1511  
000084FA                          1512  *
000084FA                          1513  * ** TR **   TRACE COMMAND
000084FA                          1514  *
000084FA                          1515  
000084FA  41FA 0012               1516  TRCMD    LEA     TCMDHOT(PC),A0 IF NO PARAMTERS
000084FE  6100 11A6               1517           BSR     FNEXTF         FIND NEXT FIELD
00008502  6100 1224               1518           BSR     GETNUMA        FIND NUMBER OF INST TO TRACE
00008506  6100 11C2               1519           BSR     CKADDR         INSURE 24 BITS OR LESS
0000850A  4A80                    1520           TST.L   D0
0000850C  6602                    1521           BNE.S   TCMD15
0000850E                          1522  
0000850E                          1523  TCMDHOT  DS      0              SPECIAL ENTRY FROM DECODE
0000850E  7001                    1524           MOVEQ   #1,D0          ZERO; MAKE TRACE ONE
00008510  21C0 04DA               1525  TCMD15   MOVE.L  D0,TRACECNT
00008514  6022                    1526           BRA.S   TRACE2
00008516                          1527  
00008516                          1528  
00008516                          1529  *
00008516                          1530  * ** TT ** "TRACE TILL" COMMAND
00008516                          1531  *
00008516                          1532  
00008516  41FA FB9E               1533  TTCMD    LEA     SYNTAX(PC),A0
0000851A  6100 118A               1534           BSR     FNEXTF         FIND NEXT FIELD
0000851E  6100 058C               1535           BSR     GETA           GET ADDRESS
00008522  6100 11A0               1536           BSR     CKWADR         CHECK WORD BOUNDRY ADDRESS
00008526                          1537  
00008526  2C00                    1538           MOVE.L  D0,D6
00008528  6100 FB92               1539           BSR     PPHY           DISPLAY TILL ADDRESS
0000852C                          1540  
0000852C  21C6 0490               1541           MOVE.L  D6,BPTILL      9TH BP
00008530  21FC 0000FFFF 04DA      1542           MOVE.L  #$FFFF,TRACECNT  SET FOR A VERY LONG TIME
00008538                          1543  
00008538                          1544  
00008538  31FC FFFF 04DE          1545  TRACE2   MOVE.W  #-1,TRACEON    FOR DECODE OF NEXT COMMAND
0000853E                          1546  
0000853E  2038 0400               1547           MOVE.L  REGPC,D0
00008542  6100 FB78               1548           BSR     PPHY           DISPLAY START (PC) ADDRESS
00008546  6000 0778               1549           BRA     UNTRACE
0000854A                          1550  
0000854A                          1551  
0000854A                          1552  *
0000854A                          1553  *   ***GT***  RUN PROGRAM TO TEMP BREAKPOINT
0000854A                          1554  *
0000854A                          1555  
0000854A  41FA FB6A               1556  GTCMD    LEA     SYNTAX(PC),A0  GET NUMBER ELSE PRINT "WHAT"
0000854E  6100 1156               1557           BSR     FNEXTF         FIND NEXT FIELD
00008552  6100 0558               1558           BSR     GETA           GET ADDRESS
00008556  6100 116C               1559           BSR     CKWADR         CHECK WORD BOUNDRY ADDRESS
0000855A  2C00                    1560           MOVE.L  D0,D6          D6 = UNTIL ADDRESS
0000855C  6100 FB5E               1561           BSR     PPHY           PRINT PHYSICAL ADDRESS
00008560                          1562  
00008560                          1563  * IF TILL ADDRESS IN BREAKPOINT TABLE; DISPLAY WHAT
00008560                          1564  
00008560  41F8 0470               1565           LEA     BPADD,A0       A0 = POINTER TO BP ADDRESSES
00008564  7E08                    1566           MOVEQ   #8,D7          D7 = # OF ADDRESS ALLOWED
00008566  BC98                    1567  GT21     CMP.L   (A0)+,D6
00008568  6700 00A0               1568           BEQ     BCMD55         ALREADY IN TABLE -SHOW TABLE-
0000856C  5387                    1569           SUBQ.L  #1,D7
0000856E  66F6                    1570           BNE     GT21
00008570                          1571  
00008570  21C6 0490               1572           MOVE.L  D6,BPTILL      9TH BREAKPOINT
00008574  6116                    1573           BSR.S   GOCMD1A        NORMAL STARTUP
00008576  6020                    1574           BRA.S   GOCMD1
00008578                          1575  
00008578  41FA 0012               1576  GOSET1   LEA     GOCMD1A(PC),A0 WHERE TO GO IF NO PARAMERS
0000857C  6100 1128               1577           BSR     FNEXTF         FIND NEXT FIELD
00008580  6100 052A               1578           BSR     GETA           GET ADDRESS
00008584  6100 113E               1579           BSR     CKWADR         CHECK WORD BOUNDRY ADDRESS
00008588  21C0 0400               1580           MOVE.L  D0,REGPC
0000858C                          1581  
0000858C  2038 0400               1582  GOCMD1A  MOVE.L  REGPC,D0       (ALSO SUBROUTINE ENTRY)
00008590  6100 FB2A               1583           BSR     PPHY           PRINT ".PC" PHYSICAL ADDRESS
00008594  4E75                    1584           RTS
00008596                          1585  
00008596  61E0                    1586  GOCMD    BSR     GOSET1         "GO" (AFTER TRACING ONE INST)
00008598  21FC FFFFFFFF 04DA      1587  GOCMD1   MOVE.L  #-1,TRACECNT   "FLAG" COUNTER AS SPECIAL
000085A0                          1588  
000085A0  6000 071E               1589           BRA     UNTRACE
000085A4                          1590  
000085A4  61D2                    1591  GDCMD    BSR     GOSET1         "GO DIRECT" Command
000085A6  6000 0726               1592           BRA     UNSTACK
000085AA                          1593  
000085AA                          1594  
000085AA                          1595  *   ***BR***  SET AND PRINT BREAKPOINTS
000085AA                          1596  
000085AA                          1597  *                   DELETE ALL BREAKPOINTS
000085AA                          1598  
000085AA  6108                    1599  NOBRCMD  BSR.S   FIXBP          GET POINTERS
000085AC  4298                    1600  BCMD01   CLR.L   (A0)+          CLEAR THE ADDRESS TABLE
000085AE  5387                    1601           SUBQ.L  #1,D7          DO IT 8 TIMES
000085B0  66FA                    1602           BNE     BCMD01
000085B2  6060                    1603           BRA.S   BCMD7          DISPLAY EMPTY TABLE
000085B4                          1604  
000085B4  41F8 0470               1605  FIXBP    LEA     BPADD,A0       SET UP ADDRESS & COUNTER
000085B8  7E08                    1606           MOVEQ   #8,D7          COUNTER
000085BA  45F8 0494               1607           LEA     BPCNT,A2       COUNTS
000085BE  4E75                    1608           RTS
000085C0                          1609  
000085C0                          1610  ************************************************************
000085C0                          1611  * THIS COMMAND SUPPORTS THE "NO" OPTION. COMMANDS THAT ALLOW
000085C0                          1612  * THE "NO" OPTION PROVIDE A HARD BRANCH 4 BYTES BEFORE THE
000085C0                          1613  * REGULAR COMMAND.
000085C0                          1614  ************************************************************
000085C0                          1615  
000085C0  6000 009A               1616           BRA.L   NOBR0          ENTRY FOR "NOBR" (IT LOOKS FOR PARMS OR NOT)
000085C4  41FA 004E               1617  BRCMD    LEA     BCMD7(PC),A0   WHERE TO GO IF NO PARMS
000085C8  6100 10DC               1618  BCMD0    BSR     FNEXTF         FIND NEXT FIELD
000085CC  6100 04DE               1619           BSR     GETA           GET ADDRESS
000085D0  6100 10F2               1620           BSR     CKWADR         CHECK WORD BOUNDRY ADDRESS
000085D4                          1621  
000085D4  61DE                    1622           BSR     FIXBP          SET UP COUNTER & ADDRESS
000085D6  B090                    1623  BCMD00   CMP.L   (A0),D0        SEE IF ALREADY IN TABLE
000085D8  6710                    1624           BEQ.S   BCMD33         GO CHECK FOR COUNT
000085DA  588A                    1625           ADDQ.L  #4,A2          BUMP OTHER POINTER
000085DC  5888                    1626           ADDQ.L  #4,A0          BUMP MAIN POINTER
000085DE  5387                    1627           SUBQ.L  #1,D7
000085E0  66F4                    1628           BNE     BCMD00
000085E2                          1629  
000085E2  61D0                    1630           BSR     FIXBP          GET ADDRESS & POINTERS
000085E4  4A90                    1631  BCMD3    TST.L   (A0)           FIND AN EMPTY STOP
000085E6  661A                    1632           BNE.S   BCMD5
000085E8  2080                    1633           MOVE.L  D0,(A0)        PUT NEW ADDRESS IN TABLE
000085EA  4292                    1634  BCMD33   CLR.L   (A2)           CLEAR CURRENT COUNT
000085EC  1215                    1635           MOVE.B  (A5),D1        CHECK INPUT FOR COUNT
000085EE  0C01 003B               1636           CMPI.B  #';',D1
000085F2  6608                    1637           BNE.S   BCMD6          NO COUNT
000085F4  528D                    1638           ADDQ.L  #1,A5          BUMP THE BUFFER SCANNER
000085F6  6100 1130               1639           BSR     GETNUMA        GO GET THE COUNT
000085FA  2480                    1640           MOVE.L  D0,(A2)        MOVE TO TABLE
000085FC                          1641  
000085FC  41FA 0016               1642  BCMD6    LEA     BCMD7(PC),A0   WHERE TO GO IF NO MORE PARAMETERS
00008600  60C6                    1643           BRA     BCMD0
00008602                          1644  
00008602  5888                    1645  BCMD5    ADDQ.L  #4,A0          BUMP TABLE POINTER
00008604  588A                    1646           ADDQ.L  #4,A2          BUMP POINTER TO COUNTS
00008606  5387                    1647           SUBQ.L  #1,D7          LOOP AROUND
00008608  66DA                    1648           BNE     BCMD3
0000860A                          1649  
0000860A  4BFA FA85               1650  BCMD55   LEA     MSG008E(PC),A5 TABLE FULL; ERROR MESSAGE
0000860E  6100 FAE2               1651           BSR     FIXDATA
00008612  6008                    1652           BRA.S   BCMD77
00008614                          1653  
00008614  4BFA 003A               1654  BCMD7    LEA     MSGBR(PC),A5   "BREAKPOINTS"
00008618  6100 FAEC               1655           BSR     FIXDCRLF
0000861C  6100 1204               1656  BCMD77   BSR     OUT1CR
00008620                          1657  
00008620  6192                    1658           BSR     FIXBP          SET ADDRESS & COUNTER
00008622  2C1A                    1659  BCMD8    MOVE.L  (A2)+,D6       D6 = COUNT
00008624  2010                    1660           MOVE.L  (A0),D0        D0 = ADDRESS
00008626  671E                    1661           BEQ.S   BCMD9          ZERO ADDRESS
00008628  6100 0FDC               1662           BSR     FRELADDR       FORMAT RELATIVE ADDRESS
0000862C  1CFC 0020               1663           MOVE.B  #BLANK,(A6)+
00008630                          1664  
00008630  2010                    1665           MOVE.L  (A0),D0        FORMAT ABSOLUTE ADDRESS
00008632  6100 0FA8               1666           BSR     PNT6HX
00008636  2006                    1667           MOVE.L  D6,D0
00008638  6708                    1668           BEQ.S   BCMD81         DON'T PRINT ZERO COUNT
0000863A  1CFC 003B               1669           MOVE.B  #';',(A6)+
0000863E  6100 1020               1670           BSR     PNTZHX         PRINT WITH ZERO SURPRESS
00008642                          1671  
00008642  6100 11DE               1672  BCMD81   BSR     OUT1CR
00008646  5888                    1673  BCMD9    ADDQ.L  #4,A0
00008648  5387                    1674           SUBQ.L  #1,D7          LOOP AROUND
0000864A  66D6                    1675           BNE     BCMD8
0000864C  6000 FB76               1676           BRA     MACSBUG
00008650                          1677  
00008650= 42 52 45 41 4B 50 4F    1678  MSGBR    DC.B    'BREAKPOINTS',EOT
          49 4E 54 53 04        
0000865C                          1680  
0000865C                          1681  
0000865C                          1682  
0000865C                          1683  * NOBR COMMAND
0000865C                          1684  
0000865C  41FA FF4C               1685  NOBR0    LEA     NOBRCMD(PC),A0 WHERE TO GO IF NO PARAMETERS
00008660  6100 1044               1686  NOBR1    BSR     FNEXTF         FIND NEXT FIELD
00008664  6100 0446               1687           BSR     GETA           GO DECODE NUMBER/ADDRESS
00008668  4A80                    1688           TST.L   D0
0000866A  679E                    1689           BEQ     BCMD55         ZERO NOT VALID BREAKPOINT
0000866C  6100 1056               1690           BSR     CKWADR         CHECK WORD BOUNDRY ADDRESS
00008670                          1691  
00008670  41F8 0470               1692           LEA     BPADD,A0       SET UP TABLE POINTER
00008674  7E08                    1693           MOVEQ   #8,D7          COUNTER
00008676  2210                    1694  NOBR3    MOVE.L  (A0),D1        GET BREAKPOINT IN TABLE
00008678  B081                    1695           CMP.L   D1,D0          SEE IF SAME
0000867A  6706                    1696           BEQ.S   NOBR4
0000867C  5888                    1697           ADDQ.L  #4,A0
0000867E  5387                    1698           SUBQ.L  #1,D7
00008680  66F4                    1699           BNE     NOBR3
00008682  4290                    1700  NOBR4    CLR.L   (A0)           CLEAR THIS BREAKPOINT
00008684  41FA FF8E               1701           LEA     BCMD7(PC),A0   WHERE TO GO IF NO PARAMETER
00008688  60D6                    1702           BRA     NOBR1
0000868A                          1703  
0000868A                          1704  
0000868A                          1705  
0000868A                          1706  
0000868A                          1707  *-------------------------------------------------------------------------
0000868A                          1708  * File BS        BS (Block Search) Command                        11/27/81
0000868A                          1709  
0000868A                          1710  *
0000868A                          1711  *  BLOCK SEARCH   BS <ADDR1> <ADDR2> 'LITERAL STRING'
0000868A                          1712  *                 BS <ADDR1> <ADDR2> <DATA> [<MASK>] [;<OPTION>]
0000868A                          1713  
0000868A  41FA FA2A               1714  BSCMD    LEA     SYNTAX(PC),A0
0000868E  6100 1016               1715           BSR     FNEXTF
00008692  6100 0418               1716           BSR     GETA
00008696  2640                    1717           MOVE.L  D0,A3          A3 = FROM BEGIN ADDRESS
00008698                          1718  
00008698  6100 100C               1719           BSR     FNEXTF
0000869C  6100 040E               1720           BSR     GETA
000086A0  2240                    1721           MOVE.L  D0,A1          A1 = FROM END ADDRESS
000086A2                          1722  
000086A2  6100 1002               1723           BSR     FNEXTF
000086A6  1015                    1724           MOVE.B  (A5),D0
000086A8  0C00 0027               1725           CMPI.B  #$27,D0
000086AC  6700 00B0               1726           BEQ     BS311          LITERAL STRING SEARCH
000086B0                          1727  
000086B0  6100 1076               1728           BSR     GETNUMA
000086B4  2E00                    1729           MOVE.L  D0,D7          D7 = DATA WE ARE LOOKING FOR
000086B6  4285                    1730           CLR.L   D5             SCAN FOR OPTIONS
000086B8  204D                    1731           MOVE.L  A5,A0
000086BA  B1CE                    1732  BS91     CMP.L   A6,A0
000086BC  6426                    1733           BCC.S   BS97           AT END OF BUFFER
000086BE                          1734  
000086BE  1018                    1735           MOVE.B  (A0)+,D0
000086C0  0C00 003B               1736           CMPI.B  #';',D0
000086C4  66F4                    1737           BNE     BS91           NOT SEMICOLON
000086C6                          1738  
000086C6  2C48                    1739           MOVE.L  A0,A6
000086C8  538E                    1740           SUBQ.L  #1,A6          ADJUST END OF BUFFER POINTER
000086CA                          1741  
000086CA  1010                    1742           MOVE.B  (A0),D0        D0 = OPTION CHARACTER
000086CC  0C00 0042               1743           CMPI.B  #'B',D0
000086D0  6712                    1744           BEQ.S   BS97           BYTE  D5 = 0
000086D2                          1745  
000086D2  7A01                    1746           MOVEQ   #1,D5
000086D4  0C00 0057               1747           CMPI.B  #'W',D0
000086D8  670A                    1748           BEQ.S   BS97                WORD  D5 = +
000086DA                          1749  
000086DA  7AFF                    1750           MOVEQ   #-1,D5         LONG WORD  D5 = -
000086DC  0C00 004C               1751           CMPI.B  #'L',D0
000086E0  6600 F9D4               1752           BNE     SYNTAX
000086E4                          1753  BS97     DS      0
000086E4                          1754  
000086E4  78FF                    1755           MOVEQ   #-1,D4         D4 = DEFAULT SEARCH MASK
000086E6  41FA 000C               1756           LEA     BS101(PC),A0
000086EA  6100 0FBA               1757           BSR     FNEXTF         FIND NEXT FIELD
000086EE  6100 1038               1758           BSR     GETNUMA
000086F2  2800                    1759           MOVE.L  D0,D4          D4 = MASK
000086F4                          1760  BS101    DS      0
000086F4                          1761  
000086F4  204B                    1762           MOVE.L  A3,A0
000086F6  6100 F9CC               1763           BSR     P2PHY          PRINT ADDRESSES (A0) & (A1)
000086FA                          1764  
000086FA  B3CB                    1765           CMP.L   A3,A1
000086FC  6500 F9B8               1766           BCS     SYNTAX         END LESS THAN BEGIN
00008700                          1767  
00008700  B7C9                    1768  BS200    CMP.L   A1,A3
00008702  6400 FAC0               1769           BCC     MACSBUG        DONE
00008706                          1770  
00008706  6100 11A2               1771           BSR     FIXBUF
0000870A  200B                    1772           MOVE.L  A3,D0
0000870C  6100 0ECE               1773           BSR     PNT6HX         FORMAT ADDRESS
00008710  1CFC 0020               1774           MOVE.B  #BLANK,(A6)+   SPACE INTO BUFFER
00008714                          1775  
00008714  4A85                    1776           TST.L   D5
00008716  6734                    1777           BEQ.S   BS225          BYTE SIZE
00008718                          1778  
00008718  200B                    1779           MOVE.L  A3,D0
0000871A  6100 0FA8               1780           BSR     CKWADR         INSURE WORD BOUNDRY
0000871E  4A85                    1781           TST.L   D5
00008720  6A18                    1782           BPL.S   BS219          WORD SIZE (2 BYTES)
00008722                          1783  
00008722  7C02                    1784           MOVEQ   #2,D6          D6 =  SIZE (LONG WORD)
00008724  2013                    1785           MOVE.L  (A3),D0        FETCH
00008726  C084                    1786           AND.L   D4,D0          MASK
00008728  B087                    1787           CMP.L   D7,D0          COMPARE
0000872A  660A                    1788           BNE.S   BS215
0000872C                          1789  
0000872C  2013                    1790           MOVE.L  (A3),D0        DISPLAY NON-MASKED DATA
0000872E  6100 0EA4               1791           BSR     PNT8HX
00008732                          1792  
00008732  6100 10EE               1793  BS213    BSR     OUT1CR
00008736                          1794  
00008736  D7C6                    1795  BS215    ADD.L   D6,A3          BUMP FETCH ADDRESS  (D6 = SIZE)
00008738  60C6                    1796           BRA     BS200
0000873A                          1797  
0000873A  7C02                    1798  BS219    MOVEQ   #2,D6          SIZE = WORD
0000873C  3013                    1799           MOVE.W  (A3),D0
0000873E  C044                    1800           AND.W   D4,D0
00008740  B047                    1801           CMP.W   D7,D0
00008742  66F2                    1802           BNE     BS215
00008744                          1803  
00008744  3013                    1804           MOVE.W  (A3),D0
00008746  6100 0E9A               1805           BSR     PNT4HX         DISPLAY
0000874A  60E6                    1806           BRA     BS213
0000874C                          1807  
0000874C  7C01                    1808  BS225    MOVEQ   #1,D6          SIZE = BYTE
0000874E  1013                    1809           MOVE.B  (A3),D0
00008750  C004                    1810           AND.B   D4,D0
00008752  B007                    1811           CMP.B   D7,D0
00008754  66E0                    1812           BNE     BS215
00008756                          1813  
00008756  1013                    1814           MOVE.B  (A3),D0
00008758  6100 0E90               1815           BSR     PNT2HX         DISPLAY
0000875C  60D4                    1816           BRA     BS213
0000875E                          1817  
0000875E                          1818  * LITERAL STRING SEARCH
0000875E                          1819  *   SAVE STRING
0000875E                          1820  
0000875E  45F8 05C0               1821  BS311    LEA     DUMPTEMP,A2
00008762  528D                    1822  BS313    ADDQ.L  #1,A5
00008764  BBCE                    1823           CMP.L   A6,A5
00008766  6400 F94E               1824           BCC     SYNTAX         ADDR1 GREATER THAN ADDR2
0000876A  14D5                    1825           MOVE.B  (A5),(A2)+
0000876C  1015                    1826           MOVE.B  (A5),D0
0000876E  0C00 0027               1827           CMPI.B  #$27,D0
00008772  66EE                    1828           BNE     BS313
00008774  538A                    1829           SUBQ.L  #1,A2          A2 = END OF STRING + 1
00008776                          1830  
00008776  204B                    1831           MOVE.L  A3,A0
00008778  6100 F94A               1832           BSR     P2PHY          DISPLAY ADDRESSES
0000877C                          1833  
0000877C  B3CB                    1834           CMP.L   A3,A1
0000877E  6500 F936               1835           BCS     SYNTAX
00008782                          1836  
00008782                          1837  * LOOK FOR STRING MATCH
00008782                          1838  
00008782  49F8 05C0               1839  BS323    LEA     DUMPTEMP,A4    A4 = BEGIN OF STRING
00008786  204B                    1840           MOVE.L  A3,A0          A0 = BEGIN OF MEMORY
00008788  1010                    1841  BS325    MOVE.B  (A0),D0
0000878A  B01C                    1842           CMP.B   (A4)+,D0       DATA COMPARE
0000878C  662C                    1843           BNE.S   BS365          MIS-MATCH
0000878E                          1844  
0000878E  B3C8                    1845           CMP.L   A0,A1          ADDRESS CHECK
00008790  6500 FA32               1846           BCS     MACSBUG        OUT OF MEMORY
00008794                          1847  
00008794  5288                    1848           ADDQ.L  #1,A0
00008796  B9CA                    1849           CMP.L   A2,A4
00008798  65EE                    1850           BCS     BS325          MORE STRING TO CHECK
0000879A                          1851  
0000879A  6100 110E               1852           BSR     FIXBUF         HAVE MATCH
0000879E  200B                    1853           MOVE.L  A3,D0          FORMAT ADDRESS
000087A0  6100 0E3A               1854           BSR     PNT6HX
000087A4  1CFC 0020               1855           MOVE.B  #BLANK,(A6)+   SPACE
000087A8                          1856  
000087A8  1CFC 0027               1857           MOVE.B  #$27,(A6)+     LEADING QUOTE
000087AC  49F8 05C0               1858           LEA     DUMPTEMP,A4    MOVE STRING TO BUFFER
000087B0  1CDC                    1859  BS355    MOVE.B  (A4)+,(A6)+
000087B2  B5CC                    1860           CMP.L   A4,A2
000087B4  64FA                    1861           BCC     BS355
000087B6                          1862  
000087B6  6100 106A               1863           BSR     OUT1CR         DISPLAY
000087BA                          1864  
000087BA  528B                    1865  BS365    ADDQ.L  #1,A3
000087BC  B3CB                    1866           CMP.L   A3,A1
000087BE  6500 FA04               1867           BCS     MACSBUG        DONE
000087C2  60BE                    1868           BRA     BS323
000087C4                          1869  
000087C4                          1870  
000087C4                          1871  
000087C4                          1872  
000087C4                          1873  *-------------------------------------------------------------------------
000087C4                          1874  * File BT        BT (Block Test) command                          11/30/81
000087C4                          1875  
000087C4                          1876  * BT   BLOCK OF MEMORY TEST
000087C4                          1877  
000087C4  6100 0B5C               1878  BTCMD    BSR     MTSETUP        PREPARE PARMS (FROM,TO/COUNT)
000087C8  6100 0D3E               1879           BSR     RAMTEST        EXEC MEMORY TEST SUBROUTINE
000087CC  6700 F9F6               1880           BEQ     MACSBUG        NO ERRORS, RETURN TO MACSBUG
000087D0  2F01                    1881           MOVE.L  D1,-(A7)       SAVE DATA READ
000087D2  2F00                    1882           MOVE.L  D0,-(A7)       SAVE DATA WRITTEN CAUSING ERROR
000087D4                          1883  
000087D4  6100 10D4               1884           BSR     FIXBUF         SET UP TO PRINT
000087D8  2CFC 4641494C           1885           MOVE.L  #'FAIL',(A6)+
000087DE  2CFC 45442041           1886           MOVE.L  #'ED A',(A6)+
000087E4  3CFC 5420               1887           MOVE.W  #'T ',(A6)+
000087E8  200A                    1888           MOVE.L  A2,D0          ADDRESS WHERE IT FAILED
000087EA  6100 0DF0               1889           BSR     PNT6HX
000087EE                          1890  
000087EE  2CFC 20205752           1891           MOVE.L  #'  WR',(A6)+
000087F4  2CFC 4F54453D           1892           MOVE.L  #'OTE=',(A6)+
000087FA  201F                    1893           MOVE.L  (A7)+,D0       WHAT WAS WRITTEN
000087FC  6100 0DE4               1894           BSR     PNT4HX
00008800                          1895  
00008800  2CFC 20202052           1896           MOVE.L  #'   R',(A6)+
00008806  2CFC 4541443D           1897           MOVE.L  #'EAD=',(A6)+
0000880C  201F                    1898           MOVE.L  (A7)+,D0       WHAT WAS READ
0000880E  6100 0DD2               1899           BSR     PNT4HX
00008812                          1900  
00008812  6000 F894               1901           BRA     MSG            PRINT IT
00008816                          1902  
00008816                          1903  
00008816                          1904  
00008816                          1905  
00008816                          1906  *-------------------------------------------------------------------------
00008816                          1907  * File DC        DC (Data Conversion) Command                     12/10/81
00008816                          1908  
00008816                          1909  *
00008816                          1910  *
00008816                          1911  *  ***DC***  NUMBER CONVERSIONS
00008816                          1912  *
00008816                          1913  DCCMD    DS      0              -DATA CONVERT COMMAND-
00008816  41FA F89E               1914  NUMCON0  LEA     SYNTAX(PC),A0  IF NO PARAMETERS
0000881A  6100 0E8A               1915           BSR     FNEXTF         POINT TO NEXT PARAMETER
0000881E  6100 028C               1916           BSR     GETA           EVALUATE EXPRESSION
00008822                          1917  
00008822  6100 1086               1918           BSR     FIXBUF         SET UP FOR PRINT
00008826  2E00                    1919           MOVE.L  D0,D7          D7=VALUE
00008828  4A87                    1920           TST.L   D7             SEE IF NEGATIVE
0000882A  6A0E                    1921           BPL.S   NUMCON1
0000882C  1CFC 0024               1922           MOVE.B  #'$',(A6)+
00008830  2007                    1923           MOVE.L  D7,D0          MOVE NEGATIVE RESULT TO D0
00008832  6100 0DA0               1924           BSR     PNT8HX
00008836  1CFC 003D               1925           MOVE.B  #'=',(A6)+
0000883A  2007                    1926  NUMCON1  MOVE.L  D7,D0          RESTORE
0000883C  6A08                    1927           BPL.S   NUMCON2
0000883E  4480                    1928           NEG.L   D0
00008840  6B04                    1929           BMI.S   NUMCON2        SPECIAL CASE (-0)
00008842  1CFC 002D               1930           MOVE.B  #'-',(A6)+
00008846  1CFC 0024               1931  NUMCON2  MOVE.B  #'$',(A6)+
0000884A  6100 0E14               1932           BSR     PNTZHX
0000884E  1CFC 003D               1933           MOVE.B  #'=',(A6)+     NOW PRINT DECIMAL VALUE
00008852  2007                    1934           MOVE.L  D7,D0
00008854  6A08                    1935           BPL.S   NUMCON3
00008856  4480                    1936           NEG.L   D0
00008858  6B04                    1937           BMI.S   NUMCON3        SPECIAL CASE (-0)
0000885A  1CFC 002D               1938           MOVE.B  #'-',(A6)+
0000885E  1CFC 0026               1939  NUMCON3  MOVE.B  #'&',(A6)+
00008862  6100 066A               1940           BSR     HEX2DEC        PUT VALUE IN BUFFER
00008866  6000 F840               1941           BRA     MSG            GO PRINT IT
0000886A                          1942  
0000886A                          1943  
0000886A                          1944  
0000886A                          1945  
0000886A                          1946  *-------------------------------------------------------------------------
0000886A                          1947  * File DFDI      DF (Display registers) WITH disassembler         05/27/82
0000886A                          1948  
0000886A= 50435352                1949  REGNAMES DC.L    'PCSR'         TABLE OF NAMES OF REGISTERS
0000886E= 55535353                1950           DC.L    'USSS'
00008872= 3F3F                    1951           DC.W    '??'           END OF TABLE
00008874                          1952  
00008874                          1953  DFCMD    DS      0              DF COMMAND  ENTRY
00008874  600A                    1954           BRA.S   TD07
00008876                          1955  
00008876  6100 1032               1956  TDISPLY  BSR     FIXBUF         PRINT TRACE DISPLAY SUBROUTINE
0000887A  4A38 04E9               1957           TST.B   XONOFF+3
0000887E  6652                    1958           BNE.S   TD25           SHORT DISPLAY
00008880                          1959  
00008880  6100 1028               1960  TD07     BSR     FIXBUF         PRINT PRELUDE
00008884  42B8 061C               1961           CLR.L   OUTTO          FORCE DISPLAY TO OPERATORS CONSOLE
00008888  2CF8 0610               1962           MOVE.L  SCREEN1,(A6)+
0000888C  6704                    1963           BEQ.S   TD09           SKIP PRELUDE
0000888E  6100 0FAC               1964           BSR     OUTPUT
00008892                          1965  TD09
00008892                          1966  
00008892  49FA FFD6               1967           LEA     REGNAMES(PC),A4 REGISTER NAMES
00008896  45F8 0400               1968           LEA     REGPC,A2       REGISTER DATA
0000889A  6100 100E               1969           BSR     FIXBUF         SET UP I/O BUFFER
0000889E                          1970  
0000889E  301C                    1971  TD1      MOVE.W  (A4)+,D0       GET REG NAME
000088A0  2E1A                    1972           MOVE.L  (A2)+,D7       GET REG CONTENT
000088A2  0C40 3F3F               1973           CMPI.W  #'??',D0       SEE IF AT END OF REGS
000088A6  6650                    1974           BNE.S   TD4
000088A8  6100 0F78               1975           BSR     OUT1CR         PRINT BUFFER
000088AC                          1976  
000088AC  1E3C 0044               1977           MOVE.B  #'D',D7        CLASS=DATA
000088B0  47F8 0408               1978           LEA     REGS,A3        OFFSET
000088B4  6100 0BF6               1979           BSR     PNTCLS         GO PRINT THE BLOCK
000088B8                          1980  
000088B8  1E3C 0041               1981           MOVE.B  #'A',D7        CLASS=ADDRESS
000088BC  47F8 0428               1982           LEA     REGS+32,A3     OFFSET
000088C0  6100 0BEA               1983           BSR     PNTCLS         GO PRINT THE BLOCK
000088C4                          1984  
000088C4  6100 0FE4               1985           BSR     FIXBUF
000088C8  7214                    1986           MOVEQ   #20,D1         LOOP COUNTER
000088CA  1CFC 002D               1987  TD27     MOVE.B  #'-',(A6)+     FILL BUFFER WITH BOARDER
000088CE  5381                    1988           SUBQ.L  #1,D1
000088D0  66F8                    1989           BNE TD27
000088D2                          1990  
000088D2  2878 0400               1991  TD25     MOVE.L  REGPC,A4       DISASSEMBLE
000088D6  4CD4 0007               1992           MOVEM.L (A4),D0-D2
000088DA  2A4E                    1993           MOVE.L  A6,A5
000088DC  6100 2998               1994           BSR     DCODE68K
000088E0  4BF8 0540               1995           LEA     BUFFER,A5
000088E4                          1996  
000088E4  6100 0F3C               1997           BSR     OUT1CR         PRINT
000088E8                          1998  
000088E8  6100 0FC0               1999           BSR     FIXBUF         PRINT END STUFF FOR SCREEN CONTROL
000088EC  2CF8 0614               2000           MOVE.L  SCREEN2,(A6)+
000088F0  6704                    2001           BEQ.S   TD39           SKIP END STUFF
000088F2  6100 0F48               2002           BSR     OUTPUT
000088F6  4E75                    2003  TD39     RTS     RETURN FOR MORE WORK
000088F8                          2004  
000088F8  3400                    2005  TD4      MOVE.W  D0,D2          PRINT REG NAME IN BUFFER
000088FA  E040                    2006           ASR.W   #8,D0          MOVE IT OVER
000088FC  1600                    2007           MOVE.B  D0,D3          SAVE REGISTER TYPE A,D,W,M ETC
000088FE  1CC0                    2008           MOVE.B  D0,(A6)+       SAVE FIRST LETTER
00008900  1CC2                    2009           MOVE.B  D2,(A6)+       SAVE NEXT LETTER
00008902  1CFC 003D               2010           MOVE.B  #'=',(A6)+     EQUAL SIGN
00008906  0C42 5553               2011           CMPI.W  #'US',D2
0000890A  6606                    2012           BNE.S   T44
0000890C  2038 0448               2013           MOVE.L  REGUS,D0       USER STACK
00008910  6014                    2014           BRA.S   T449
00008912                          2015  
00008912  0C42 5353               2016  T44      CMPI.W  #'SS',D2       SUPER STACK IS SPECIAL
00008916  6606                    2017           BNE.S   T448
00008918  2038 0444               2018           MOVE.L  REGA7,D0       GET A7
0000891C  6008                    2019           BRA.S   T449
0000891E                          2020  
0000891E  2007                    2021  T448     MOVE.L  D7,D0          REGISTER VALUE
00008920  0C42 5352               2022           CMPI.W  #'SR',D2       SEE IF STATUS REGISTER
00008924  670C                    2023           BEQ.S   TDCC
00008926  6100 0CAC               2024  T449     BSR     PNT8HX         FORMAT 8 HEX CHAR
0000892A  1CFC 0020               2025  TD9      MOVE.B  #BLANK,(A6)+   SPACE BETWEEN REGS
0000892E  6000 FF6E               2026           BRA TD1
00008932                          2027  
00008932                          2028  *   CONDITION CODE FORMAT
00008932                          2029  *
00008932  3600                    2030  TDCC     MOVE.W  D0,D3          SAVE FOR A MOMENT
00008934  6100 0CAC               2031           BSR     PNT4HX
00008938  1CFC 003D               2032           MOVE.B  #'=',(A6)+
0000893C  2E3C 80000054           2033           MOVE.L  #$80000054,D7  TRACE BIT
00008942  613E                    2034           BSR.S   TDCC9
00008944  2E3C 20000053           2035           MOVE.L  #$20000053,D7  SUPERVISOR BIT
0000894A  6136                    2036           BSR.S   TDCC9
0000894C  3003                    2037           MOVE.W  D3,D0          INTERRUPT LEVEL
0000894E  E048                    2038           LSR.W   #8,D0
00008950  0200 0007               2039           ANDI.B  #$07,D0        "7" MAX IN SR FOR LEVEL
00008954  6100 0C9C               2040           BSR     PUTHEX
00008958  2E3C 00100058           2041           MOVE.L  #$100058,D7    X BIT
0000895E  6122                    2042           BSR.S   TDCC9
00008960  2E3C 0008004E           2043           MOVE.L  #$8004E,D7     N BIT
00008966  611A                    2044           BSR.S   TDCC9
00008968  2E3C 0004005A           2045           MOVE.L  #$4005A,D7     Z BIT
0000896E  6112                    2046           BSR.S   TDCC9
00008970  2E3C 00020056           2047           MOVE.L  #$20056,D7     V BIT
00008976  610A                    2048           BSR.S   TDCC9
00008978  2E3C 00010043           2049           MOVE.L  #$10043,D7     C BIT
0000897E  6102                    2050           BSR.S   TDCC9
00008980  60A8                    2051           BRA     TD9
00008982                          2052  *
00008982  2C07                    2053  TDCC9    MOVE.L  D7,D6          DUPLICATE STUFF
00008984  4846                    2054           SWAP    D6             GET BIT POSITION
00008986  CC43                    2055           AND.W   D3,D6          SEE IF ON
00008988  6604                    2056           BNE.S   TDCC91
0000898A  1E3C 002E               2057           MOVE.B  #'.',D7        PUT IN PERIOD IF OFF
0000898E  1CC7                    2058  TDCC91   MOVE.B  D7,(A6)+       PUT IN LETTER IF ON
00008990  4E75                    2059           RTS
00008992                          2060  
00008992                          2061  
00008992                          2062  
00008992                          2063  
00008992                          2064  *-------------------------------------------------------------------------
00008992                          2065  * File DUMP      DU     Dump "S-Records"                          05/10/82
00008992                          2066  
00008992                          2067  *   ***DUMP***  DUMP  'S' RECORDS
00008992                          2068  *    FORMAT:  DU  ADDRESS1 ADDRESS2  [TEXT....]
00008992                          2069  *
00008992                          2070  DUCMD    DS      0
00008992  6100 102E               2071           BSR     SCANPORT       SEE WHERE TO SEND OUTPUT (DUMMY CALL)
00008996  2C38 061C               2072           MOVE.L  OUTTO,D6       SAVE OUTTO FOR ACTUAL S-RECORD DUMP
0000899A  42B8 061C               2073           CLR.L   OUTTO          OVERRIDE SCANPORT CALL
0000899E                          2074  
0000899E  41FA F716               2075           LEA     SYNTAX(PC),A0  WHERE TO GO IF NO PARAMTERS
000089A2  6100 0D02               2076           BSR     FNEXTF         FIND NEXT FIELD
000089A6  6100 0104               2077           BSR     GETA           GET ADDRESS1
000089AA  2640                    2078           MOVE.L  D0,A3          A3 = BEGIN ADDRESS
000089AC                          2079  
000089AC  6100 0CF8               2080           BSR     FNEXTF
000089B0  6100 00FA               2081           BSR     GETA           GET ADDRESS2
000089B4  2840                    2082           MOVE.L  D0,A4          A4 = END ADDRESS
000089B6                          2083  
000089B6                          2084  * PROCESS HEADER
000089B6  41FA 0006               2085           LEA     PUNCH5(PC),A0  WHERE TO GO IF NO HEADER
000089BA  6100 0CEA               2086           BSR     FNEXTF         LOOK FOR HEADER
000089BE                          2087  PUNCH5   DS      0
000089BE                          2088  
000089BE                          2089  * MOVE TEXT TO 'TEMP STORAGE'
000089BE  45F8 05C0               2090           LEA     DUMPTEMP,A2
000089C2  2A0A                    2091           MOVE.L  A2,D5          D5 = START OF TEXT
000089C4  BDCD                    2092  PUM11    CMP.L   A5,A6
000089C6  6704                    2093           BEQ.S   PUM13
000089C8  14DD                    2094           MOVE.B  (A5)+,(A2)+    MOVE
000089CA  60F8                    2095           BRA     PUM11
000089CC  CB8A                    2096  PUM13    EXG     A2,D5          D5 = END OF TEXT +1
000089CE                          2097  
000089CE                          2098  * DISPLAY ADDRESSES
000089CE  204B                    2099           MOVE.L  A3,A0
000089D0  224C                    2100           MOVE.L  A4,A1
000089D2  6100 F6F0               2101           BSR     P2PHY          DISPLAY TWO ADDRESSES
000089D6                          2102  
000089D6                          2103  * INSURE END EQUAL GREATER THAN BEG
000089D6  B9CB                    2104           CMP.L   A3,A4
000089D8  6500 F6DC               2105           BCS     SYNTAX
000089DC                          2106  
000089DC  21C6 061C               2107           MOVE.L  D6,OUTTO       RESTORE OPTIONAL DESTINATION OF DUMP
000089E0                          2108  
000089E0                          2109  * FINISH PROCESSING HEADER
000089E0                          2110  *  A2 = START OF TEXT
000089E0  6100 0EC8               2111           BSR     FIXBUF         A5,A6=#BUFFER
000089E4  7C02                    2112           MOVEQ   #2,D6          THE BYTE COUNT
000089E6  4284                    2113           CLR.L   D4             CLEAR THE CHECKSUM
000089E8  2CFC 53303F3F           2114           MOVE.L  #'S0??',(A6)+  START OF S RECORD
000089EE  2CFC 30303030           2115           MOVE.L  #'0000',(A6)+  DUMMY ADDRESS
000089F4  B5C5                    2116  MORES0   CMP.L   D5,A2          SEE IF AT END OF TEXT
000089F6  6C0C                    2117           BGE.S   ENDS0          WHERE TO GO WHEN ALL CHARACTERS USED
000089F8  5286                    2118           ADDQ.L  #1,D6          ANOTHER BYTE
000089FA                          2119  
000089FA  101A                    2120           MOVE.B  (A2)+,D0       GET ANOTHER BYTE OF TEXT
000089FC                          2121  
000089FC  D880                    2122           ADD.L   D0,D4          FOR CHECKSUM
000089FE  6100 0BEA               2123           BSR     PNT2HX         PUT IT IN BUFFER
00008A02  60F0                    2124           BRA     MORES0
00008A04                          2125  ENDS0    DS      0
00008A04                          2126  
00008A04  6100 0084               2127           BSR     PNTSREC        GO PRINT THE 'S' RECORD
00008A08  344B                    2128           MOVE    A3,A2          A2 WILL SCAN BETWEEN A3-A4
00008A0A                          2129  
00008A0A                          2130  * DO ANOTHER 'S' RECORD
00008A0A  6100 0E9E               2131  MORESP   BSR     FIXBUF         A5,A6=#BUFFER
00008A0E  4284                    2132           CLR.L   D4             CLEAR CHECKSUM REGISTER
00008A10  200B                    2133           MOVE.L  A3,D0          READY TO PRINT ADDRESS
00008A12  220B                    2134           MOVE.L  A3,D1          GET READY TO AND ADDRESS
00008A14  7610                    2135           MOVEQ   #$10,D3        MAXIMUM BYTES ON S REC LINE
00008A16  D283                    2136           ADD.L   D3,D1          INSURE END OF LINE ADDRESS IS MAX
00008A18  0281 00FF0000           2137           ANDI.L  #$FF0000,D1    SEE IF 3 BYTE ADDRESS
00008A1E  6618                    2138           BNE.S   S2REC          WHERE TO GO IF 3 BYTES NEEDED
00008A20  2CFC 53313F3F           2139           MOVE.L  #'S1??',(A6)+  PUSH
00008A26  300B                    2140           MOVE    A3,D0          SET UP TO PRINT 2 BYTE ADDRESS
00008A28  6100 0BB8               2141           BSR     PNT4HX         PRINT 4 HEX CHAR ADDRESS
00008A2C  7C02                    2142           MOVEQ   #2,D6          BYTE COUNT
00008A2E  300B                    2143           MOVE.W  A3,D0          FIX UP CHECKSUM
00008A30  D800                    2144           ADD.B   D0,D4          LOW BYTE
00008A32  E040                    2145           ASR     #8,D0          SHIFT IT OVER
00008A34  D800                    2146           ADD.B   D0,D4          HIGH BYTE OF ADDRESS
00008A36  6018                    2147           BRA.S   PNCA3          GO PUNCH A LINE
00008A38                          2148  
00008A38  2CFC 53323F3F           2149  S2REC    MOVE.L  #'S2??',(A6)+  PUSH
00008A3E  6100 0B9C               2150           BSR     PNT6HX         PRINT 6 HEX CHAR ADDRESS
00008A42  7C03                    2151           MOVEQ   #3,D6          BYTE COUNT
00008A44  200B                    2152           MOVE.L  A3,D0          FIX UP CHECKSUM
00008A46  D800                    2153           ADD.B   D0,D4          LOW BYTE
00008A48  E040                    2154           ASR     #8,D0          SHIFT IT OVER
00008A4A  D800                    2155           ADD.B   D0,D4          MIDDLE BYTE
00008A4C  4840                    2156           SWAP    D0             SET UP FOR HIGH BYTE
00008A4E  D800                    2157           ADD.B   D0,D4          ADD HIGH BYTE
00008A50  B7CC                    2158  PNCA3    CMP.L   A4,A3          SEE IF AT ENDING ADDRESS
00008A52                          2159  
00008A52                          2160  * END OF FILE
00008A52  6F1C                    2161           BLE.S   A3OUT          WHERE TO GO IF BELOW OR AT END ADDRESS
00008A54  612E                    2162           BSR.S   PNTSRECX       END IT BY PRINTING LAST RECORD
00008A56  6100 0E52               2163           BSR     FIXBUF         A5,A6=#BUFFER
00008A5A  4284                    2164           CLR.L   D4             CLEAR THE CHECKSUM
00008A5C  2CFC 53393F3F           2165           MOVE.L  #'S9??',(A6)+  MOVE TO PRINT BUFFER
00008A62  2CFC 30303030           2166           MOVE.L  #'0000',(A6)+  MOVE '0000' TO PRIT BUFFER
00008A68  7C02                    2167           MOVEQ   #2,D6          BYTE COUNT
00008A6A  611E                    2168           BSR.S   PNTSREC        PRINT 'S9' END-OF-FILE RECORD
00008A6C  6000 F756               2169           BRA     MACSBUG        REENTER MACSBUG
00008A70                          2170  
00008A70  101B                    2171  A3OUT    MOVE.B  (A3)+,D0       GRAB THE BYTE FROM MEMORY
00008A72  D840                    2172           ADD.W   D0,D4          ADD TO CHECKSUM
00008A74  5246                    2173           ADDQ.W  #1,D6          BUMP THE BYTE COUNT
00008A76  5289                    2174           ADDQ.L  #1,A1          ADD TO COUNT OF BYTES PROCESSED
00008A78  6100 0B70               2175           BSR     PNT2HX         PUT THE HEX IN THE PRINT BUFFER
00008A7C  5383                    2176           SUBQ.L  #1,D3          COUNT DOWN CHAR TO GO IN LINE
00008A7E  66D0                    2177           BNE     PNCA3
00008A80  6108                    2178           BSR.S   PNTSREC        END OF LINE-PUNCH IT
00008A82  6086                    2179           BRA     MORESP         GO FIX UP NEXT LINE
00008A84                          2180  
00008A84                          2181  * FIX UP & PRINT THE 'S' RECORD/LINE
00008A84                          2182  
00008A84  B2FC 0000               2183  PNTSRECX CMP.W   #0,A1          SEE IF ANY CHAR MOVED
00008A88  6720                    2184           BEQ.S   PNTSRTS        NO CHAR MOVED
00008A8A                          2185  
00008A8A  5246                    2186  PNTSREC  ADD     #1,D6          ONE MORE BYTE (CHECKSUM)
00008A8C  D846                    2187           ADD.W   D6,D4          ADD BYTE COUNT TO CHECKSUM
00008A8E  4604                    2188           NOT.B   D4             COMPLIMENT THE CHECKSUM
00008A90  2004                    2189           MOVE.L  D4,D0          READY FOR PRINT-HEX
00008A92  6100 0B56               2190           BSR     PNT2HX         PUT CHECKSUM IN RECORD
00008A96  2E0E                    2191           MOVE.L  A6,D7          SAVE FOR THE MOMENT
00008A98  2C4D                    2192           MOVE.L  A5,A6          START OF BUFFER
00008A9A  548E                    2193           ADDQ.L  #2,A6          BYPASS RECORD TYPE (4 CHAR)
00008A9C  1006                    2194           MOVE.B  D6,D0          SET UP BYTE COUNT FOR PNTHEX ROUTINE
00008A9E  6100 0B4A               2195           BSR     PNT2HX         PUT THE BYTE COUNT IN THE PRINT BUFFER
00008AA2  2C47                    2196           MOVE.L  D7,A6          RESTORE REAL END OF BUFFER
00008AA4  6100 0D7C               2197           BSR     OUT1CR         DO THE ACTUAL DISPLAY/PUNCH
00008AA8  93C9                    2198           SUB.L   A1,A1          CLEAR COUNTER OF BYTES PROCESSED
00008AAA  4E75                    2199  PNTSRTS  RTS
00008AAC                          2200  
00008AAC                          2201  
00008AAC                          2202  
00008AAC                          2203  
00008AAC                          2204  *-------------------------------------------------------------------------
00008AAC                          2205  * File GETA      GET ADDRESS Subroutine                           12/01/81
00008AAC                          2206  
00008AAC                          2207  * GET ADDRESS
00008AAC                          2208  *  ENTER (A5) POINTER START OF BUFFER
00008AAC                          2209  *        (A6) POINTER END OF BUFFER
00008AAC                          2210  *
00008AAC                          2211  *  RETURN:  D0 = ADDRESS
00008AAC                          2212  
00008AAC                          2213  *        (A6) POINTER END OF BUFFER
00008AAC                          2214  *
00008AAC                          2215  *  RETURN:  D0 = ADDRESS
00008AAC                          2216  
00008AAC                          2217  
00008AAC                          2218  * FORMATS HANDLED:
00008AAC                          2219  *  1.  NUMBER        DEFAULTS TO HEX
00008AAC                          2220  *  2.  $NUMBER       HEX
00008AAC                          2221  *  3.  &NUMBER       DECIMAL
00008AAC                          2222  *  4.  (A@)
00008AAC                          2223  *  5.  NUMBER(A@)
00008AAC                          2224  *  6.  (A@,D@)
00008AAC                          2225  *  7.  NUMBER(A@,D@)
00008AAC                          2226  *  8.  [NUMBER]      MEMORY INDIRECT
00008AAC                          2227  *
00008AAC                          2228  *   FORMATS 1,2,3,8  ADD OFFSET R0 UNLESS R1 - R7 SPECIFIED
00008AAC                          2229  
00008AAC                          2230  
00008AAC                          2231  * WORK REGISTERS
00008AAC                          2232  *  D4    VALUE BEING BUILT
00008AAC                          2233  *
00008AAC                          2234  *  D5    FLAG REGISTER
00008AAC                          2235  *     = 8000XXXX  R@ GIVEN (GARO)
00008AAC                          2236  *     = XXXX80XX  [  GIVEN (GALB)
00008AAC                          2237  *     = XXXXXX80  (  GIVEN (GALP)
00008AAC                          2238  *
00008AAC                          2239  *  D6    FLAG REGISTER
00008AAC                          2240  *     = 8000XXXX  A@ GIVEN           (GAAVF)
00008AAC                          2241  *     = XXXX80XX  NEED PLUS OR MINUS (GANPM)
00008AAC                          2242  *     = XXXXXX2B  +  PLUS GIVEN      (GAPMS)
00008AAC                          2243  *             2D  -  MINUS GIVEN
00008AAC                          2244  
00008AAC  48E7 0E80               2245  GETA     MOVEM.L D4-D6/A0,-(A7) SAVE SOME REGISTERS
00008AB0  4284                    2246           CLR.L   D4             VALUE BEING BUILT
00008AB2  4285                    2247           CLR.L   D5             FLAG REG
00008AB4  4286                    2248           CLR.L   D6             FLAG REG
00008AB6                          2249  
00008AB6  101D                    2250           MOVE.B  (A5)+,D0       GET BYTE
00008AB8  BDCD                    2251           CMP.L   A5,A6
00008ABA  6500 010C               2252           BCS     GAP191         END OF BUFFER
00008ABE                          2253  
00008ABE  0C00 005B               2254           CMPI.B  #'[',D0
00008AC2  660C                    2255           BNE.S   GAP113
00008AC4                          2256  
00008AC4                          2257  *  [  SET INDIRECT
00008AC4                          2258  
00008AC4  0045 8000               2259           ORI.W   #$8000,D5      SET LEFT BRACKET (GALB)
00008AC8                          2260  
00008AC8  101D                    2261  GAP111   MOVE.B  (A5)+,D0       GET BYTE
00008ACA  BDCD                    2262           CMP.L   A5,A6
00008ACC  6500 00FA               2263           BCS     GAP191         END OF BUFFER
00008AD0                          2264  GAP113   DS      0
00008AD0                          2265  
00008AD0  0C00 002B               2266           CMPI.B  #'+',D0
00008AD4  675E                    2267           BEQ.S   GAP121         PLUS SIGN
00008AD6                          2268  
00008AD6  0C00 002D               2269           CMPI.B  #'-',D0
00008ADA  6758                    2270           BEQ.S   GAP121         MINUS SIGN
00008ADC                          2271  
00008ADC  0C00 005D               2272           CMPI.B  #']',D0
00008AE0  675E                    2273           BEQ.S   GAP131         RIGHT BRACKET (INDIRECT)
00008AE2                          2274  
00008AE2  0C00 0028               2275           CMPI.B  #'(',D0
00008AE6  676C                    2276           BEQ.S   GAP141         LEFT PARIN
00008AE8                          2277  
00008AE8  0C00 002C               2278           CMPI.B  #',',D0
00008AEC  6700 0092               2279           BEQ     GAP161         COMMA
00008AF0                          2280  
00008AF0  0C00 0029               2281           CMPI.B  #')',D0
00008AF4  6700 00CC               2282           BEQ     GAP181         RIGHT PARIN
00008AF8                          2283  
00008AF8  0C00 003B               2284           CMPI.B  #';',D0        "SEMI-COLON"
00008AFC  6700 00CA               2285           BEQ     GAP191         TERMINATE
00008B00                          2286  
00008B00  0C00 0020               2287           CMPI.B  #BLANK,D0      "SPACE"
00008B04  6700 00C2               2288           BEQ     GAP191         TERMINATE
00008B08                          2289  
00008B08  4A46                    2290           TST.W   D6             (GANPM)
00008B0A  6B70                    2291           BMI.S   GAE            NEEDS PLUS OR MINUS
00008B0C                          2292  
00008B0C  0C00 0052               2293           CMPI.B  #'R',D0
00008B10  6700 0094               2294           BEQ     GAP171         RELATIVE OFFSET
00008B14                          2295  
00008B14  4A06                    2296           TST.B   D6             (GALP)
00008B16  6B64                    2297           BMI.S   GAE            (...   NUMBER NOT ALLOWED
00008B18                          2298  
00008B18                          2299  * NONE OF ABOVE ASSUME NUMERIC VALUE
00008B18  538D                    2300           SUBQ.L  #1,A5          ADJUST (A5) TO FIRST CHAR
00008B1A  4280                    2301           CLR.L   D0
00008B1C  6100 0C0A               2302           BSR     GETNUMA
00008B20                          2303  
00008B20  0C06 002D               2304           CMPI.B  #'-',D6        (GAPMS)
00008B24  6704                    2305           BEQ.S   GAP118         MINUS SIGN
00008B26                          2306  
00008B26  D880                    2307           ADD.L   D0,D4          PLUS SIGN
00008B28  6002                    2308           BRA.S   GAP119
00008B2A                          2309  
00008B2A  9880                    2310  GAP118   SUB.L   D0,D4
00008B2C                          2311  
00008B2C  4206                    2312  GAP119   CLR.B   D6             (GAPMS)  RESET PLUS MINUS FLAG
00008B2E  0046 8000               2313           ORI.W   #$8000,D6      (GANPM)  SET NEED PLUS MINUS
00008B32  6094                    2314  GAP111S  BRA     GAP111
00008B34                          2315  
00008B34                          2316  * (*) (-) SET ARITHMETIC OPERATOR
00008B34                          2317  
00008B34  4A06                    2318  GAP121   TST.B   D6             (GAPMS)
00008B36  6644                    2319           BNE.S   GAE            MULTI OPERATORS
00008B38  1C00                    2320           MOVE.B  D0,D6          (GAPMS)
00008B3A  0246 00FF               2321           ANDI.W  #$00FF,D6      RESET (GANPM) NEED PLUS MINUS
00008B3E  60F2                    2322           BRA     GAP111S
00008B40                          2323  
00008B40                          2324  *  ]  CLOSE INDIRECT
00008B40                          2325  
00008B40  4A45                    2326  GAP131   TST.W   D5             (GALB)
00008B42  6A38                    2327           BPL.S   GAE            [ MISSING
00008B44                          2328  
00008B44                          2329  * IF NO R@ GIVEN ADD R0
00008B44  4A85                    2330           TST.L   D5             (GARO)
00008B46  6B04                    2331           BMI.S   GAP135         R@ GIVEN
00008B48  D8B8 044C               2332           ADD.L   OFFSET,D4      NO R@ GIVEN; ADD R0
00008B4C                          2333  GAP135   DS      0
00008B4C                          2334  
00008B4C  2044                    2335           MOVE.L  D4,A0
00008B4E  2010                    2336           MOVE.L  (A0),D0
00008B50  6000 008A               2337           BRA     GAP199
00008B54                          2338  
00008B54                          2339  *  (  DO PARIN PAIR
00008B54                          2340  
00008B54  4A05                    2341  GAP141   TST.B   D5             (GALP)
00008B56  6B24                    2342           BMI.S   GAE            MULTI (
00008B58  4A85                    2343           TST.L   D5             (GARO)
00008B5A  6B20                    2344           BMI.S   GAE            R@ NOT ALLOWED WITH (..)
00008B5C  0005 0080               2345           ORI.B   #$80,D5        (GALP) SET LEFT PAREN
00008B60                          2346  
00008B60                          2347  * LEFT PARIN SET; MUST BE A@ NEXT
00008B60  101D                    2348           MOVE.B  (A5)+,D0       GET BYTE
00008B62  BDCD                    2349           CMP.L   A5,A6
00008B64  6516                    2350           BCS.S   GAE
00008B66  0C00 0041               2351           CMPI.B  #'A',D0
00008B6A  6610                    2352           BNE.S   GAE            NOT A-REG
00008B6C  41F8 0428               2353           LEA     REGS+32,A0
00008B70  6170                    2354           BSR.S   GASRGN         GET VALUE IN A@
00008B72  D881                    2355           ADD.L   D1,D4
00008B74  0086 80000000           2356           ORI.L   #$80000000,D6  (GAAVF) A-REG VALUE FLAG
00008B7A  60B6                    2357           BRA     GAP111S
00008B7C                          2358  
00008B7C  6000 F538               2359  GAE      BRA     SYNTAX
00008B80                          2360  
00008B80                          2361  *  COMMA  A-REG or
00008B80                          2362  *  COMMA  D-REG REQUIRED
00008B80                          2363  
00008B80  4A86                    2364  GAP161   TST.L   D6             (GAAVF)
00008B82  6AF8                    2365           BPL     GAE            NO A-REG SPECIFIED
00008B84  101D                    2366           MOVE.B  (A5)+,D0       GET BYTE
00008B86  BDCD                    2367           CMP.L   A5,A6
00008B88  65F2                    2368           BCS     GAE
00008B8A  0C00 0041               2369           CMPI.B  #'A',D0
00008B8E  6606                    2370           BNE.S   GAP163
00008B90  41F8 0428               2371           LEA     REGS+32,A0     GET VALUE IN A@
00008B94  600A                    2372           BRA.S   GAP165
00008B96  0C00 0044               2373  GAP163   CMPI.B  #'D',D0
00008B9A  66E0                    2374           BNE     GAE            NOT D-REG
00008B9C  41F8 0408               2375           LEA     REGS,A0        GET VALUE IN D@
00008BA0  6140                    2376  GAP165   BSR.S   GASRGN
00008BA2  D881                    2377           ADD.L   D1,D4
00008BA4  608C                    2378           BRA     GAP111S
00008BA6                          2379  
00008BA6                          2380  *  R@  OFFSET
00008BA6                          2381  
00008BA6  0C06 002B               2382  GAP171   CMPI.B  #'+',D6        (GAPMS)
00008BAA  66D0                    2383           BNE     GAE            ONLY + ALLOWED
00008BAC                          2384  
00008BAC                          2385  * ONLY ONE R@ ALLOWED
00008BAC                          2386  
00008BAC  4A85                    2387           TST.L   D5             (GARO)
00008BAE  6BCC                    2388           BMI     GAE            MULIT R@
00008BB0  0085 80000000           2389           ORI.L   #$80000000,D5  SET R@ GIVEN (GARO)
00008BB6                          2390  
00008BB6  41F8 044C               2391           LEA     OFFSET,A0
00008BBA  6126                    2392           BSR.S   GASRGN         GET VALUE IN R@
00008BBC  D881                    2393           ADD.L   D1,D4
00008BBE  6000 FF6C               2394           BRA     GAP119
00008BC2                          2395  
00008BC2                          2396  *  )  CLOSE THE WORLD
00008BC2                          2397  
00008BC2  4A86                    2398  GAP181   TST.L   D6             (GAAVF)
00008BC4  6AB6                    2399           BPL     GAE            NO (
00008BC6  6012                    2400           BRA.S   GAP197
00008BC8                          2401  
00008BC8                          2402  *  SPACE  TERMINATOR
00008BC8                          2403  
00008BC8  4A45                    2404  GAP191   TST.W   D5             (GALB)
00008BCA  6BB0                    2405           BMI     GAE            [ WITHOUT ]
00008BCC  4A05                    2406           TST.B   D5             (GALP)
00008BCE  6BAC                    2407           BMI     GAE            ( WITHOUT )
00008BD0  538D                    2408           SUBQ.L  #1,A5          ADJUST CHAR POINTER
00008BD2                          2409  
00008BD2                          2410  * IF NO R@ GIVEN ADD R0
00008BD2                          2411  
00008BD2  4A85                    2412           TST.L   D5             (GARO)
00008BD4  6B04                    2413           BMI.S   GAP197         R@ GIVEN
00008BD6  D8B8 044C               2414           ADD.L   OFFSET,D4
00008BDA  2004                    2415  GAP197   MOVE.L  D4,D0
00008BDC                          2416  
00008BDC  4CDF 0170               2417  GAP199   MOVEM.L (A7)+,D4-D6/A0
00008BE0  4E75                    2418           RTS
00008BE2                          2419  
00008BE2                          2420  * GET NEXT NUMBER
00008BE2                          2421  *  A0 = POINTER TO TABLE OF VALUES
00008BE2                          2422  *  D1 = VALUE ON RETURN
00008BE2                          2423  
00008BE2  4280                    2424  GASRGN   CLR.L   D0
00008BE4  101D                    2425           MOVE.B  (A5)+,D0       GET BYTE
00008BE6  BDCD                    2426           CMP.L   A5,A6
00008BE8  6592                    2427           BCS     GAE
00008BEA  0400 0030               2428           SUBI.B  #'0',D0        ADJUST TO ZERO
00008BEE  0C00 0007               2429           CMPI.B  #7,D0
00008BF2  6288                    2430           BHI     GAE            NOT 0 - 7
00008BF4  C0FC 0004               2431           MULU    #4,D0          4 * OFFSET
00008BF8  2230 0000               2432           MOVE.L  (A0,D0),D1
00008BFC  4E75                    2433           RTS
00008BFE                          2434  
00008BFE                          2435  
00008BFE                          2436  
00008BFE                          2437  
00008BFE                          2438  *-------------------------------------------------------------------------
00008BFE                          2439  * File H         Register save,Trace, Breakpoint                  03/03/82
00008BFE                          2440  
00008BFE                          2441  *       SAVE ALL REGISTERS ROUTINE-JMP [TEMP] BACK
00008BFE                          2442  *          USUALLY CALLED BY THE MACRO "SAVEREGS"
00008BFE                          2443  
00008BFE                          2444  SAVE     DS      0
00008BFE  4FF8 0444               2445           LEA     REGA7,A7       WHERE TO START STORING
00008C02  48E7 FFFE               2446           MOVEM.L D0-D7/A0-A6,-(A7)  SAVE REGISTERS
00008C06                          2447  
00008C06  4FF8 0780               2448           LEA     SYSTACK+4,A7   SET UP STRETCHED VERSAUG STACK
00008C0A                          2449  
00008C0A  2078 0444               2450           MOVE.L  REGA7,A0       A0 = TARGETS SUPERVISOR STACK POINTER
00008C0E  31D8 0406               2451           MOVE.W  (A0)+,REGSR+2  GET TARGETS SR
00008C12                          2452  
00008C12  21D8 0400               2453           MOVE.L  (A0)+,REGPC    GET TARGETS PC
00008C16                          2454  
00008C16  21C8 0444               2455           MOVE.L  A0,REGA7       WHERE TARGET STACK REALLY POINTS
00008C1A                          2456  
00008C1A  4E69                    2457           MOVE.L  USP,A1         GET USERS STACK POINTER
00008C1C  21C9 0448               2458           MOVE.L  A1,REGUS       SAVE IT FOR DISPLAY ETC
00008C20                          2459  
00008C20  2038 0400               2460           MOVE.L  REGPC,D0       GET PROGRAM COUNTER
00008C24  598F                    2461           SUBQ.L  #4,A7          SET REAL MACSBUG STACK
00008C26  2F38 04D6               2462           MOVE.L  TEMP,-(A7)     PUT RETURN ADDRESS ON STACK
00008C2A  4E75                    2463           RTS                    RETURN TO SENDER
00008C2C                          2464  
00008C2C                          2465  *
00008C2C                          2466  *     ***TRACE***  TRACE ENTRY POINT
00008C2C                          2467  *       ENTER FROM VECTOR 9  (LOCATION 24) FOR
00008C2C                          2468  *
00008C2C                          2469  
00008C2C                          2470  * REGISTER USAGE
00008C2C                          2471  *  A0 = ADDRESS OF BREAKPOINT ADDRESS
00008C2C                          2472  *  A2 = ADDRESS OF BREAKPOINT COUNTS
00008C2C                          2473  *  D1 = PC
00008C2C                          2474  *  D5 = TRACECNT
00008C2C                          2475  *  D7 = BKPT COUNT
00008C2C                          2476  
00008C2C  46FC 2700               2477  TRACE    MOVE.W  #$2700,SR      MASK OFF INTERRUPTS
00008C30                          2478m          SAVEREGS
00008C30  21CF 0444               2479m       MOVE.L  A7,REGA7       SAVE STACK POINTER
00008C34  4FFA 0008               2480m       LEA     SV_29(PC),A7    A7 = RETURN ADDRESS (FOR CALL TO SAVE)
00008C38  21CF 04D6               2481m       MOVE.L  A7,TEMP        TEMP = RETURN ADDRESS
00008C3C  60C0                    2482m       BRA     SAVE           BSR WITHOUT USING STACK
00008C3E                          2483m SV_29  DS      0
00008C3E                          2484m       ENDM
00008C3E                          2485  
00008C3E                          2486  * IF PC POINTS TO 'TRACE'; DOUBLE EVENT OCCURED
00008C3E                          2487  *  CLEAR LAST EVENT BY IGNORING
00008C3E                          2488  
00008C3E  0CB8 00008008 0400      2489           CMPI.L  #V2,REGPC
00008C46                          2490  
00008C46  6610                    2491           BNE.S   TRACE16
00008C48                          2492  
00008C48  2A78 0444               2493           MOVE.L  REGA7,A5       TRIM LAST EVENT FROM STACK
00008C4C  31DD 0406               2494           MOVE.W  (A5)+,REGSR+2  *MOVE VALUES FROM STACK TO
00008C50  21DD 0400               2495           MOVE.L  (A5)+,REGPC    *PSUEDO SR, PC,
00008C54  21CD 0444               2496           MOVE.L  A5,REGA7       *REFLECT ADJUSTMENTS IN PSUEDO STACK
00008C58  0278 7FFF 0406          2497  TRACE16  ANDI.W  #$7FFF,REGSR+2 RESET "T" (TRACE) BIT
00008C5E                          2498  
00008C5E                          2499  
00008C5E  2A38 04DA               2500           MOVE.L  TRACECNT,D5
00008C62  6B54                    2501           BMI.S   TRACE39        EXECUTING ONE-INSTRUCTION
00008C64  6700 0916               2502           BEQ     ABORT335       NOT TRACEING
00008C68                          2503  
00008C68                          2504  *   MAKE SURE WE ARE NOT TRACING OURSELVES
00008C68  2238 0400               2505           MOVE.L  REGPC,D1       GET PC
00008C6C  41FA F392               2506           LEA.L   FIRST(PC),A0
00008C70  B288                    2507           CMP.L   A0,D1
00008C72  6B10                    2508           BMI.S   TISOK          TRACING BELOW OURSELVES
00008C74  41FA 2B74               2509           LEA     LAST(PC),A0
00008C78  B288                    2510           CMP.L   A0,D1
00008C7A  6208                    2511           BHI.S   TISOK          TRACING ABOVE OURSELVES
00008C7C  4BFA 015E               2512           LEA     MSG020(PC),A5  TRACING OURSELVES
00008C80  6000 0128               2513           BRA     CHKBP4
00008C84                          2514  TISOK
00008C84                          2515  
00008C84  41F8 0470               2516           LEA     BPADD,A0
00008C88  45F8 0494               2517           LEA     BPCNT,A2
00008C8C  7E09                    2518           MOVEQ   #9,D7          9TH BP IS "UNTILL" FEATURE
00008C8E                          2519  
00008C8E  B290                    2520  TRACE01  CMP.L   (A0),D1        SEE IF PC MATCHES ADDRESS IN TABLE
00008C90  6610                    2521           BNE.S   TRACE08
00008C92  2012                    2522           MOVE.L  (A2),D0        GET COUNT
00008C94  6700 0110               2523           BEQ     CHKBP3         COUNT ZERO
00008C98  5380                    2524           SUBQ.L  #1,D0          COUNT DOWN
00008C9A  2480                    2525           MOVE.L  D0,(A2)        SAVE IT
00008C9C  6700 0108               2526           BEQ     CHKBP3         COUNT WENT TO ZERO
00008CA0  6008                    2527           BRA.S   TRACE03
00008CA2                          2528  
00008CA2  5888                    2529  TRACE08  ADDQ.L  #4,A0          BUMP TABLE POINTER
00008CA4  588A                    2530           ADDQ.L  #4,A2          BUMP COUNT TABLE POINTER
00008CA6  5387                    2531           SUBQ.L  #1,D7          LOOP AROUND
00008CA8  66E4                    2532           BNE     TRACE01
00008CAA                          2533  
00008CAA  6100 FBCA               2534  TRACE03  BSR     TDISPLY        DO TRACE DISPLAY
00008CAE  53B8 04DA               2535           SUBQ.L  #1,TRACECNT    TRACE COUNT
00008CB2  6700 F510               2536           BEQ     MACSBUG        STOP WHEN ZERO
00008CB6  6008                    2537           BRA.S   UNTRACE        CONTINUE WITH TRACE
00008CB8                          2538  
00008CB8                          2539  
00008CB8                          2540  * END UP HERE AFTER BREAKPOINTING ONE INSTRUCTION
00008CB8                          2541  * -- PUT BP BACK IN AND CONTINUE TO RUN
00008CB8                          2542  
00008CB8  42B8 04DA               2543  TRACE39  CLR.L   TRACECNT
00008CBC  613A                    2544           BSR.S   SWAPIN         PUT BP INTO USER'S MEMORY
00008CBE  600E                    2545           BRA.S   UNSTACK        CONTINUE TO RUN
00008CC0                          2546  
00008CC0                          2547  
00008CC0  0078 8000 0406          2548  UNTRACE  ORI.W   #$8000,REGSR+2 SET UP TRACE BIT!
00008CC6                          2549m          ADDR2MEM TRACE,AV9     TAKE TRACE VECTOR
00008CC6  487A FF64               2550m       PEA     TRACE(PC)         MOVE ADDRESS TO MEMORY; POSITION
00008CCA  21DF 0024               2551m       MOVE.L  (A7)+,AV9       INDEPENDANT = TO "MOVE.L #TRACE,AV9"
00008CCE                          2552m       ENDM
00008CCE                          2553  
00008CCE  2278 0448               2554  UNSTACK  MOVE.L  REGUS,A1
00008CD2  4E61                    2555           MOVE.L  A1,USP         US = TARGET'S USER STACK
00008CD4  2478 0400               2556           MOVE.L  REGPC,A2       A2 = TARGET'S PC
00008CD8                          2557  
00008CD8                          2558  
00008CD8                          2559           DS      0              INSURE MEMORY AT LOCATION OF PC
00008CD8  3012                    2560           MOVE.W  (A2),D0        * ADDR TRAP ERROR * IF NO MEMORY
00008CDA                          2561  
00008CDA  2278 0444               2562           MOVE.L  REGA7,A1       A1 = TARGET SYSTEM STACK (SS)
00008CDE                          2563  
00008CDE                          2564           DS      0              INSURE MEMORY AT TARGET'S STACK
00008CDE  230A                    2565           MOVE.L  A2,-(A1)       MOVE PC ONTO TARGET'S STACK
00008CE0                          2566  
00008CE0  3038 0406               2567           MOVE.W  REGSR+2,D0
00008CE4  3300                    2568           MOVE.W  D0,-(A1)       SR ONTO TARGET'S STACK
00008CE6                          2569  
00008CE6  21C9 04D6               2570           MOVE.L  A1,TEMP        TEMP = TARGETS SS
00008CEA                          2571  
00008CEA  4FF8 0408               2572           LEA     REGS,A7        A7 = POINTER TO PSUEDO REGISTERS
00008CEE  4CDF 7FFF               2573           MOVEM.L (A7)+,D0-D7/A0-A6  ARM MOST OF TARGET REGISTERS
00008CF2  2E78 04D6               2574           MOVE.L  TEMP,A7        SS = TARGET'S
00008CF6                          2575  
00008CF6  4E73                    2576           RTE                    GO BACK TO THE USER
00008CF8                          2577  
00008CF8                          2578  
00008CF8  6114                    2579  SWAPIN   BSR.S   SWAPOUT        MAKE SURE THEY ARE ALL OUT
00008CFA                          2580  
00008CFA  21F8 0010 04D2          2581           MOVE.L  AV4,SAVEAV4    SAVE VECTOR (WHOM EVER'S IT WAS)
00008D00  4DFA 0054               2582           LEA     CHKBP(PC),A6
00008D04  21CE 0010               2583           MOVE.L  A6,AV4         REPLACE IT WITH THE "CHKBP" RTN
00008D08  4DFA 002A               2584           LEA     SWAPIN1(PC),A6 A6 = ROUTINE ADDRESS
00008D0C  6010                    2585           BRA.S   SWAP
00008D0E                          2586  
00008D0E  4A78 04E0               2587  SWAPOUT  TST.W   BPSTATUS        SEE IF OUT ALREADY
00008D12  6740                    2588           BEQ.S   SWAPEND         YES...DONE
00008D14  21F8 04D2 0010          2589           MOVE.L  SAVEAV4,AV4     NO....REPLACE THE VECTOR
00008D1A                          2590  
00008D1A  4DFA 0028               2591           LEA     SWAPOUT1(PC),A6 A6 = ROUTINE ADDRESS
00008D1E  41F8 0470               2592  SWAP     LEA     BPADD,A0       A0 = ADDRESS OF TABLE
00008D22  45F8 0494               2593           LEA     BPCNT,A2       A2 = ADDRESS OF COUNTS
00008D26  7E09                    2594           MOVEQ   #9,D7          DO 9 BP
00008D28  47F8 04B8               2595           LEA     BPDATA,A3      CONTENT TABLE
00008D2C                          2596  
00008D2C  2850                    2597  SWAP1    MOVE.L  (A0),A4        GET POSSIBLE ADDDRESS
00008D2E  4A90                    2598           TST.L   (A0)           IS POSSIBLE ADDRESS ZERO
00008D30  671A                    2599           BEQ.S   SWAP99         ZERO MEANS NO BP DEFINED
00008D32  4ED6                    2600           JMP     (A6)           GO TO RIGHT ROUTINE
00008D34                          2601  
00008D34                          2602  SWAPIN1
00008D34  3014                    2603           MOVE.W  (A4),D0        USER'S PROGRAM GOES INTO TABLE
00008D36                          2604  
00008D36  3680                    2605           MOVE.W  D0,(A3)
00008D38  38BC 4AFB               2606           MOVE.W  #BKPOINT,(A4)  PUT BREAKPOINT IN
00008D3C                          2607  
00008D3C  31FC 0001 04E0          2608           MOVE.W  #1,BPSTATUS    FLAG AS BP IN
00008D42  6008                    2609           BRA.S   SWAP99
00008D44                          2610  
00008D44  3013                    2611  SWAPOUT1 MOVE.W  (A3),D0        GET CONTENTS FROM TABLE
00008D46  3880                    2612           MOVE.W  D0,(A4)        PUT CONTENTS BACK INTO PROGRAM
00008D48                          2613  
00008D48  4278 04E0               2614           CLR.W   BPSTATUS       FLAG AS BREAKPOINTS OUT
00008D4C  5888                    2615  SWAP99   ADDQ.L  #4,A0          BUMP ADDRESS TABLE POINTER
00008D4E  548B                    2616           ADDQ.L  #2,A3          BUMP CONTENT TABLE POINTER
00008D50  5387                    2617           SUBQ.L  #1,D7
00008D52  66D8                    2618           BNE     SWAP1
00008D54  4E75                    2619  SWAPEND  RTS
00008D56                          2620  
00008D56                          2621  *  ILLEGAL INSTRUCTION ENTRY POINT
00008D56                          2622  *   BREAKPOINT TEST
00008D56                          2623  *
00008D56  46FC 2700               2624  CHKBP    MOVE.W  #$2700,SR      MASK OF INT.
00008D5A                          2625m          SAVEREGS
00008D5A  21CF 0444               2626m       MOVE.L  A7,REGA7       SAVE STACK POINTER
00008D5E  4FFA 000A               2627m       LEA     SV_31(PC),A7    A7 = RETURN ADDRESS (FOR CALL TO SAVE)
00008D62  21CF 04D6               2628m       MOVE.L  A7,TEMP        TEMP = RETURN ADDRESS
00008D66  6000 FE96               2629m       BRA     SAVE           BSR WITHOUT USING STACK
00008D6A                          2630m SV_31  DS      0
00008D6A                          2631m       ENDM
00008D6A  2038 0400               2632           MOVE.L  REGPC,D0       GET PROGRAM COUNTER TO COMPARE
00008D6E  2A40                    2633           MOVE.L  D0,A5          A5 = TARGET PC
00008D70  3215                    2634           MOVE.W  (A5),D1        SEE WHAT OP CODE WAS XEQ
00008D72                          2635  
00008D72  619A                    2636           BSR     SWAPOUT        TAKE BREAKPOINTS OUT
00008D74                          2637  
00008D74  0C41 4AFB               2638           CMPI.W  #BKPOINT,D1    USED FOR BP
00008D78  6616                    2639           BNE.S   CHKBP11        NOT AT BREAKPOINT
00008D7A                          2640  
00008D7A  41F8 0470               2641           LEA     BPADD,A0       A0 = ADDRESS OF BP ADDRESSES
00008D7E  45F8 0494               2642           LEA     BPCNT,A2       A2 = ADDRESS OF BP COUNTS
00008D82  7E09                    2643           MOVEQ   #9,D7          D7 = LOOP COUNT
00008D84                          2644  
00008D84  BBD0                    2645  CHKBP1   CMP.L   (A0),A5        SEE IF WE ARE THERE
00008D86  6712                    2646           BEQ.S   CHKBP2         AT BREAKPOINT; AT AN ADDRESS
00008D88                          2647  
00008D88  5888                    2648           ADDQ.L  #4,A0          BUMP BOTH POINTERS
00008D8A  588A                    2649           ADDQ.L  #4,A2
00008D8C  5387                    2650           SUBQ.L  #1,D7
00008D8E  66F4                    2651           BNE     CHKBP1
00008D90                          2652  
00008D90                          2653  * IS NOT A BREAKPOINT; ASSUME ILLEGAL INSTRUCTION
00008D90  4BFA 0028               2654  CHKBP11  LEA     MSG009(PC),A5  'ILLEGAL INSTRUCTION'
00008D94  4278 04DE               2655           CLR.W   TRACEON        RESET TRACE MODE
00008D98  6010                    2656           BRA.S   CHKBP4
00008D9A                          2657  
00008D9A                          2658  * AT BREAKPOINT...CHECK COUNT
00008D9A  2012                    2659  CHKBP2   MOVE.L  (A2),D0        GET COUNT
00008D9C  6708                    2660           BEQ.S   CHKBP3         COUNT ZERO
00008D9E  5380                    2661           SUBQ.L  #1,D0          DECREMENT
00008DA0  2480                    2662           MOVE.L  D0,(A2)        PUT COUNT BACK
00008DA2  6600 F7F4               2663           BNE     GOCMD1         COUNT NOT ZERO; KEEP GOING
00008DA6                          2664  
00008DA6  4BFA 0026               2665  CHKBP3   LEA     MSG014(PC),A5  "AT BREAKPOINT"
00008DAA                          2666  
00008DAA  6100 F35A               2667  CHKBP4   BSR     FIXDCRLF
00008DAE  6100 0A72               2668           BSR     OUT1CR
00008DB2  6100 FAC2               2669           BSR     TDISPLY        PRINT TRACE DISPLAY
00008DB6  6000 F40C               2670           BRA     MACSBUG
00008DBA                          2671  
00008DBA= 49 4C 4C 45 47 41 4C    2672  MSG009   DC.B    'ILLEGAL INSTRUCTION',EOT
          20 49 4E 53 54 52 55  
          43 54 49 4F 4E 04     
00008DCE= 41 54 20 42 52 45 41    2675  MSG014   DC.B    'AT BREAKPOINT',EOT
          4B 50 4F 49 4E 54 04  
00008DDC= 2E 50 43 20 77 69 74    2677  MSG020   DC.B    '.PC within "DEBUGGER"',BELL,EOT
          68 69 6E 20 22 44 45  
          42 55 47 47 45 52 22  
          07 04                 
00008DF3= 00                      2681           DC.B    0              PAD BYTE
00008DF4                          2682  
00008DF4                          2683  
00008DF4                          2684  *-------------------------------------------------------------------------
00008DF4                          2685  * File HE        HELP Command                                     12/01/81
00008DF4                          2686  
00008DF4                          2687  * HELP  COMMAND
00008DF4                          2688  *  PRINT: REGISTERS AND COMMANDS IN TABLES
00008DF4                          2689  
00008DF4  4BFA 0066               2690  HECMD    LEA     MSG002(PC),A5
00008DF8  6100 F2F8               2691           BSR     FIXDATA
00008DFC  6100 0A24               2692           BSR     OUT1CR         PRINT
00008E00                          2693  
00008E00  49FA F498               2694           LEA     SOLIST(PC),A4  A4 = POINTER TO COMMAND LIST
00008E04                          2695  
00008E04  6100 0AA4               2696           BSR     FIXBUF
00008E08  143C 0008               2697           MOVE.B  #8,D2          D2 = # CMDS PER LINE
00008E0C  321C                    2698  HELP4    MOVE.W  (A4)+,D1       GET 2 BYTE COMMAND
00008E0E  0C41 FFFF               2699           CMPI.W  #$FFFF,D1
00008E12  6740                    2700           BEQ.S   HELP6          DONE PRINT LAST BUFFER
00008E14  548C                    2701           ADDQ.L  #2,A4          BUMP POINTER UP BY 2
00008E16  4A41                    2702           TST.W   D1             IS THE INVISIBLE INDICATOR ON?
00008E18  6BF2                    2703           BMI     HELP4          YES... THEN BYPASS THIS ONE
00008E1A  3601                    2704           MOVE.W  D1,D3          SAVE XX FOR "XX" AND "NOXX" IN HELP
00008E1C  0241 7F7F               2705           ANDI.W  #$7F7F,D1      REMOVE CONTROL BITS
00008E20  3CC1                    2706           MOVE.W  D1,(A6)+       NO.... MOVE THIS COMMAND TO "PRINT" LINE
00008E22  2CFC 20202020           2707           MOVE.L  #'    ',(A6)+  MOVE BLANKS FOR SPACING
00008E28  6118                    2708           BSR.S   HELP81         PRINT THE LINE IF FULL
00008E2A  0803 0007               2709           BTST    #7,D3          IS "NO" OPTION SUPPORTED?
00008E2E  6710                    2710           BEQ.S   EOHLOOP        NO...BYPASS THIS COMMAND, ELSE...
00008E30  3CFC 4E4F               2711           MOVE.W  #'NO',(A6)+    "NO  "   IN MSG
00008E34  0243 7F7F               2712           ANDI.W  #$7F7F,D3      RESET CONTROL BITS
00008E38  3CC3                    2713           MOVE.W  D3,(A6)+       "NOCC"   IN MSG (WHERE CC=COMMAND CODE)
00008E3A  3CFC 2020               2714           MOVE.W  #'  ',(A6)+    "NOCC  " IN MSG    "    "    "      "
00008E3E  6102                    2715           BSR.S   HELP81         PRINT THE LINE IF FULL
00008E40  60CA                    2716  EOHLOOP  BRA     HELP4          NEXT COMMAND.
00008E42                          2717  
00008E42                          2718  *        DISPLAY LINE OF COMMANDS (IF FULL)
00008E42                          2719  
00008E42  5302                    2720  HELP81   SUBQ.B  #1,D2          D2 = COUNT OF COMMANDS PER LINE
00008E44  660C                    2721           BNE.S   HELP85         NOT FULL, JUST RETURN FOR MORE
00008E46  6100 09DA               2722           BSR     OUT1CR         YES, THEN WRITE IT
00008E4A  6100 0A5E               2723           BSR     FIXBUF         SET-UP LINE FOR NEXT COMMANDS
00008E4E  143C 0008               2724           MOVE.B  #8,D2          D2 = MAX NUMBER CAN BE PLACED IN LINE
00008E52  4E75                    2725  HELP85   RTS
00008E54                          2726  
00008E54  6100 09CC               2727  HELP6    BSR     OUT1CR         PRINT ANY REMAINING PORTION
00008E58                          2728  *        BRA     HELP1          SEE IF COMPLETE
00008E58  6000 F36A               2729           BRA     MACSBUG        HELP IS COMPLETE SO RETURN
00008E5C                          2730  
00008E5C= 2E 50 43 20 2E 53 52    2731  MSG002   DC.B    '.PC .SR .US .SS',CR,LF
          20 2E 55 53 20 2E 53  
          53 0D 0A              
00008E6D= 2E 44 30 20 2E 44 31    2734           DC.B    '.D0 .D1 .D2 .D3 .D4 .D5 .D6 .D7',CR,LF
          20 2E 44 32 20 2E 44  
          33 20 2E 44 34 20 2E  
          44 35 20 2E 44 36 20  
          2E 44 37 0D 0A        
00008E8E= 2E 41 30 20 2E 41 31    2739           DC.B    '.A0 .A1 .A2 .A3 .A4 .A5 .A6 .A7',CR,LF
          20 2E 41 32 20 2E 41  
          33 20 2E 41 34 20 2E  
          41 35 20 2E 41 36 20  
          2E 41 37 0D 0A        
00008EAF= 2E 52 30 20 2E 52 31    2744           DC.B    '.R0 .R1 .R2 .R3 .R4 .R5 .R6',CR,LF,EOT
          20 2E 52 32 20 2E 52  
          33 20 2E 52 34 20 2E  
          52 35 20 2E 52 36 0D  
          0A 04                 
00008ECD= 00                      2749           DC.B    0              PAD BYTE
00008ECE                          2750  
00008ECE                          2751  
00008ECE                          2752  
00008ECE                          2753  *-------------------------------------------------------------------------
00008ECE                          2754  * File HEX2DEC   HEX2DEC convert hex to decimal                   11/02/81
00008ECE                          2755  
00008ECE                          2756  
00008ECE                          2757  *    CONVERT BINARY TO DECIMAL  REG D0 PUT IN (A6) BUFFER AS ASCII
00008ECE                          2758  
00008ECE  48E7 7B00               2759  HEX2DEC  MOVEM.L D1-D4/D6-D7,-(A7)   SAVE REGISTERS
00008ED2  2E00                    2760           MOVE.L  D0,D7          SAVE IT HERE
00008ED4  6A08                    2761           BPL.S   HX2DC
00008ED6  4487                    2762           NEG.L   D7             CHANGE TO POSITIVE
00008ED8  6B4E                    2763           BMI.S   HX2DC57        SPECIAL CASE (-0)
00008EDA  1CFC 002D               2764           MOVE.B  #'-',(A6)+     PUT IN NEG SIGN
00008EDE  4244                    2765  HX2DC    CLR.W   D4             FOR ZERO SURPRESS
00008EE0  7C0A                    2766           MOVEQ   #10,D6         COUNTER
00008EE2  7401                    2767  HX2DC0   MOVEQ   #1,D2          VALUE TO SUB
00008EE4  2206                    2768           MOVE.L  D6,D1          COUNTER
00008EE6  5381                    2769           SUBQ.L  #1,D1          ADJUST - FORM POWER OF TEN
00008EE8  671A                    2770           BEQ.S   HX2DC2         IF POWER IS ZERO
00008EEA  3602                    2771  HX2DC1   MOVE.W  D2,D3          D3=LOWER WORD
00008EEC  C6FC 000A               2772           MULU    #10,D3
00008EF0  4842                    2773           SWAP    D2             D2=UPPER WORD
00008EF2  C4FC 000A               2774           MULU    #10,D2
00008EF6  4843                    2775           SWAP    D3             ADD UPPER TO UPPER
00008EF8  D443                    2776           ADD.W   D3,D2
00008EFA  4842                    2777           SWAP    D2             PUT UPPER IN UPPER
00008EFC  4843                    2778           SWAP    D3             PUT LOWER IN LOWER
00008EFE  3403                    2779           MOVE.W  D3,D2          D2=UPPER & LOWER
00008F00  5381                    2780           SUBQ.L  #1,D1
00008F02  66E6                    2781           BNE     HX2DC1
00008F04  4280                    2782  HX2DC2   CLR.L   D0             HOLDS SUB AMT
00008F06  BE82                    2783  HX2DC22  CMP.L   D2,D7
00008F08  6D06                    2784           BLT.S   HX2DC3         IF NO MORE SUB POSSIBLE
00008F0A  5280                    2785           ADDQ.L  #1,D0          BUMP SUBS
00008F0C  9E82                    2786           SUB.L   D2,D7          COUNT DOWN BY POWERS OF TEN
00008F0E  60F6                    2787           BRA.S   HX2DC22        DO MORE
00008F10  4A00                    2788  HX2DC3   TST.B   D0             ANY VALUE?
00008F12  6604                    2789           BNE.S   HX2DC4
00008F14  4A44                    2790           TST.W   D4             ZERO SURPRESS
00008F16  6708                    2791           BEQ.S   HX2DC5
00008F18  0600 0030               2792  HX2DC4   ADDI.B  #$30,D0        BINARY TO ASCII
00008F1C  1CC0                    2793           MOVE.B  D0,(A6)+       PUT IN BUFFER
00008F1E  1800                    2794           MOVE.B  D0,D4          MARK AS NON ZERO SURPRESS
00008F20  5386                    2795  HX2DC5   SUBQ.L  #1,D6          NEXT POWER
00008F22  66BE                    2796           BNE     HX2DC0
00008F24  4A44                    2797           TST.W   D4             SEE IF ANYTHING PRINTED
00008F26  6604                    2798           BNE.S   HX2DC6
00008F28  1CFC 0030               2799  HX2DC57  MOVE.B  #'0',(A6)+     PRINT AT LEST A ZERO
00008F2C  4CDF 00DE               2800  HX2DC6   MOVEM.L (A7)+,D1-D4/D6-D7   RESTORE REGISTERS
00008F30  4E75                    2801           RTS                    END OF ROUTINE
00008F32                          2802  
00008F32                          2803  
00008F32                          2804  
00008F32                          2805  
00008F32                          2806  *-------------------------------------------------------------------------
00008F32                          2807  * File MDDI      MD[S] (Memory Display) Command                   06/16/82
00008F32                          2808  
00008F32                          2809  *   ***MD***   MEMORY DISPLAY         ENTRY POINT
00008F32                          2810  *     FORMAT:  MD[S] <ADDRESS> [<COUNT>] [;DI]
00008F32                          2811  * 1.  IF 'S' USED IN COMMAND THEN IT WILL DUMP 16 LINES, (1 Screen), AND
00008F32                          2812  *     PROMPT-ENTER CR FOR 16 MORE LINES ETC OR ANY MACSBUG COMMAND.
00008F32                          2813  *
00008F32                          2814  
00008F32                          2815  MDCMD    DS      0
00008F32  6100 0A8E               2816           BSR     SCANPORT       WHERE TO SEND OUTPUT
00008F36  21F9 0000062C 0620      2817           MOVE.L  INPORT1.L,INFROM ONLY ALLOW INPUT FROM PORT1
00008F3E                          2818  
00008F3E  7CFF                    2819           MOVEQ   #-1,D6         D6 = HOW MANY LINES PER PAGE
00008F40                          2820  
00008F40  97CB                    2821           SUB.L   A3,A3          A4 = DEFAULT ZERO  START
00008F42  284B                    2822           MOVE.L  A3,A4          A3 = END ADDR
00008F44                          2823  
00008F44  4287                    2824           CLR.L   D7             D7 = DO NOT DISASSEMBLE
00008F46  244D                    2825           MOVE.L  A5,A2
00008F48  BDCA                    2826  PRINT8   CMP.L   A2,A6          LOOK FOR OPTIONS
00008F4A  651A                    2827           BCS.S   PRINTDI        NO  OPTIONS
00008F4C  0C1A 003B               2828           CMPI.B  #';',(A2)+
00008F50  66F6                    2829           BNE     PRINT8
00008F52                          2830  
00008F52  2C4A                    2831           MOVE.L  A2,A6
00008F54  538E                    2832           SUBQ.L  #1,A6          A6 = POINTER TO ;
00008F56                          2833  
00008F56  0C1A 0044               2834           CMPI.B  #'D',(A2)+
00008F5A  6600 F15A               2835  PRINTMB  BNE     SYNTAX         COMMAND SYNTAX ERROR
00008F5E  0C1A 0049               2836           CMPI.B  #'I',(A2)+
00008F62  66F6                    2837           BNE     PRINTMB
00008F64  7EFF                    2838           MOVEQ   #-1,D7         DISASSEMBLE OPTION
00008F66                          2839  PRINTDI
00008F66                          2840  
00008F66                          2841  
00008F66                          2842  * LOOK FOR "S" IN COMMAND
00008F66  1015                    2843           MOVE.B  (A5),D0
00008F68  0C00 0053               2844           CMPI.B  #'S',D0
00008F6C  6608                    2845           BNE.S   PRINT5         NO "S" IN COMMAND
00008F6E  528D                    2846           ADDQ.L  #1,A5          MOVE PAST "S"
00008F70                          2847  
00008F70  7C10                    2848           MOVEQ   #16,D6         DO 16 LINES AT A TIME
00008F72  97CB                    2849           SUB.L   A3,A3
00008F74  538B                    2850           SUBQ.L  #1,A3          MAX END ADDRESS
00008F76                          2851  
00008F76  41FA 001A               2852  PRINT5   LEA     PRINT7(PC),A0  WHERE TO GO IF NO PARAMETERS
00008F7A  6100 072A               2853           BSR     FNEXTF         FIND NEXT FIELD
00008F7E  6100 FB2C               2854           BSR     GETA
00008F82  2840                    2855           MOVE.L  D0,A4          A4 = GET ADDRESS
00008F84                          2856  
00008F84  6100 0720               2857           BSR     FNEXTF
00008F88  6100 0770               2858           BSR     GETEXP         D0 = GET COUNT
00008F8C  D08C                    2859           ADD.L   A4,D0          END=START+COUNT-1
00008F8E  5380                    2860           SUBQ.L  #1,D0          BACK OFF ONE
00008F90  2640                    2861           MOVE.L  D0,A3          A3 = END ADDRESS
00008F92                          2862  
00008F92  4A87                    2863  PRINT7   TST.L   D7
00008F94  672A                    2864           BEQ.S   PUTADR         NOT DISASSEMBLE
00008F96                          2865  
00008F96  6100 0912               2866  PRINTDI5 BSR     FIXBUF         ;DI OPTION
00008F9A  48E7 0310               2867           MOVEM.L A3/D6-D7,-(A7)
00008F9E  4CD4 0007               2868           MOVEM.L (A4),D0-D2     D0-D2 = DATA TO DISASSEMBLE
00008FA2  6100 22D2               2869           BSR     DCODE68K       DISASSEMBLE
00008FA6  6100 087A               2870           BSR     OUT1CR
00008FAA  4CDF 08C0               2871           MOVEM.L (A7)+,A3/D6-D7
00008FAE                          2872  
00008FAE  5386                    2873           SUBQ.L  #1,D6
00008FB0  676C                    2874           BEQ.S   PRINT9         'MDS' COMMAND
00008FB2                          2875  
00008FB2  B7CC                    2876           CMP.L   A4,A3          END CHECK
00008FB4  64E0                    2877           BCC     PRINTDI5
00008FB6  6066                    2878           BRA.S   PRINT9
00008FB8                          2879  
00008FB8  7C10                    2880  PRINT3   MOVEQ   #16,D6         D6 = LINE BLOCK COUNT
00008FBA  97CB                    2881           SUB.L   A3,A3
00008FBC  538B                    2882           SUBQ.L  #1,A3          A3 = MAX END ADDRESS
00008FBE  60D2                    2883           BRA     PRINT7
00008FC0                          2884  
00008FC0                          2885  * START A NEW  LINE
00008FC0                          2886  *
00008FC0  6100 08E8               2887  PUTADR   BSR     FIXBUF         SET UP OUTPUT BUFFER
00008FC4  200C                    2888           MOVE.L  A4,D0          CURRENT LINE ADDRESS
00008FC6  6100 063E               2889           BSR     FRELADDR       FORM RELATIVE ADDRESS
00008FCA  1CFC 0020               2890           MOVE.B  #$20,(A6)+     FORMAT  SPACE
00008FCE  204C                    2891           MOVE.L  A4,A0          A0 IS SCANNING ADDRESS
00008FD0  7610                    2892           MOVEQ   #$10,D3        SET UP COUNTER FOR LOOP
00008FD2                          2893  
00008FD2  1018                    2894  NXTBP    MOVE.B  (A0)+,D0       GET BYTE TO PRINT
00008FD4  6100 0614               2895           BSR     PNT2HX         PRINT IT
00008FD8  1CFC 0020               2896           MOVE.B  #$20,(A6)+     SPACE BETWEEN EACH HEX
00008FDC                          2897  
00008FDC  0C03 0009               2898           CMPI.B  #9,D3          HALF LINE SPACING
00008FE0  6604                    2899           BNE.S   NXTBP3
00008FE2  1CFC 0020               2900           MOVE.B  #$20,(A6)+
00008FE6                          2901  NXTBP3
00008FE6                          2902  
00008FE6  5383                    2903           SUBQ.L  #1,D3
00008FE8  66E8                    2904           BNE     NXTBP          LOOP TILL D3 IS ZERO
00008FEA                          2905  
00008FEA  1CFC 0020               2906           MOVE.B  #$20,(A6)+     MOVE A SPACE
00008FEE  204C                    2907           MOVE.L  A4,A0          RELOAD SCANNER FOR ASCII PRINTS
00008FF0  7610                    2908           MOVEQ   #$10,D3        RELOAD COUNTER
00008FF2                          2909  
00008FF2  1018                    2910  NXTCHR   MOVE.B  (A0)+,D0       FETCH BYTE
00008FF4  0200 007F               2911           ANDI.B  #$7F,D0        REMOVE HIGH ORDER BIT, (ASCII ONLY USES 7 BITS)
00008FF8  0C00 0020               2912           CMPI.B  #$20,D0        SEE IF IT IS CONTROL CHAR
00008FFC  6D06                    2913           BLT.S   NOTCHR         BYPASS IF IT IS... ELSE
00008FFE  0C00 007F               2914           CMPI.B  #$7F,D0        IS IT A "7F"?    (CAUSES PRINTER PROBLEM)
00009002  6D04                    2915           BLT.S   PUTCHR         NO... THEN PRINT IT, ELSE SUBSTITUTE "."
00009004  103C 002E               2916  NOTCHR   MOVE.B  #$2E,D0        CHANGE UNPRINTABLE TO PERIOD
00009008                          2917  
00009008  1CC0                    2918  PUTCHR   MOVE.B  D0,(A6)+       MOVE "EDITTED" CHARACTER TO PRINT LINE
0000900A  5383                    2919           SUBQ.L  #1,D3          LOOP AROUND FOR NEXT CHAR
0000900C  66E4                    2920           BNE     NXTCHR         ANY LEFT?
0000900E  6100 0812               2921           BSR     OUT1CR         NO... THEN PRINT THE COMPLETE LINE
00009012  508C                    2922           ADDQ.L  #$08,A4        UPDATE STARTING ADDRESS OF NEXT ADDRESS
00009014  508C                    2923           ADDQ.L  #$08,A4        ........
00009016  B7CC                    2924           CMP.L   A4,A3          DOES NEW LINE START PAST END
00009018  6504                    2925           BCS.S   PRINT9         SEE IF STILL GOING
0000901A  5386                    2926           SUBQ.L  #1,D6          DECR THE COUNTER
0000901C  66A2                    2927           BNE     PUTADR         DO ANOTHER LINE
0000901E                          2928  
0000901E  4BFA F26C               2929  PRINT9   LEA     MSG001(PC),A5  SET UP FOR PROMPT
00009022  6100 F0CE               2930           BSR     FIXDATA
00009026  1CFC 003E               2931           MOVE.B  #'>',(A6)+     PROMPT SAME AS MACSBUG
0000902A  1CFC 0020               2932           MOVE.B  #BLANK,(A6)+
0000902E  6100 080C               2933           BSR     OUTPUT         PRINT IT
00009032                          2934  
00009032  6100 0876               2935           BSR     FIXBUF         RESET BUFFER
00009036  6100 087A               2936           BSR     PORTIN1        TAKE IN INPUT
0000903A  BBCE                    2937           CMP.L   A6,A5          SEE IF ANYTHING ENTERED
0000903C  6700 FF7A               2938           BEQ     PRINT3         NOTHING ENTERED; DO 16 MORE LINES
00009040  42B8 061C               2939           CLR.L   OUTTO          *
00009044  6000 F1C0               2940           BRA     DECODE6        GO MAKE SURE 2ND DIGIT IS BLANK
00009048                          2941  
00009048                          2942  
00009048                          2943  
00009048                          2944  
00009048                          2945  *-------------------------------------------------------------------------
00009048                          2946  * File MMDI      Modify Memory command WITH asm/disasm            11/27/81
00009048                          2947  
00009048                          2948  * MODIFY MEMORY
00009048                          2949  *  COMMON REGISTER USAGE
00009048                          2950  *   A6  IO BUFFER POINTER  END
00009048                          2951  *   A5  IO BUFFER POINTER  START
00009048                          2952  *   A4  ADDRESS TO MODIFY
00009048                          2953  *   A3
00009048                          2954  *   A2
00009048                          2955  *   A1
00009048                          2956  *   A0
00009048                          2957  *   D7  DATA READ (DATA STORED)
00009048                          2958  *   D6  SIZE  1/2/4 BYTES  (ASM/DISASM 2 - 10 BYTES)
00009048                          2959  *   D5  OVERRIDE BYTE (80XX=NON VERIFY)  (XX80=BYTE SIZE)
00009048                          2960  *
00009048                          2961  * ;OPTIONS
00009048                          2962  *   ;W  WORD
00009048                          2963  *   ;L  LONG WORD (4 BYTES)
00009048                          2964  *   ;DI DISASSEMBLE
00009048                          2965  *     ;O  ODD ADDRESSES ONLY
00009048                          2966  *     ;V  EVEN ADDRESSES ONLY
00009048                          2967  *       ;N  NON-VERIFY
00009048                          2968  *
00009048                          2969  
00009048  6100 067A               2970  MMDI     BSR     CKWADR
0000904C  6100 067C               2971           BSR     CKADDR
00009050  4286                    2972           CLR.L   D6             SIZE = 0
00009052  D9C6                    2973  MMDI22   ADD.L   D6,A4          PC = PC + SIZE
00009054  6100 0854               2974  MMDI23   BSR     FIXBUF         A5 & A6 = POINTER TO BUFFER
00009058                          2975  
00009058                          2976  *                  ENTRY
00009058                          2977  *                   A4 = PROGRAM COUNTER
00009058                          2978  *                   A5 = POINTER TO STORE DISASSEMBLED LINE
00009058  4CD4 0007               2979           MOVEM.L   (A4),D0-D2          DATA TO DISASSEMBLE
0000905C  6100 2218               2980           BSR       DCODE68K
00009060                          2981  *                  RETURN
00009060                          2982  *                   A4 = NEW PROGRAM COUNTER
00009060                          2983  *                   A5 = PTR START BUFFER
00009060                          2984  *                   A6 = PRT END BUFFER
00009060                          2985  *                   D6 = NUMBER OF BYTES DISASSEMBLED
00009060                          2986  
00009060  1CFC 003F               2987           MOVE.B  #'?',(A6)+
00009064  6100 07D6               2988           BSR     OUTPUT
00009068                          2989  
00009068  6100 0840               2990  MMDI31   BSR     FIXBUF
0000906C  6100 0856               2991           BSR     PORTIN1N       INPUT ASSEMBLY SOURCE (NO LINE FEED)
00009070  BDCD                    2992           CMP.L   A5,A6
00009072  6606                    2993           BNE.S   MMDI34
00009074  6100 07AC               2994           BSR     OUT1CR         NOTHING INPUT; OUTPUT LINE FEED
00009078  60DA                    2995           BRA     MMDI23
0000907A                          2996  
0000907A  99C6                    2997  MMDI34   SUB.L   D6,A4          BACKUP PC
0000907C                          2998  
0000907C  0C15 002E               2999           CMPI.B  #'.',(A5)
00009080  6700 01DE               3000           BEQ     MM905          CLOSE
00009084                          3001  
00009084  47F8 078D               3002           LEA     SYSTACK+17,A3  STORE BUFFER
00009088                          3003  
00009088                          3004  *                  A3 = STORE POINTER
00009088                          3005  *                  A4 = PROGRAM COUNTER
00009088                          3006  *                  A5 = POINTER TO DATA TO ASSEMBLE
00009088                          3007  *                  A6 = POINTER TO END OF SOURCE DATA
00009088                          3008  
00009088  6100 1006               3009           BSR     CODE68K        ASSEMBLE
0000908C                          3010  
0000908C                          3011  *                  A3 = POINTER TO LINE ASSEMBLED
0000908C                          3012  *                  A4 = PROGRAM COUNTER
0000908C                          3013  *                  A6 = POINTER END OF LINE ASSEMBLED
0000908C                          3014  *                  D0-D2 = DATA ASSEMBLED
0000908C                          3015  *                  D6 = NUMBER OF BYTES ASSEMBLED
0000908C                          3016  *                  D7 = ERROR FLAG & POSITION OF ERROR
0000908C                          3017  
0000908C  2A4B                    3018           MOVE.L  A3,A5
0000908E  D7FC 0000004E           3019           ADD.L   #78,A3         A3 = MAX LINE
00009094  B7CE                    3020  MMDI26   CMP.L   A6,A3
00009096  6506                    3021           BCS.S   MMDI27
00009098  1CFC 0020               3022           MOVE.B  #BLANK,(A6)+   SPACE FILL LINE
0000909C  60F6                    3023           BRA     MMDI26
0000909E  6100 0782               3024  MMDI27   BSR     OUT1CR         PRINT LINE JUST ENTERED
000090A2                          3025  
000090A2  4A07                    3026           TST.B   D7
000090A4  6620                    3027           BNE.S   MMDI30         ERROR; DON'T STORE DATA
000090A6                          3028  
000090A6  45F8 0780               3029           LEA     SYSTACK+4,A2   A2 = TEMP AREA
000090AA  48E2 E000               3030           MOVEM.L D0/D1/D2,-(A2) STORE DATA
000090AE  2206                    3031           MOVE.L  D6,D1          D1 = NUMBER OF BYTES TO STORE
000090B0  5381                    3032           SUBQ.L  #1,D1
000090B2  224C                    3033           MOVE.L  A4,A1          A1 = DATA STORE POINTER
000090B4  101A                    3034  MMDI29   MOVE.B  (A2)+,D0
000090B6  1280                    3035           MOVE.B  D0,(A1)
000090B8  1419                    3036           MOVE.B  (A1)+,D2       INSURE DATA STORED
000090BA  B400                    3037           CMP.B   D0,D2
000090BC  6600 0196               3038           BNE     MM90
000090C0  51C9 FFF2               3039           DBRA    D1,MMDI29
000090C4  608C                    3040           BRA     MMDI22
000090C6                          3041  
000090C6  6100 07E2               3042  MMDI30   BSR     FIXBUF
000090CA  1CFC 0020               3043  MMDI44   MOVE.B  #BLANK,(A6)+   SPACES
000090CE  51CF FFFA               3044           DBRA    D7,MMDI44
000090D2                          3045  
000090D2  1D7C 0058 FFFF          3046           MOVE.B  #'X',-1(A6)    X UNDER ERROR
000090D8  1CFC 003F               3047           MOVE.B  #'?',(A6)+     ? ALLOW REINPUT
000090DC  6100 075E               3048           BSR     OUTPUT
000090E0  6086                    3049           BRA     MMDI31
000090E2                          3050  
000090E2                          3051  
000090E2                          3052  MMCMD    DS      0              "MM" Command -Memory Modify-
000090E2  41FA EFD2               3053           LEA     SYNTAX(PC),A0  A0=ERROR RETURN
000090E6  6100 05BE               3054           BSR     FNEXTF
000090EA  6100 F9C0               3055           BSR     GETA
000090EE  2840                    3056           MOVE.L  D0,A4          A4= ADDRESS OF DATA
000090F0  7C01                    3057           MOVEQ   #1,D6          SIZE = BYTE
000090F2  4285                    3058           CLR.L   D5             NO OVERRIDE
000090F4                          3059  
000090F4  BDCD                    3060  MM05     CMP.L   A5,A6
000090F6  6566                    3061           BCS.S   MM10           AT END OF BUFFER
000090F8                          3062  
000090F8                          3063  * LOOK FOR ;OPTIONS
000090F8  101D                    3064           MOVE.B  (A5)+,D0
000090FA  0C00 003B               3065           CMPI.B  #';',D0
000090FE  66F4                    3066           BNE     MM05           IGNORE NOT ;
00009100                          3067  
00009100  101D                    3068           MOVE.B  (A5)+,D0       GET NEXT CHAR
00009102  0C00 0044               3069           CMPI.B  #'D',D0
00009106  660A                    3070           BNE.S   MM045
00009108                          3071  
00009108  0C1D 0049               3072           CMPI.B  #'I',(A5)+     DISSAMBLY OPTION
0000910C  66E6                    3073           BNE     MM05
0000910E  6000 FF38               3074           BRA     MMDI
00009112                          3075  
00009112  0C00 0057               3076  MM045    CMPI.B  #'W',D0
00009116  6742                    3077           BEQ.S   MM065          ;W   D6=2
00009118                          3078  
00009118  0C00 004C               3079           CMPI.B  #'L',D0
0000911C  6608                    3080           BNE.S   MM054
0000911E  1C3C 0004               3081           MOVE.B  #4,D6          ;L   D6=4
00009122  4205                    3082           CLR.B   D5             RESET BYTE OVERRIDE
00009124  60CE                    3083           BRA     MM05
00009126                          3084  
00009126  0C00 004E               3085  MM054    CMPI.B  #'N',D0
0000912A  6606                    3086           BNE.S   MM056
0000912C  0045 8000               3087           ORI.W   #$8000,D5      ;N  D5=$8000
00009130  60C2                    3088           BRA     MM05
00009132                          3089  
00009132  0C00 004F               3090  MM056    CMPI.B  #'O',D0
00009136  6608                    3091           BNE.S   MM058
00009138  200C                    3092           MOVE.L  A4,D0          ;O
0000913A  0000 0001               3093           ORI.B   #1,D0          FORCE ODD ADDRESS
0000913E  600E                    3094           BRA.S   MM060
00009140                          3095  
00009140  0C00 0056               3096  MM058    CMPI.B  #'V',D0
00009144  6600 EF70               3097           BNE     SYNTAX         ERROR
00009148  200C                    3098           MOVE.L  A4,D0          ;V
0000914A  0200 00FE               3099           ANDI.B  #$FE,D0        FORCE EVEN ADDRESS
0000914E  2840                    3100  MM060    MOVE.L  D0,A4
00009150  0005 0080               3101           ORI.B   #$80,D5        BYTE OVERRIDE
00009154  1C3C 0002               3102  MM064    MOVE.B  #2,D6          SIZE = WORD (2 BYTES)
00009158  609A                    3103           BRA     MM05
0000915A                          3104  
0000915A  4205                    3105  MM065    CLR.B   D5             RESET BYTE OVERRIDE
0000915C  60F6                    3106           BRA     MM064
0000915E                          3107  
0000915E                          3108  * FORMAT ADDRESS FOR PRINTING
0000915E  200C                    3109  MM10     MOVE.L  A4,D0
00009160  0C06 0001               3110           CMPI.B  #1,D6
00009164  6708                    3111           BEQ.S   MM11           "BYTE"
00009166  4A05                    3112           TST.B   D5
00009168  6B04                    3113           BMI.S   MM11           BYTE OVERRIDE
0000916A  6100 0558               3114           BSR     CKWADR         CHK ALLIGNMENT
0000916E  6100 055A               3115  MM11     BSR     CKADDR         *
00009172  6100 0736               3116           BSR     FIXBUF
00009176  6100 048E               3117           BSR     FRELADDR       FORM RELATIVE ADDRESS
0000917A  1CFC 0020               3118           MOVE.B  #BLANK,(A6)+   SPACE
0000917E                          3119  
0000917E  4A45                    3120           TST.W   D5
00009180  6B2C                    3121           BMI.S   MM18           NON-VERIFY (DON'T READ MEMORY)
00009182                          3122  
00009182                          3123  * READ DATA FROM MEMORY & FORMAT IT
00009182  4A05                    3124           TST.B   D5
00009184  6B0C                    3125           BMI.S   MM12           BYTE OVERRIDE
00009186                          3126  
00009186  0C06 0002               3127           CMPI.B  #2,D6
0000918A  6710                    3128           BEQ.S   MM14           WORD
0000918C  0C06 0004               3129           CMPI.B  #4,D6
00009190  6714                    3130           BEQ.S   MM16           LONG WORD
00009192                          3131  
00009192                          3132  * BYTE
00009192                          3133  MM12
00009192  1E14                    3134           MOVE.B  (A4),D7        D7 = DATA READ
00009194  2007                    3135           MOVE.L  D7,D0
00009196  6100 0452               3136           BSR     PNT2HX         FORMAT BYTE
0000919A  6012                    3137           BRA.S   MM18
0000919C                          3138  
0000919C                          3139  * WORD
0000919C                          3140  MM14
0000919C  3E14                    3141           MOVE.W  (A4),D7
0000919E  2007                    3142           MOVE.L  D7,D0
000091A0  6100 0440               3143           BSR     PNT4HX         FORMAT WORD
000091A4  6008                    3144           BRA.S   MM18
000091A6                          3145  
000091A6                          3146  * LONG WORD
000091A6                          3147  MM16
000091A6  2E14                    3148           MOVE.L  (A4),D7
000091A8  2007                    3149           MOVE.L  D7,D0
000091AA  6100 0428               3150           BSR     PNT8HX         FORMAT LONG WORD
000091AE                          3151  
000091AE  1CFC 0020               3152  MM18     MOVE.B  #BLANK,(A6)+   SPACE
000091B2  1CFC 003F               3153           MOVE.B  #'?',(A6)+
000091B6  6100 0684               3154           BSR     OUTPUT
000091BA                          3155  
000091BA                          3156  * READ USER INPUT
000091BA                          3157  *  [DATA] (CR)   NEXT
000091BA                          3158  *           ^    LAST
000091BA                          3159  *           =    SAME
000091BA                          3160  *           .    EXIT
000091BA                          3161  
000091BA  6100 06EE               3162           BSR     FIXBUF
000091BE  6100 06F2               3163           BSR     PORTIN1
000091C2  BDCD                    3164           CMP.L   A5,A6
000091C4  6700 0082               3165           BEQ     MM50           NO DATA (CR ONLY)
000091C8                          3166  
000091C8  41FA 005A               3167           LEA     MM40(PC),A0    A0 = NO PARAMETER RETURN
000091CC  6100 04D8               3168           BSR     FNEXTF         FIND NEXT FIELD
000091D0                          3169  
000091D0                          3170  * IF = ^ OR .  TAKE ACTION
000091D0  1015                    3171           MOVE.B  (A5),D0
000091D2  0C00 003D               3172           CMPI.B  #'=',D0
000091D6  6786                    3173           BEQ     MM10
000091D8  0C00 002E               3174           CMPI.B  #'.',D0
000091DC  6700 EFE6               3175           BEQ     MACSBUG
000091E0  0C00 005E               3176           CMPI.B  #'^',D0
000091E4  6768                    3177           BEQ.S   MM60
000091E6                          3178  
000091E6  6100 0512               3179           BSR     GETEXP         GET DATA
000091EA  2E00                    3180           MOVE.L  D0,D7          D7=DATA STORED
000091EC                          3181  
000091EC                          3182  * WE HAVE DATA; STORE IT
000091EC  4A05                    3183           TST.B   D5
000091EE  6B0C                    3184           BMI.S   MM22           BYTE OVERRIDE
000091F0                          3185  
000091F0  0C06 0002               3186           CMPI.B  #2,D6
000091F4  6714                    3187           BEQ.S   MM24           WORD
000091F6  0C06 0004               3188           CMPI.B  #4,D6
000091FA  671C                    3189           BEQ.S   MM26           LONG WORD
000091FC                          3190  
000091FC                          3191  * BYTE
000091FC                          3192  MM22
000091FC  1880                    3193           MOVE.B  D0,(A4)        STORE DATA
000091FE  4A45                    3194           TST.W   D5
00009200  6B22                    3195           BMI.S   MM40           NO-VERIFY
00009202  1014                    3196           MOVE.B  (A4),D0
00009204  B007                    3197           CMP.B   D7,D0
00009206  664C                    3198           BNE.S   MM90           NO MATCH
00009208  601A                    3199           BRA.S   MM40
0000920A                          3200  
0000920A                          3201  * WORD
0000920A                          3202  MM24
0000920A  3880                    3203           MOVE.W  D0,(A4)        STORE
0000920C  4A45                    3204           TST.W   D5
0000920E  6B14                    3205           BMI.S   MM40           DO NOT VERIFY
00009210  3014                    3206           MOVE.W  (A4),D0
00009212  B047                    3207           CMP.W   D7,D0
00009214  663E                    3208           BNE.S   MM90           NO MATCH
00009216  600C                    3209           BRA.S   MM40
00009218                          3210  
00009218                          3211  * LONG WORD
00009218                          3212  MM26
00009218  2880                    3213           MOVE.L  D0,(A4)
0000921A  4A45                    3214           TST.W   D5
0000921C  6B06                    3215           BMI.S   MM40           DO NOT VERIFY
0000921E  2014                    3216           MOVE.L  (A4),D0
00009220  B087                    3217           CMP.L   D7,D0
00009222  6630                    3218           BNE.S   MM90           NO MATCH
00009224                          3219  
00009224                          3220  * LOOK FOR  . = ^
00009224  1015                    3221  MM40     MOVE.B  (A5),D0
00009226  0C00 002E               3222           CMPI.B  #'.',D0
0000922A  6700 EF98               3223           BEQ     MACSBUG        DONE
0000922E  0C00 005E               3224           CMPI.B  #'^',D0
00009232  671A                    3225           BEQ.S   MM60           BACKUP ADDRESS
00009234  0C00 003D               3226           CMPI.B  #'=',D0
00009238  6700 FF24               3227           BEQ     MM10           ADDRESS STAYS THE SAME
0000923C  0C00 0020               3228           CMPI.B  #BLANK,D0
00009240  6706                    3229           BEQ.S   MM50
00009242  BDCD                    3230           CMP.L   A5,A6
00009244  6600 EE70               3231           BNE     SYNTAX         ERROR
00009248                          3232  
00009248                          3233  * ADDRESS LOW TO HIGH
00009248  D9C6                    3234  MM50     ADD.L   D6,A4
0000924A  6000 FF12               3235           BRA     MM10
0000924E                          3236  
0000924E                          3237  * ADDRESS HIGH TO LOW
0000924E  99C6                    3238  MM60     SUB.L   D6,A4
00009250  6000 FF0C               3239           BRA     MM10
00009254                          3240  
00009254  4BFA 00B6               3241  MM90     LEA     MSG017(PC),A5  'DATA DID NOT STORE'
00009258  6100 EEAC               3242  MM95     BSR     FIXDCRLF
0000925C  6000 EE4A               3243           BRA     MSG
00009260                          3244  
00009260  4BFA EE35               3245  MM905    LEA     MSGEOT(PC),A5
00009264  60F2                    3246           BRA     MM95
00009266                          3247  
00009266                          3248  
00009266                          3249  
00009266                          3250  
00009266                          3251  *-------------------------------------------------------------------------
00009266                          3252  * File MS        Memory set command                               11/02/81
00009266                          3253  
00009266                          3254  *    ***MS***   MEMORY SET
00009266                          3255  *     FORMAT: MS  ADDRESS HEX HEX,HEX,'ASCII'  ETC.
00009266                          3256  *     COMMAS OR SPACES BETWEEN FIELDS
00009266                          3257  *     FIELDS ARE SIZE ADJUSTED (STORES UP TO 4 BYTES)
00009266                          3258  *     ASCII ENCLOSED IN SINGLE QUOTES-ANY LENGTH
00009266                          3259  
00009266  41FA EE4E               3260  MSCMD    LEA     SYNTAX(PC),A0  IF NO PARAMETERS
0000926A  6100 043A               3261           BSR     FNEXTF         FIND NEXT FIELD
0000926E  6100 F83C               3262           BSR     GETA           GET ADDRESS
00009272  6100 0456               3263           BSR     CKADDR         CHECK VALID ADDRESS
00009276                          3264  
00009276  2240                    3265           MOVE.L  D0,A1          A1=START (OPEN) ADDRESS
00009278  41FA EF4A               3266  SETM1    LEA     MACSBUG(PC),A0 IF NO PARAMTER
0000927C  6100 0428               3267           BSR     FNEXTF         FIND NEXT FIELD
00009280  284D                    3268           MOVE.L  A5,A4          SAVE ADDRESS OF PARAMTER
00009282  1015                    3269           MOVE.B  (A5),D0        CHECK OUT NEXT CHARACTER
00009284  0C00 0027               3270           CMPI.B  #$27,D0        SEE IF IT IS QUOTE MARK
00009288  6730                    3271           BEQ.S   SETM5          SPECIAL ROUTINE
0000928A  0C00 004E               3272           CMPI.B  #'N',D0        SEE IF NEXT LINE FEATURE
0000928E  674E                    3273           BEQ.S   SETM7
00009290  6100 0496               3274           BSR     GETNUMA        GET THE DATA
00009294  2649                    3275           MOVE.L  A1,A3          ADDRESS
00009296  220D                    3276           MOVE.L  A5,D1          COMPUTE BYTES OF DATA
00009298  928C                    3277           SUB.L   A4,D1          LEN=END-START
0000929A  E281                    3278           ASR.L   #1,D1          BYTES=CHAR/2
0000929C  6402                    3279           BCC.S   SETM3          TAKE CARE OF ODD CHARACTER
0000929E  5281                    3280           ADDQ.L  #1,D1          WHOLE NUMBER OF BYTES
000092A0  2401                    3281  SETM3    MOVE.L  D1,D2          D1 SCANS DOWN
000092A2  5382                    3282           SUBQ.L  #1,D2          KNOCK IT DOWN TO INDEX
000092A4  1780 2000               3283           MOVE.B  D0,0(A3,D2)    INDEXED BECAUSE BACKWARD
000092A8                          3284  
000092A8  1633 2000               3285           MOVE.B  0(A3,D2),D3    REREAD TO CHECK IF STORED OK
000092AC                          3286  
000092AC  B600                    3287           CMP.B   D0,D3          ARE SAME?
000092AE  6622                    3288           BNE.S   SETME          'DATA DID NOT STORE'
000092B0                          3289  
000092B0  E080                    3290           ASR.L   #8,D0          SHIFT ONE BYTE
000092B2  5289                    3291           ADDQ.L  #1,A1          BUMP ADDRESS
000092B4  5381                    3292           SUBQ.L  #1,D1
000092B6  66E8                    3293           BNE     SETM3
000092B8  60BE                    3294           BRA.S   SETM1          GO DO NEXT DATA
000092BA                          3295  
000092BA                          3296  *  DATA IN IN ASCII STRING
000092BA  528D                    3297  SETM5    ADDQ.L  #1,A5          GET PAST QUOTE MARK
000092BC  BBCE                    3298  SETM6    CMP.L   A6,A5          SEE IF END OF BUFFER
000092BE  6C00 EF04               3299           BGE     MACSBUG
000092C2  101D                    3300           MOVE.B  (A5)+,D0       GRAB CHARACTER
000092C4  0C00 0027               3301           CMPI.B  #$27,D0        SEE IF QUOTE MARK
000092C8  67AE                    3302           BEQ.S   SETM1          IF SO-END OF STRING
000092CA  1280                    3303           MOVE.B  D0,(A1)        SAVE DATA
000092CC                          3304  
000092CC  1219                    3305           MOVE.B  (A1)+,D1       REREAD FOR CHECK
000092CE                          3306  
000092CE  B001                    3307           CMP.B   D1,D0          SEE IF SAME
000092D0  67EA                    3308           BEQ     SETM6
000092D2  4BFA 0038               3309  SETME    LEA     MSG017(PC),A5  'DATA DID NOT STORE'
000092D6  6100 EE2E               3310           BSR     FIXDCRLF
000092DA  6000 EDCC               3311           BRA     MSG
000092DE                          3312  
000092DE  6100 05CA               3313  SETM7    BSR     FIXBUF         DISPLAY CURRENT ADDRESS
000092E2  2009                    3314           MOVE.L  A1,D0
000092E4  6100 02EE               3315           BSR     PNT8HX         PUT ADDRESS IN BUFFER
000092E8  2CFC 20203F20           3316           MOVE.L  #'  ? ',(A6)+  PROMPT
000092EE  6100 054C               3317           BSR     OUTPUT         DUMP BUFFER WITH NO LF CR
000092F2  6100 05B6               3318           BSR     FIXBUF         GET READY FOR INPUT
000092F6  1AFC 0020               3319           MOVE.B  #BLANK,(A5)+   ADVANCE IN BUFFER
000092FA  2C4D                    3320           MOVE.L  A5,A6          BECAUSE OF SNAFU IN FINDNP
000092FC  6100 05B4               3321           BSR     PORTIN1        INPUT FROM CONSOLE
00009300  1025                    3322           MOVE.B  -(A5),D0       JUST BACK UP IN BUFFER
00009302  BBCE                    3323           CMP.L   A6,A5
00009304  6700 EEBE               3324           BEQ     MACSBUG
00009308  6000 FF6E               3325           BRA     SETM1          DO DECODE IT
0000930C                          3326  
0000930C= 44 41 54 41 20 44 49    3327  MSG017   DC.B    'DATA DID NOT STORE',CR,LF,EOT
          44 20 4E 4F 54 20 53  
          54 4F 52 45 0D 0A 04  
00009321= 00                      3330           DC.B    0              PAD BYTE
00009322                          3331  
00009322                          3332  
00009322                          3333  *-------------------------------------------------------------------------
00009322                          3334  * File MTSETUP   MTSETUP memory test setup                        11/02/81
00009322                          3335  
00009322                          3336  *
00009322                          3337  * SET UP PARMS FOR BLOCK TEST AND BLOCK INITIALIZE
00009322                          3338  *
00009322                          3339  
00009322                          3340  MTSETUP  DS      0
00009322  21CF 04D6               3341           MOVE.L  A7,TEMP        STACK FOR EXCEPTION RETURN
00009326  41FA ED8E               3342           LEA     SYNTAX(PC),A0  WHERE TO GO IF NO PARAMETERS
0000932A  6100 037A               3343           BSR     FNEXTF         FIND NEXT FIELD
0000932E  6100 F77C               3344           BSR     GETA           GET ADDR1
00009332  6100 0390               3345           BSR     CKWADR         CHECK WORD BOUNDRY ADDRESS
00009336  2640                    3346           MOVE.L  D0,A3          SAVE STARTING ADDRESS
00009338                          3347  
00009338  41FA ED7C               3348           LEA     SYNTAX(PC),A0  SET UP TO TRY "TO" ADDRESS
0000933C  6100 0368               3349           BSR     FNEXTF         *
00009340  6100 F76A               3350           BSR     GETA           GET ADDR2
00009344  6100 037E               3351           BSR     CKWADR
00009348  2240                    3352           MOVE.L  D0,A1          A1 = END ADDRESS?
0000934A  204B                    3353           MOVE.L  A3,A0          A0 = STARTING ADDRESS
0000934C  6100 ED76               3354           BSR     P2PHY          DISPLAY TWO ADDRESSES
00009350  B3C8                    3355           CMP.L   A0,A1
00009352  6500 ED62               3356           BCS     SYNTAX         END ADDR TOO SMALL
00009356  5489                    3357           ADDQ.L  #2,A1          ADJUST END ADDR
00009358  4E75                    3358           RTS
0000935A                          3359  
0000935A                          3360  
0000935A                          3361  *-------------------------------------------------------------------------
0000935A                          3362  * File OF        OF & PERIOD Command                              12/18/81
0000935A                          3363  
0000935A                          3364  * .*  HANDLER
0000935A                          3365  *   GET TWO CHARACTERS FOLLOWING PERIOD
0000935A                          3366  
0000935A  E149                    3367  PERCMD   LSL.W   #8,D1
0000935C  1215                    3368           MOVE.B  (A5),D1        D1 = 2ND,3RD CHARACTERS
0000935E  538D                    3369           SUBQ.L  #1,A5          A5 = POINTER TO 2ND CHAR  (1ST REAL CHARACTER)
00009360                          3370  
00009360  41FA 0030               3371           LEA     REGTBL(PC),A0
00009364  4287                    3372  PER4     CLR.L   D7
00009366  3E18                    3373           MOVE.W  (A0)+,D7       SAVE FIRST WORD FOR END OF TABLE TEST
00009368  3018                    3374           MOVE.W  (A0)+,D0       GET REAL REGISTER ID INTO D0
0000936A  0C47 FFFF               3375           CMPI.W  #$FFFF,D7      ARE WE AT THE END OF THE TABLE?
0000936E  6700 ED2E               3376           BEQ     WHAT           YES...THEN WE DIDNT FIND IT
00009372                          3377  
00009372  0C00 0040               3378           CMPI.B  #'@',D0
00009376  660E                    3379           BNE.S   PER3           NOT @
00009378                          3380  
00009378                          3381  * THIRD CHAR MUST BE NUMERIC 0 - 7
00009378  1001                    3382           MOVE.B  D1,D0          ALLEGED DIGIT
0000937A  0C00 0030               3383           CMPI.B  #'0',D0
0000937E  6BE4                    3384           BMI     PER4           NOT A DIGIT
00009380  0C00 0038               3385           CMPI.B  #'8',D0
00009384  6ADE                    3386           BPL     PER4           NOT A DIGIT
00009386                          3387  
00009386  B041                    3388  PER3     CMP.W   D1,D0
00009388  66DA                    3389           BNE     PER4           MISS-MATCH
0000938A                          3390  
0000938A                          3391  *******************************************************************
0000938A                          3392  *        AT THIS TIME WE HAVE FOUND THE ENTRY IN THE "REG TABLE"  *
0000938A                          3393  *        WE NOW NEED TO EXTRACT AND USE THE OFFSET                *
0000938A                          3394  *******************************************************************
0000938A                          3395  
0000938A  41FA EC74               3396           LEA     FIRST(PC),A0   A0 = Start of VERSAbug RO
0000938E  D1C7                    3397           ADD.L   D7,A0          Add offset
00009390  4ED0                    3398           JMP     (A0)           Now go to the calculated location
00009392                          3399  
00009392                          3400  
00009392                          3401  ***************
00009392  =00009392               3402  REGTBL   EQU  *
00009392                          3403  ***************
00009392                          3404  
00009392= 13D4                    3405           DC.W    SETA7-FIRST    Stack Register Routine
00009394= 4137                    3406           DC.W    'A7'           *
00009396                          3407  
00009396= 13C8                    3408           DC.W    SETPC-FIRST    Program Counter Routine
00009398= 5043                    3409           DC.W    'PC'           *
0000939A                          3410  
0000939A= 13CE                    3411           DC.W    SETSR-FIRST    Status Register Routine
0000939C= 5352                    3412           DC.W    'SR'           *
0000939E                          3413  
0000939E= 13E4                    3414           DC.W    SETUS-FIRST    User Stack Routine
000093A0= 5553                    3415           DC.W    'US'           *
000093A2                          3416  
000093A2= 13DE                    3417           DC.W    SETSS-FIRST    System Stack Routine
000093A4= 5353                    3418           DC.W    'SS'           *
000093A6                          3419  
000093A6= 13BC                    3420           DC.W    SETD-FIRST     Data Register Routine
000093A8= 4440                    3421           DC.W    'D@'           *
000093AA                          3422  
000093AA= 13C2                    3423           DC.W    SETA-FIRST     Address Register Routine
000093AC= 4140                    3424           DC.W    'A@'           *
000093AE                          3425  
000093AE= 149E                    3426           DC.W    PNTCLSA-FIRST  All Address Registers Routine
000093B0= 4120                    3427           DC.W    'A '           *
000093B2                          3428  
000093B2= 1494                    3429           DC.W    PNTCLSD-FIRST  All Data Registers Routine
000093B4= 4420                    3430           DC.W    'D '           *
000093B6                          3431  
000093B6= 13EA                    3432           DC.W    SETRN-FIRST    All Registers Routine
000093B8= 5240                    3433           DC.W    'R@'           *
000093BA                          3434  
000093BA= FFFF                    3435           DC.W    $FFFF          END OF TABLE
000093BC                          3436  
000093BC                          3437  *    PRINT & INPUT REGISTER ROUTINES
000093BC                          3438  
000093BC  49F8 0408               3439  SETD     LEA     REGS,A4        START OF REGISTERS
000093C0  6034                    3440           BRA.S   SETR
000093C2                          3441  
000093C2  49F8 0428               3442  SETA     LEA     REGS+32,A4     OFFSET IN REGISTER TABLE
000093C6  602E                    3443           BRA.S   SETR
000093C8                          3444  
000093C8  49F8 0400               3445  SETPC    LEA     REGPC,A4       WHERE PC IS
000093CC  6030                    3446           BRA.S   SETR0
000093CE                          3447  
000093CE  49F8 0404               3448  SETSR    LEA     REGSR,A4       WHERE SR IS
000093D2  602A                    3449           BRA.S   SETR0
000093D4                          3450  
000093D4  2238 0404               3451  SETA7    MOVE.L  REGSR,D1       GET CONDITION CODES
000093D8  0241 2000               3452           ANDI.W  #$2000,D1      CHECK SUPERVISOR BIT
000093DC  6706                    3453           BEQ.S   SETUS
000093DE  49F8 0444               3454  SETSS    LEA     REGA7,A4       WHERE SUPERVISOR STACK IS
000093E2  601A                    3455           BRA.S   SETR0
000093E4                          3456  
000093E4  49F8 0448               3457  SETUS    LEA     REGUS,A4       USER STACK
000093E8  6014                    3458           BRA.S   SETR0
000093EA                          3459  
000093EA  49F8 044C               3460  SETRN    LEA     OFFSET,A4      SET OFFSET
000093EE  0C01 0037               3461           CMPI.B  #'7',D1
000093F2  6700 ECC2               3462           BEQ     SYNTAX         NOT ALLOWED TO CHANGE A7
000093F6                          3463  
000093F6                          3464  
000093F6                          3465  *  ROUTINE TO ENTER DATA FOR A SINGLE REGISTER
000093F6                          3466  *   A5-A6 ARE COMMAND BUFFER
000093F6                          3467  *   D0 HAS REGISTER DIGIT A4 HAS CLASS OFFSET
000093F6                          3468  
000093F6  6100 03E0               3469  SETR     BSR     GETHEX         GET REG NUMBER
000093FA  E588                    3470           LSL.L   #2,D0          SHIFT LEFT...MULT BY 4
000093FC  D9C0                    3471           ADD.L   D0,A4          A4 NOW HAS EXACT ADDRESS
000093FE  548D                    3472  SETR0    ADDQ.L  #2,A5          NOW FIND PARAMETERS
00009400  103C 003A               3473           MOVE.B  #':',D0        SEE IF COLON IN COMMAND
00009404  6154                    3474           BSR.S   SCAN
00009406  671E                    3475           BEQ.S   SETR5
00009408                          3476  *SEE IF ANY PARAMER (HEX)
00009408  41FA 0016               3477           LEA     SETR4(PC),A0   WHERE TO GO IF NO PARAMETERS
0000940C  6100 0298               3478           BSR     FNEXTF         FIND NEXT FIELD
00009410                          3479  
00009410  0C00 002E               3480           CMPI.B  #'.',D0
00009414  6706                    3481           BEQ.S   SEMACS         PERIOD; GET OUT
00009416                          3482  
00009416  6100 F694               3483           BSR     GETA           GET ADDRESS VALUE
0000941A  2880                    3484           MOVE.L  D0,(A4)        SAVE NEW VALUE
0000941C  6000 EDA6               3485  SEMACS   BRA     MACSBUG
00009420                          3486  
00009420                          3487  *JUST PRINT IT
00009420                          3488  
00009420  6148                    3489  SETR4    BSR.S   PRINTR         FIX UP TO PRINT
00009422  6000 EC84               3490           BRA     MSG            GO PRINT MESSAGE-GO TO MACSBUG
00009426                          3491  
00009426  6102                    3492  SETR5    BSR.S   SETSR1
00009428  60F2                    3493           BRA     SEMACS
0000942A                          3494  
0000942A  613E                    3495  SETSR1   BSR.S   PRINTR         FIX UP TO PRINT
0000942C  1CFC 0020               3496           MOVE.B  #BLANK,(A6)+   SPACE
00009430  1CFC 003F               3497           MOVE.B  #'?',(A6)+     PROMPT
00009434  1CFC 0020               3498           MOVE.B  #BLANK,(A6)+   SPACE
00009438  6100 0402               3499           BSR     OUTPUT         PRINT IT
0000943C                          3500  
0000943C  6100 046C               3501           BSR     FIXBUF
00009440  6100 0470               3502           BSR     PORTIN1
00009444                          3503  
00009444  41FA 0012               3504           LEA     SETSR15(PC),A0 A0=DEFAULT (NO PARM) ADDRESS
00009448  6100 025C               3505           BSR     FNEXTF         FIND FIELD
0000944C                          3506  
0000944C  0C00 002E               3507           CMPI.B  #'.',D0
00009450  67CA                    3508           BEQ     SEMACS         PERIOD; GET OUT
00009452                          3509  
00009452  6100 F658               3510           BSR     GETA           CONVERT IT
00009456  2880                    3511           MOVE.L  D0,(A4)        STORE NEW DATA
00009458                          3512  
00009458                          3513  SETSR15  DS      0
00009458  4E75                    3514           RTS
0000945A                          3515  
0000945A                          3516  
0000945A                          3517  * SEE IF CHARACTER IS IN BUFFER
0000945A                          3518  
0000945A  204D                    3519  SCAN     MOVE.L  A5,A0          A0 IS WORKING SCANNER
0000945C  B1CE                    3520  SCAN2    CMP.L   A6,A0          SEE IF AT END OF BUFFER
0000945E  6208                    3521           BHI.S   RETURN5
00009460  B010                    3522           CMP.B   (A0),D0        LOOK AT CHARACTER
00009462  6704                    3523           BEQ.S   RETURN5
00009464  5288                    3524           ADDQ.L  #1,A0          GET PAST CHARACTER
00009466  60F4                    3525           BRA.S   SCAN2
00009468  4E75                    3526  RETURN5  RTS
0000946A                          3527  
0000946A                          3528  * ROUTINE TO SET UP TO PRINT REG
0000946A                          3529  
0000946A  6100 043E               3530  PRINTR   BSR     FIXBUF
0000946E                          3531  
0000946E  568E                    3532           ADDQ.L  #3,A6          GET PAST REG NAME (.XX)
00009470  1CFC 003D               3533           MOVE.B  #'=',(A6)+     PUT IN EQUAL SIGN
00009474  2014                    3534           MOVE.L  (A4),D0        GET VALUE
00009476  B9FC 00000404           3535           CMPA.L  #REGSR,A4      SEE IF THIS IS CONDITION CODES
0000947C  6606                    3536           BNE.S   PRINTR2
0000947E  6100 0162               3537           BSR     PNT4HX         JUST PRINT WORD
00009482  4E75                    3538           RTS
00009484                          3539  
00009484  6100 014E               3540  PRINTR2  BSR     PNT8HX         PRINT THE VALUE
00009488  4E75                    3541           RTS
0000948A                          3542  
0000948A                          3543  *
0000948A                          3544  *   PRINT ALL REGISTERS IN A CLASS (A OR D OR R)
0000948A                          3545  *
0000948A                          3546  
0000948A                          3547  OFCMD    DS      0              "OF" Command -Display Offset registers-
0000948A  1E3C 0052               3548  SETO     MOVE.B  #'R',D7
0000948E  47F8 044C               3549           LEA     OFFSET,A3
00009492  6012                    3550           BRA.S   PNTCLSB
00009494                          3551  
00009494  1E3C 0044               3552  PNTCLSD  MOVE.B  #'D',D7        CLASS=DATA
00009498  47F8 0408               3553           LEA     REGS,A3        OFFSET
0000949C  6008                    3554           BRA.S   PNTCLSB
0000949E                          3555  
0000949E  1E3C 0041               3556  PNTCLSA  MOVE.B  #'A',D7        CLASS=ADDRESS
000094A2  47F8 0428               3557           LEA     REGS+32,A3     OFFSET
000094A6  6104                    3558  PNTCLSB  BSR.S   PNTCLS
000094A8  6000 ED1A               3559           BRA     MACSBUG
000094AC                          3560  
000094AC  6100 03FC               3561  PNTCLS   BSR     FIXBUF
000094B0  4286                    3562           CLR.L   D6             REGISTER COUNTER
000094B2  611C                    3563  PNTCLS1  BSR.S   PNTREG         PRINT THE REGISTER
000094B4  0C06 0004               3564           CMPI.B  #4,D6          DISPLAY AFTER 3&7
000094B8  660A                    3565           BNE.S   PNTCLS2
000094BA  6100 0366               3566           BSR     OUT1CR
000094BE  6100 03EA               3567           BSR     FIXBUF
000094C2  60EE                    3568           BRA     PNTCLS1        DO SOME MORE
000094C4                          3569  
000094C4  0C06 0008               3570  PNTCLS2  CMPI.B  #8,D6          AT END?
000094C8  66E8                    3571           BNE     PNTCLS1
000094CA  6100 0356               3572           BSR     OUT1CR         PRINT IT
000094CE  4E75                    3573           RTS
000094D0                          3574  
000094D0                          3575  *  SUBROUTINE TO PRINT REGISTER  X#=01234567.
000094D0                          3576  
000094D0  1CC7                    3577  PNTREG   MOVE.B  D7,(A6)+       CLASS
000094D2  1006                    3578           MOVE.B  D6,D0          REG#
000094D4  6100 011C               3579           BSR     PUTHEX
000094D8  1CFC 003D               3580           MOVE.B  #'=',(A6)+     EQUAL SIGN
000094DC  2006                    3581           MOVE.L  D6,D0          COMPUTE ADDRESS OF REG
000094DE  E588                    3582           LSL.L   #2,D0          MULT BY FOUR
000094E0  D08B                    3583           ADD.L   A3,D0          ADD IN OFFSET
000094E2  2840                    3584           MOVE.L  D0,A4          SET UP TO GET DEFFERED
000094E4  B9FC 00000444           3585           CMPA.L  #REGA7,A4      SEE IF REG A7
000094EA  660E                    3586           BNE.S   PNTREG1
000094EC  2038 0404               3587           MOVE.L  REGSR,D0       GET STATUS REGISTER
000094F0  0240 2000               3588           ANDI.W  #$2000,D0      CHECK SUPERVISOR BIT
000094F4  6604                    3589           BNE.S   PNTREG1
000094F6  49F8 0448               3590           LEA     REGUS,A4       TAKE ADDRESS OF USER STACK
000094FA  2014                    3591  PNTREG1  MOVE.L  (A4),D0        GET REG CONTENT
000094FC  6100 00D6               3592           BSR     PNT8HX         PUT IN BUFFER
00009500  1CFC 0020               3593           MOVE.B  #BLANK,(A6)+   SPACE
00009504  5286                    3594           ADDQ.L  #1,D6          BUMP REG#
00009506  4E75                    3595           RTS
00009508                          3596  
00009508                          3597  
00009508                          3598  
00009508                          3599  *-------------------------------------------------------------------------
00009508                          3600  * File RAMTEST   RAMTEST                                          11/02/81
00009508                          3601  
00009508                          3602  ***********************************************************************
00009508                          3603  * MEMORY TEST SUBROUTINE.                                             *
00009508                          3604  *                                                                     *
00009508                          3605  *        A0=BEGINNING ADDRESS (MUST BE EVEN ADDRESS)                  *
00009508                          3606  *        A1=ENDING ADDRESS+1  (MUST BE EVEN ADDRESS)                  *
00009508                          3607  *        A2=FAILING ADDRESS                                           *
00009508                          3608  *        D0=DATA WRITTEN TO RAM                                       *
00009508                          3609  *        D1=DATA READ FROM RAM                                        *
00009508                          3610  *                                                                     *
00009508                          3611  *        ZERO FLAG IS SET IF TEST IS SUCCESSFUL                       *
00009508                          3612  *           REGISTERS D2,D3,D4 DESTROYED                              *
00009508                          3613  ***********************************************************************
00009508                          3614  
00009508                          3615  *       -1ST TEST-
00009508                          3616  RAMTEST  DS      0
00009508  2608                    3617           MOVE.L  A0,D3          D3 = BEGINNING ADDRESS
0000950A  2443                    3618           MOVE.L  D3,A2          USE A2 AS POINTER IN MEMORY
0000950C  70FE                    3619  WALK3    MOVEQ   #$FE,D0        PREPARE FOR "WALKING BIT" TEST
0000950E                          3620  WALK0
0000950E  3480                    3621           MOVE.W  D0,(A2)        STORE D0 INTO MEMORY
00009510  3212                    3622           MOVE.W  (A2),D1        D1 CONTAINS RAM DATA
00009512  B240                    3623           CMP.W   D0,D1          WRITTEN VS. READ
00009514  6642                    3624           BNE.S   RAMERR         STOP ON ERROR
00009516  E358                    3625           ROL.W   #1,D0          ROLL A ZERO IN A FIELD OF ONES
00009518  65F4                    3626           BCS.S   WALK0          CONTINUE TILL DONE
0000951A                          3627  
0000951A  7001                    3628           MOVEQ   #$00000001,D0  THIS TIME, WALK A 1 THROUGH ZEROS
0000951C                          3629  WALK1
0000951C  3480                    3630           MOVE.W  D0,(A2)        STORE D0 INTO MEMORY
0000951E  3212                    3631           MOVE.W  (A2),D1        D1 CONTAINS RAM DATA
00009520  B240                    3632           CMP.W   D0,D1          WRITTEN VS. READ
00009522  6634                    3633           BNE.S   RAMERR         STOP ON ERROR
00009524  E340                    3634           ASL.W   #1,D0          ROLL A ONE TO THE NEXT POSITION
00009526  64F4                    3635           BCC.S   WALK1          CONTINUE TILL DONE
00009528                          3636  
00009528  45EA 0100               3637           LEA     $0100(A2),A2   GO TO NEXT 256TH POSITION
0000952C  B5C9                    3638           CMP.L   A1,A2          CHECK TO SEE IF DONE
0000952E  6DDC                    3639           BLT.S   WALK3          CONTINUE
00009530                          3640  
00009530                          3641  * -2ND TEST-
00009530  2443                    3642           MOVE.L  D3,A2          SET A2 TO POINT TO START OF MEMORY
00009532  7000                    3643           MOVEQ   #$00000000,D0  CLEAR D0
00009534                          3644  MTCLR
00009534  34C0                    3645           MOVE.W  D0,(A2)+       CLEAR MEMORY
00009536  B5C9                    3646           CMP.L   A1,A2          DONE?
00009538  66FA                    3647           BNE.S   MTCLR          NO... ZERO ALL OF MEMORY
0000953A                          3648  
0000953A  74FF                    3649           MOVEQ   #$FF,D2        SET D2 = FFFF
0000953C                          3650  MTSTOR1
0000953C  3222                    3651           MOVE.W  -(A2),D1       FIRST READ BACK MEMORY
0000953E  B240                    3652           CMP.W   D0,D1          CHK AGAINST WHAT WAS WRITTEN
00009540  6616                    3653           BNE.S   RAMERR         STOP ON ERROR
00009542  3482                    3654           MOVE.W  D2,(A2)        STORE COMPLEMENT
00009544  B5C3                    3655           CMP.L   D3,A2          DONE?
00009546  66F4                    3656           BNE.S   MTSTOR1        NO... COMPLEMENT ALL OF MEMORY
00009548  3002                    3657           MOVE.W  D2,D0          D0=WHAT WAS WRITTEN
0000954A  4642                    3658           NOT.W   D2             SAVE COMPLEMENT FOR LATER
0000954C                          3659  
0000954C                          3660  MTSTOR0
0000954C  3212                    3661           MOVE.W  (A2),D1        READ BACK MEMORY
0000954E  B240                    3662           CMP.W   D0,D1          CHK AGAINST WHAT WAS WRITTEN
00009550  6606                    3663           BNE.S   RAMERR         STOP ON ERROR
00009552  34C2                    3664           MOVE.W  D2,(A2)+       STORE COMPLEMENT
00009554  B5C9                    3665           CMP.L   A1,A2          DONE?
00009556  66F4                    3666           BNE     MTSTOR0        NO...KEEP LOOPING, YES...
00009558                          3667  
00009558  2043                    3668  RAMERR   MOVE.L  D3,A0          RESTORE A0
0000955A  4E75                    3669           RTS                    RETURN
0000955C                          3670  
0000955C                          3671  
0000955C                          3672  
0000955C                          3673  
0000955C                          3674  *-------------------------------------------------------------------------
0000955C                          3675  * File TM        TM  Transparent mode                             12/28/81
0000955C                          3676  
0000955C                          3677  *    TM  [[EXIT CHAR]TRAILING CHAR]
0000955C                          3678  *
0000955C                          3679  *  In transparent mode the terminal is physically connected to the
0000955C                          3680  *  host; at the same time the terminal is watched by TM software
0000955C                          3681  *  for the EXIT character.  When the exit character is transmitted
0000955C                          3682  *  by the terminal it goes directly to the host; and at the same
0000955C                          3683  *  time the TM software reconfigures the hardware.  If a nonnull
0000955C                          3684  *  trailing character is present it is now sent via port 2 to
0000955C                          3685  *  the host.
0000955C                          3686  
0000955C                          3687  *   TRANSPARENT MODE
0000955C                          3688  
0000955C                          3689  *TMCMD    LEA     P2CMD0(PC),A0
0000955C                          3690  *         BSR     FNEXTF         FIND NEXT FIELD
0000955C                          3691  *         MOVE.B  (A5)+,TMCHARS+1 QUIT CHARACTER
0000955C                          3692  *         BSR     FNEXTF         FIND NEXT FIELD
0000955C                          3693  *         MOVE.B  (A5)+,TMCHARS  OPTIONAL TRAILING CHAR
0000955C                          3694  *P2CMD0   MOVE.W  TMCHARS,D7
0000955C                          3695  *         BSR     GETSER1        ADDRESS FOR PORT1 INTO A0
0000955C                          3696  *         LEA     MSG006(PC),A5  "TRANSPARENT MODE"
0000955C                          3697  *         BSR     FIXDCRLF       SET UP FOR MESSAGE
0000955C                          3698  *         MOVE.L  D7,D0          EXIT CHARACTER
0000955C                          3699  *         BSR     PNT2HX         PRINT 2 HEX CHARACTERS
0000955C                          3700  *         MOVE.W  #' =',(A6)+
0000955C                          3701  *         MOVE.B  D7,D0          SEE IF CONTROL CHAR
0000955C                          3702  *         CMPI.B  #BLANK,D0
0000955C                          3703  *         BPL.S   P2CMD01
0000955C                          3704  *         MOVE.L  #' CTL',(A6)+
0000955C                          3705  *         ADDI.B  #64,D0         MAKE IT A PRINTABLE CHARACTER
0000955C                          3706  *P2CMD01  MOVE.B  #BLANK,(A6)+
0000955C                          3707  *         MOVE.B  D0,(A6)+
0000955C                          3708  *         MOVE.W  #$0D0A,(A6)+
0000955C                          3709  *         BSR     OUT1CR         GO PRINT BUFFER WITH CRLF
0000955C                          3710  *
0000955C                          3711  *         MOVE.B  MD1CON.L,D0    PROGRAM ACIA FOR TRANSPARENT MODE
0000955C                          3712  *         ANDI.B  #$9F,D0
0000955C                          3713  *         ORI.B   #$40,D0        FORCE RTS HIGH
0000955C                          3714  *         MOVE.B  D0,(A0)
0000955C                          3715  *P2CMD2   BTST.B  #$0,(A0)      READ STATUS
0000955C                          3716  *         BEQ.S   P2CMD2
0000955C                          3717  *         MOVE.B  2(A0),D0       RECEIVE CHAR FROM PORT 1
0000955C                          3718  *         ANDI.B  #$7F,D0
0000955C                          3719  *         CMP.B   D7,D0          SEE IF QUIT CHARACTER (CTL A USUALLY)
0000955C                          3720  *         BNE.S   P2CMD2
0000955C                          3721  *         MOVE.B  MD1CON.L,D0    REPROGRAM FOR NON-TRANSPARENT
0000955C                          3722  *         ANDI.B  #$9F,D0
0000955C                          3723  *         MOVE.B  D0,(A0)
0000955C                          3724  *
0000955C                          3725  *         ASR.W   #8,D7
0000955C                          3726  *         TST.B   D7
0000955C                          3727  *         BEQ.S   P2CMD6
0000955C                          3728  ** SPECIAL SECOND CHAR TO HOST SEQUENCE
0000955C                          3729  *         MOVE.L  #DELAYC1,D0
0000955C                          3730  *P2CMD4   SUBQ.L  #1,D0          DELAY; ALLOW HOST TO SYNC
0000955C                          3731  *         BNE.S   P2CMD4
0000955C                          3732  *         BSR     GETSER2
0000955C                          3733  *         MOVE.B  D7,2(A0)       SEND CHAR
0000955C                          3734  *P2CMD6   BRA     MACSBUG
0000955C                          3735  *
0000955C                          3736  *MSG006   DC.B    '*TRANSPARENT* EXIT=$',EOT
0000955C                          3737  *         DC.B    0              PAD BYTE
0000955C                          3738  
0000955C                          3739  
0000955C                          3740  *-------------------------------------------------------------------------
0000955C                          3741  * File W         Software Abort, Hex print routines               06/05/82
0000955C                          3742  
0000955C                          3743  *
0000955C                          3744  *   HANDLE THE ABORT BUTTON
0000955C                          3745  *
0000955C  46FC 2700               3746  ABORTB   MOVE.W  #$2700,SR
00009560                          3747m          SAVEREGS
00009560  21CF 0444               3748m       MOVE.L  A7,REGA7       SAVE STACK POINTER
00009564  4FFA 000A               3749m       LEA     SV_32(PC),A7    A7 = RETURN ADDRESS (FOR CALL TO SAVE)
00009568  21CF 04D6               3750m       MOVE.L  A7,TEMP        TEMP = RETURN ADDRESS
0000956C  6000 F690               3751m       BRA     SAVE           BSR WITHOUT USING STACK
00009570                          3752m SV_32  DS      0
00009570                          3753m       ENDM
00009570  4BFA 0012               3754           LEA     MSG012(PC),A5  'SOFTWARE ABORT'
00009574                          3755  
00009574  6100 EB90               3756           BSR     FIXDCRLF       MOVE MESSAGE TO BUFFER
00009578  6100 02C2               3757  EVECT4   BSR     OUTPUT         MSG TO PORT1
0000957C  6100 F2F8               3758  ABORT335 BSR     TDISPLY        DISPLAY REGISTERS
00009580  6000 EC42               3759           BRA     MACSBUG
00009584                          3760  
00009584= 0A 0A 53 4F 46 54 57    3761  MSG012   DC.B    LF,LF,'SOFTWARE ABORT',CR,LF,EOT
          41 52 45 20 41 42 4F  
          52 54 0D 0A 04        
00009597= 00                      3764           DC.B    0              PAD BYTE
00009598                          3765  
00009598  21FC 3F3F3F3F 0030      3766  ABORTE MOVE.L    #'????',$30    UNKNOWN INTERRUPT
000095A0                          3767  
000095A0                          3768  
000095A0                          3769  *    SAVE REGISTERS AND PRINT VECTOR MSG
000095A0                          3770  *
000095A0                          3771m EVECTL   SAVEREGS
000095A0  21CF 0444               3772m       MOVE.L  A7,REGA7       SAVE STACK POINTER
000095A4  4FFA 000A               3773m       LEA     SV_33(PC),A7    A7 = RETURN ADDRESS (FOR CALL TO SAVE)
000095A8  21CF 04D6               3774m       MOVE.L  A7,TEMP        TEMP = RETURN ADDRESS
000095AC  6000 F650               3775m       BRA     SAVE           BSR WITHOUT USING STACK
000095B0                          3776m SV_33  DS      0
000095B0                          3777m       ENDM
000095B0  6100 02F8               3778  EVECT2   BSR     FIXBUF         PRINT MESSAGE "XXXX TRAP ERROR"
000095B4  3CFC 0D0A               3779           MOVE.W  #$0D0A,(A6)+
000095B8  2CF8 0030               3780           MOVE.L  AV12,(A6)+     TYPE OF ERROR
000095BC  4BFA 0008               3781           LEA     MSG010(PC),A5  'TRAP ERROR'
000095C0  6100 EB34               3782           BSR     FIXDADD
000095C4  60B2                    3783           BRA     EVECT4
000095C6                          3784  
000095C6= 20 54 52 41 50 20 45    3785  MSG010   DC.B    ' TRAP ERROR',CR,LF,EOT
          52 52 4F 52 0D 0A 04  
000095D4                          3787  
000095D4                          3788  
000095D4                          3789  
000095D4                          3790  
000095D4                          3791  *
000095D4                          3792  *  PRINT HEX ROUTINES
000095D4                          3793  *
000095D4                          3794  *
000095D4                          3795  * PRINT 8 HEX CHARACTERS
000095D4                          3796  *
000095D4                          3797  *  D0,D1,D2 DESTROYED
000095D4                          3798  *
000095D4  4840                    3799  PNT8HX   SWAP    D0             FLIP REG HALVES
000095D6  610A                    3800           BSR.S   PNT4HX         DO TOP WORD
000095D8  4840                    3801           SWAP    D0             NOW DO LOWER WORD
000095DA  6006                    3802           BRA.S   PNT4HX
000095DC                          3803  * PRINT 6 HEX CHARACTERS
000095DC  4840                    3804  PNT6HX   SWAP    D0             FLIP REGISTER HALVES
000095DE  610A                    3805           BSR.S   PNT2HX
000095E0  4840                    3806           SWAP    D0             FLIP BACK REG HALVES
000095E2                          3807  * PRINT 4 HEX CHARACTERS IN D0.W
000095E2  3200                    3808  PNT4HX   MOVE.W  D0,D1          SAVE IN TEMP
000095E4  E058                    3809           ROR.W   #8,D0          GET BITS 15-8 INTO LOWER BYTE
000095E6  6102                    3810           BSR.S   PNT2HX         PRINT IT
000095E8  3001                    3811           MOVE.W  D1,D0          PULL IT BACK
000095EA                          3812  * PRINT 2 HEX CHARACTERS IN D0.B
000095EA  3400                    3813  PNT2HX   MOVE.W  D0,D2          SAVE IN TEMP REG
000095EC  E850                    3814           ROXR.W  #4,D0          FORM UPPER NIBBLE
000095EE  6102                    3815           BSR.S   PUTHEX         PUT ASCII INTO PRINT BUFFER
000095F0  3002                    3816           MOVE.W  D2,D0          GET BACK FROM TEMP
000095F2                          3817  * CONVERT D0.NIBBLE TO HEX & PUT IT IN PRINT BUFFER
000095F2                          3818  *
000095F2  0200 000F               3819  PUTHEX   ANDI.B  #$0F,D0        SAVE LOWER NIBBLE
000095F6  0000 0030               3820           ORI.B   #$30,D0        CONVERT TO ASCII
000095FA  0C00 0039               3821           CMPI.B  #$39,D0        SEE IF IT IS>9
000095FE  6F02                    3822           BLE.S   SAVHEX
00009600  5E40                    3823           ADD     #7,D0          ADD TO MAKE 10=>A
00009602  1CC0                    3824  SAVHEX   MOVE.B  D0,(A6)+       PUT IT IN PRINT BUFFER
00009604  4E75                    3825           RTS
00009606                          3826  
00009606                          3827  * FORMAT RELATIVE ADDRESS  AAAAAA+Rn
00009606                          3828  *        ENTER     D0 = VALUE
00009606                          3829  *                  A6 = STORE POINTER
00009606                          3830  *
00009606  48E7 4780               3831  FRELADDR MOVEM.L D1/D5-D7/A0,-(A7)
0000960A  41F8 044C               3832           LEA     OFFSET,A0
0000960E  7EFF                    3833           MOVEQ   #-1,D7         D7 = DIFF. BEST FIT
00009610  4286                    3834           CLR.L   D6             D6 = OFFSET POSITION
00009612                          3835  
00009612  2200                    3836  FREL10   MOVE.L  D0,D1
00009614  4A90                    3837           TST.L   (A0)
00009616  670C                    3838           BEQ.S   FREL15         ZERO OFFSET
00009618  9290                    3839           SUB.L   (A0),D1        D1 = DIFF.
0000961A  6B08                    3840           BMI.S   FREL15         NO FIT
0000961C                          3841  
0000961C  B287                    3842           CMP.L   D7,D1
0000961E  6404                    3843           BCC.S   FREL15         OLD FIT BETTER
00009620                          3844  
00009620  2E01                    3845           MOVE.L  D1,D7          D7 = NEW BEST FIT
00009622  2A06                    3846           MOVE.L  D6,D5          D5 = POSITION
00009624                          3847  
00009624  5888                    3848  FREL15   ADDQ.L  #4,A0
00009626  5286                    3849           ADDQ.L  #1,D6
00009628  0C46 0008               3850           CMPI.W  #8,D6
0000962C  66E4                    3851           BNE     FREL10         MORE OFFSETS TO CHECK
0000962E                          3852  
0000962E  4A87                    3853           TST.L   D7
00009630  6B1C                    3854           BMI.S   FREL25         NO FIT
00009632  4A46                    3855           TST     D6
00009634  6606                    3856           BNE.S   FREL20
00009636  4AB8 044C               3857           TST.L   OFFSET
0000963A  6712                    3858           BEQ.S   FREL25         R0 = 000000; NO FIT
0000963C                          3859  
0000963C  2007                    3860  FREL20   MOVE.L  D7,D0
0000963E  619C                    3861           BSR     PNT6HX         FORMAT OFFSET
00009640  1CFC 002B               3862           MOVE.B  #'+',(A6)+     +
00009644  1CFC 0052               3863           MOVE.B  #'R',(A6)+     R
00009648  0605 0030               3864           ADDI.B  #'0',D5        MAKE ASCII
0000964C  600A                    3865           BRA.S   FREL30
0000964E                          3866  
0000964E  618C                    3867  FREL25   BSR     PNT6HX         FORMAT ADDRESS AS IS
00009650  1A3C 0020               3868           MOVE.B  #BLANK,D5
00009654  1CC5                    3869           MOVE.B  D5,(A6)+       THREE SPACES FOR ALIGNMENT
00009656  1CC5                    3870           MOVE.B  D5,(A6)+
00009658  1CC5                    3871  FREL30   MOVE.B  D5,(A6)+
0000965A                          3872  
0000965A  4CDF 01E2               3873           MOVEM.L (A7)+,D1/D5-D7/A0
0000965E  4E75                    3874           RTS
00009660                          3875  
00009660                          3876  *
00009660                          3877  *
00009660                          3878  *   PRINT HEX (ZERO SURPRESS)
00009660                          3879  *
00009660  4284                    3880  PNTZHX   CLR.L   D4             IS ZERO WHEN SURPRESSING
00009662  2200                    3881           MOVE.L  D0,D1          SAVE IN TEMP
00009664  6738                    3882           BEQ.S   PNTZ81         IF ZERO
00009666  6A08                    3883           BPL.S   PNTZ0
00009668  4481                    3884           NEG.L   D1             CHANGE TO POSITIVE VALUE
0000966A  6B32                    3885           BMI.S   PNTZ81         WATCH OUT SPECIAL CASE $80000000
0000966C  1CFC 002D               3886           MOVE.B  #'-',(A6)+     PUT SIGN INTO BUFFER
00009670  7408                    3887  PNTZ0    MOVEQ   #8,D2          8 POSSIBLE CHARACTERS
00009672  2001                    3888  PNTZ1    MOVE.L  D1,D0          UNSAVE IT
00009674  2602                    3889           MOVE.L  D2,D3          COUNT DOWN FROM HERE
00009676  5383                    3890           SUBQ.L  #1,D3          BACK OFF ONE
00009678  670C                    3891           BEQ.S   PNTZ4          IF NO ROTATE SKIP THIS
0000967A  E880                    3892  PNTZ2    ASR.L   #4,D0          ROTATE LRIGHT
0000967C  0280 0FFFFFFF           3893           ANDI.L  #$FFFFFFF,D0   CLEAR TOP NIBBLE
00009682  5383                    3894           SUBQ.L  #1,D3
00009684  66F4                    3895           BNE     PNTZ2
00009686  0200 000F               3896  PNTZ4    ANDI.B  #$F,D0         SAVE ONLY NIBBLE
0000968A  6604                    3897           BNE.S   PNTZ3
0000968C  4A04                    3898           TST.B   D4             SEE IF STILL SURPRESSING
0000968E  6706                    3899           BEQ.S   PNTZ8
00009690  6100 FF60               3900  PNTZ3    BSR     PUTHEX         PUT A HEX CHAR IN BUFFER
00009694  1800                    3901           MOVE.B  D0,D4          MARK AS NON-SURPRESSING MODE
00009696  5382                    3902  PNTZ8    SUBQ.L  #1,D2          DO ANOTHER CHAR
00009698  66D8                    3903           BNE     PNTZ1
0000969A  4A04                    3904           TST.B   D4             SEE IF ANYTHING PRINTED
0000969C  6604                    3905           BNE.S   PNTZ9
0000969E  1CFC 0030               3906  PNTZ81   MOVE.B  #'0',(A6)+     MOVE AT LEAST ONE ZERO
000096A2  4E75                    3907  PNTZ9    RTS
000096A4                          3908  
000096A4                          3909  * FIND NEXT FIELD... (A5) POINTS TO FIELD, (A0) NULL FIELD RETURN
000096A4                          3910  *   *-*-WARNING-*-* IF (A0) RETURN IS USED;  RETURN MUST BE AT
000096A4                          3911  *                   SAME SUBROUTINE LEVEL OR STACK GETS SCREWED UP
000096A4                          3912  *
000096A4                          3913  *  SKIP LEADING SPACES
000096A4                          3914  *  TERMINATE NULL FIELD ON COMA ,SEMICOLEN OR A5=A6
000096A4                          3915  
000096A4  528D                    3916  FNEXTF1  ADDQ.L  #1,A5
000096A6                          3917  
000096A6  1015                    3918  FNEXTF   MOVE.B  (A5),D0        ENTRY POINT
000096A8  BBCE                    3919           CMP.L   A6,A5
000096AA  6414                    3920           BCC.S   FNEXTF7        AT END OF BUFFER
000096AC  0C00 0020               3921           CMPI.B  #BLANK,D0
000096B0  67F2                    3922           BEQ     FNEXTF1        SPACE
000096B2                          3923  
000096B2  0C00 002C               3924           CMPI.B  #',',D0
000096B6  6708                    3925           BEQ.S   FNEXTF7        COMMA - NULL FIELD
000096B8  0C00 003B               3926           CMPI.B  #';',D0
000096BC  6702                    3927           BEQ.S   FNEXTF7        SEMICOLON - NULL FIELD
000096BE  4E75                    3928           RTS                    NORMAL FOUND FIELD RETURN
000096C0                          3929  
000096C0  588F                    3930  FNEXTF7  ADDQ.L  #4,A7          TRIM STACK
000096C2  4ED0                    3931           JMP     (A0)           NULL FIELD RETURN
000096C4                          3932  
000096C4                          3933  **************************************************************
000096C4                          3934  * THIS ROUTINE MAKES SURE YOU ARE ON THE CORRECT BOUNDRY.    *
000096C4                          3935  *  D0 = ARGUMENT...   CHECKS ADDRESS AND WORD ALIGNMENTS.   *
000096C4                          3936  **************************************************************
000096C4                          3937  
000096C4  E298                    3938  CKWADR   ROR.L   #1,D0
000096C6  E398                    3939           ROL.L   #1,D0
000096C8  6508                    3940           BCS.S   CKADR39        NOT WORD ALIGNED
000096CA                          3941  
000096CA  0C80 01000000           3942  CKADDR   CMPI.L  #$1000000,D0   VALID ADDRESS?
000096D0  6514                    3943           BCS.S   CKADR99        GOOD ADDRESS
000096D2                          3944  
000096D2  4BFA 0014               3945  CKADR39  LEA     MSG018(PC),A5
000096D6  6100 EA1A               3946           BSR     FIXDATA
000096DA  6100 FEF8               3947           BSR     PNT8HX
000096DE  6100 0142               3948           BSR     OUT1CR
000096E2  6000 EAE0               3949           BRA     MACSBUG
000096E6                          3950  
000096E6  4E75                    3951  CKADR99  RTS
000096E8                          3952  
000096E8= 49 4E 56 41 4C 49 44    3953  MSG018   DC.B    'INVALID ADDRESS=',EOT
          20 41 44 44 52 45 53  
          53 3D 04              
000096F9= 00                      3956           DC.B    0              PAD BYTE
000096FA                          3957  
000096FA                          3958  
000096FA                          3959  * EVALUATE EXPRESSION
000096FA                          3960  *  NUMBER PLUS OR MINUS NUMBER....
000096FA                          3961  *
000096FA  2F07                    3962  GETEXP   MOVE.L  D7,-(A7)       SAVE D7
000096FC  4287                    3963           CLR.L   D7
000096FE  6128                    3964  GETEXP21 BSR.S   GETNUMA        GET NUMBER
00009700  DE80                    3965           ADD.L   D0,D7          D7 = NUMBER BEING BUILT
00009702  121D                    3966  GETEXP15 MOVE.B  (A5)+,D1       D1 = TERMINATING CHAR
00009704  4280                    3967           CLR.L   D0             D0 = NEXT NUMBER (=0 1ST TIME)
00009706  0C01 002B               3968           CMPI.B  #'+',D1
0000970A  67F2                    3969           BEQ     GETEXP21       PLUS
0000970C  0C01 002D               3970           CMPI.B  #'-',D1
00009710  6606                    3971           BNE.S   GETEXP39       NOT MINUS
00009712  6114                    3972           BSR.S   GETNUMA        GET NEXT NUMBER
00009714  9E80                    3973           SUB.L   D0,D7
00009716  60EA                    3974           BRA     GETEXP15
00009718                          3975  
00009718  2007                    3976  GETEXP39 MOVE.L  D7,D0          D0 = VALUE BUILT
0000971A  538D                    3977           SUBQ.L  #1,A5          A5 = CHAR AFTER EXPRESSION
0000971C  2E1F                    3978           MOVE.L  (A7)+,D7       RESTORE D7
0000971E  4E75                    3979           RTS
00009720                          3980  
00009720                          3981  *   ROUTINES TO CONVERT STRING TO BINARY VALUE
00009720                          3982  *
00009720                          3983  *        ACCEPTS PREFIXES:
00009720                          3984  *         % binary
00009720                          3985  *         @ octal
00009720                          3986  *         & decimal
00009720                          3987  *         $ hex
00009720                          3988  *
00009720  610A                    3989  GETNUMD  BSR.S   GETDECNU       GET DECIMAL NUMBER
00009722  6600 E98C               3990  GETNUMD9 BNE     ERROR
00009726  4E75                    3991           RTS
00009728                          3992  
00009728  610A                    3993  GETNUMA  BSR.S   GETHEXNU       GET HEX NUMBER
0000972A  60F6                    3994           BRA     GETNUMD9
0000972C                          3995  
0000972C  48E7 7C80               3996  GETDECNU MOVEM.L D1-D5/A0,-(A7) DECODE AS A DECIMAL NUMBER
00009730  760A                    3997           MOVEQ   #10,D3         D3 = BASE (DECIMAL)
00009732  6006                    3998           BRA.S   GETN20
00009734                          3999  
00009734  48E7 7C80               4000  GETHEXNU MOVEM.L D1-D5/A0,-(A7) DECODE AS A HEX NUMBER
00009738  7610                    4001           MOVEQ   #16,D3         D3 = BASE
0000973A                          4002  
0000973A  4244                    4003  GETN20   CLR.W   D4             D4 = FLAG FOR CHARACTER HIT
0000973C  4281                    4004           CLR.L   D1             D1 = TEMP RESULTS
0000973E  0C15 0020               4005           CMPI.B  #BLANK,(A5)
00009742  6778                    4006           BEQ.S   GETN80         FIRST CHAR SPACE; ERROR
00009744                          4007  
00009744  BBCE                    4008  GETN30   CMP.L   A6,A5          SEE IF AT END OF BUFFER
00009746  677A                    4009           BEQ.S   GETN90
00009748  4280                    4010           CLR.L   D0
0000974A  101D                    4011           MOVE.B  (A5)+,D0       D0 = CHARACTER
0000974C                          4012  
0000974C  41FA 007E               4013           LEA     GETNDATA(PC),A0 POINTER TO TERMINATE CHARS
00009750  1A18                    4014  GETN40   MOVE.B  (A0)+,D5       D5 = TERMINATION CHAR
00009752  6706                    4015           BEQ.S   GETN50         NOT TERM.CHAR
00009754  B005                    4016           CMP.B   D5,D0
00009756  6768                    4017           BEQ.S   GETN85         FOUND TERMINATION CHAR; EXIT
00009758  60F6                    4018           BRA     GETN40
0000975A                          4019  
0000975A  0C00 0025               4020  GETN50   CMPI.B  #'%',D0        SEE IF FLAGGED AS BINARY
0000975E  660A                    4021           BNE.S   GETN60
00009760  7602                    4022           MOVEQ   #2,D3          BASE IS BINARY
00009762  4A44                    4023  GETN55   TST.W   D4             ANYTHING ENTERED
00009764  6656                    4024           BNE.S   GETN80         CONFLICT
00009766                          4025  
00009766  78FF                    4026  GETN57   MOVEQ   #-1,D4         SET DATA ENTERED FLAG
00009768  60DA                    4027           BRA     GETN30
0000976A                          4028  
0000976A  0C00 0040               4029  GETN60   CMPI.B  #'@',D0        SEE IF FLAGGED AS OCTAL
0000976E  6604                    4030           BNE.S   GETN65
00009770  7608                    4031           MOVEQ   #8,D3          BASE IS OCTAL
00009772  60EE                    4032           BRA     GETN55
00009774                          4033  
00009774  0C00 0026               4034  GETN65   CMPI.B  #'&',D0        SEE IF FLAGGED AS DECIMAL
00009778  6604                    4035           BNE.S   GETN70
0000977A  760A                    4036           MOVEQ   #10,D3         BASE IS DECIMAL
0000977C  60E4                    4037           BRA     GETN55
0000977E                          4038  
0000977E  0C00 0024               4039  GETN70   CMPI.B  #'$',D0        SEE IF FLAGGED AS HEX
00009782  6604                    4040           BNE.S   GETN75
00009784  7610                    4041           MOVEQ   #16,D3         BASE IS 16
00009786  60DA                    4042           BRA     GETN55
00009788                          4043  
00009788  0400 0030               4044  GETN75   SUBI.B  #$30,D0
0000978C  6D2E                    4045           BLT.S   GETN80         LESS THAN ZERO
0000978E  0C00 0009               4046           CMPI.B  #9,D0
00009792  6F0E                    4047           BLE.S   GETN77         VALUE 0 - 9
00009794  0C00 0011               4048           CMPI.B  #$11,D0
00009798  6D22                    4049           BLT.S   GETN80         LESS THAN A
0000979A  0C00 0016               4050           CMPI.B  #$16,D0
0000979E  6E1C                    4051           BGT.S   GETN80         GREATER THAN F
000097A0  5F00                    4052           SUBQ.B  #7,D0          MAKE BINARY
000097A2                          4053  
000097A2  B043                    4054  GETN77   CMP.W   D3,D0          IS INPUT LARGER THAN BASE
000097A4  6416                    4055           BCC.S   GETN80         LARGER THAN BASE
000097A6  2401                    4056           MOVE.L  D1,D2          GET READY TO MULTIPLY D1*BASE
000097A8  4841                    4057           SWAP    D1
000097AA  C2C3                    4058           MULU    D3,D1          TOP PART
000097AC  4841                    4059           SWAP    D1
000097AE  4A41                    4060           TST.W   D1             CHECK FOR OVERFLOW
000097B0  660A                    4061           BNE.S   GETN80         VALUE IS TOO LARGE
000097B2  C4C3                    4062           MULU    D3,D2          NOW WORK ON LOW WORD
000097B4  D282                    4063           ADD.L   D2,D1          PUT IT BACK TOGETHER
000097B6  6904                    4064           BVS.S   GETN80         OVERFLOW?
000097B8  D280                    4065           ADD.L   D0,D1          ADD IN NEW STUFF
000097BA  68AA                    4066           BVC     GETN57
000097BC  70FF                    4067  GETN80   MOVEQ   #-1,D0         ERROR RETURN (BNE)
000097BE  6006                    4068           BRA.S   GETN95
000097C0                          4069  
000097C0  538D                    4070  GETN85   SUBQ.L  #1,A5          BACK UP TO POINT AT SPACE/PREVIOUS CHAR
000097C2  2001                    4071  GETN90   MOVE.L  D1,D0          SET UP RESULT FOR RETURN
000097C4  4281                    4072           CLR.L   D1             NORMAL RETURN (BEQ)
000097C6  4CDF 013E               4073  GETN95   MOVEM.L (A7)+,D1-D5/A0 RESTORE SOME REGISTERS
000097CA  4E75                    4074           RTS
000097CC                          4075  
000097CC= 20 28 2B 2C 2D 2E 3A    4076  GETNDATA DC.B    ' (+,-.:;=^]',0 TERMINATE CHARS
          3B 3D 5E 5D 00        
000097D8                          4078  
000097D8                          4079  
000097D8                          4080  
000097D8                          4081  *
000097D8                          4082  *  ***GETHEX***  GET HEX (BINARY VALUE FROM ASCII)
000097D8                          4083  *   D0.B HAS ASCII CHAR  RETURNS $0-$F BINARY
000097D8                          4084  *
000097D8  0C00 0030               4085  GETHEX CMPI.B    #$30,D0        IS IT LESS THAN ZERO
000097DC  6D1C                    4086         BLT.S     PNMSG011
000097DE  0C00 0039               4087         CMPI.B    #$39,D0        IS IT GREATER THAN 9
000097E2  6F0E                    4088         BLE.S     GTHX2          GOOD HEX
000097E4                          4089  
000097E4  0C00 0041               4090         CMPI.B    #$41,D0        IS IT LESS THAN 'A'
000097E8  6D10                    4091         BLT.S     PNMSG011
000097EA  0C00 0046               4092         CMPI.B    #$46,D0        IS IT GT 'F'
000097EE  6E0A                    4093         BGT.S     PNMSG011
000097F0  5F00                    4094         SUBQ.B    #7,D0          MAKE IT SMALLER A=10
000097F2  0280 0000000F           4095  GTHX2  ANDI.L    #$F,D0
000097F8  4E75                    4096         RTS
000097FA                          4097  
000097FA  6100 00AE               4098  PNMSG011 BSR     FIXBUF         PRINT NOT A HEX DIGIT
000097FE  1CC0                    4099           MOVE.B  D0,(A6)+       PUT IN OFFENDING CHAR
00009800  4BFA 000A               4100           LEA     MSG011(PC),A5  '  IS NOT A HEX DIGIT'
00009804  6100 E8F0               4101           BSR     FIXDADD
00009808  6000 E89E               4102           BRA     MSG            GO PRINT IT AND ENTER MACSBUG
0000980C                          4103  
0000980C= 20 20 49 53 20 4E 4F    4104  MSG011   DC.B    '  IS NOT A HEX DIGIT',EOT
          54 20 41 20 48 45 58  
          20 44 49 47 49 54 04  
00009821= 00                      4107           DC.B    0              PAD BYTE
00009822                          4108  
00009822                          4109  
00009822                          4110  *-------------------------------------------------------------------------
00009822                          4111  * File X         COMMON I/O                                       05/17/82
00009822                          4112  
00009822                          4113  ******************************
00009822                          4114  *
00009822                          4115  *    SEND LINE TO PORT1 WITH CR/LF
00009822                          4116  *
00009822  1CFC 000D               4117  OUT1CR   MOVE.B  #CR,(A6)+
00009826  1CFC 000A               4118           MOVE.B  #LF,(A6)+
0000982A  4AB8 061C               4119           TST.L   OUTTO          SEE IF ALTERNATE ADDRESS
0000982E  6706                    4120           BEQ.S   OUT1CRX
00009830  2F38 061C               4121           MOVE.L  OUTTO,-(A7)    PUSH ON STACK
00009834  4E75                    4122           RTS                    GO DO IT
00009836                          4123  
00009836  2F38 0630               4124  OUT1CRX  MOVE.L  OUTPORT1,-(A7) GO TO I/O ADDRESS
0000983A  4E75                    4125           RTS                    (THIS NORMALLY GOES TO OUT1CR0)
0000983C                          4126  *
0000983C                          4127  OUT1CR0  DS      0
0000983C                          4128  *
0000983C                          4129  *    OUTPUT BUFFER TO PORT1
0000983C                          4130  *
0000983C  48E7 F0C0               4131  OUTPUT   MOVEM.L D0-D3/A0-A1,-(A7) GET SOME WORKING ROOM
00009840  4283                    4132           CLR.L   D3             D3 = NO OFFSET INTO NULL CHARACTERS
00009842  6160                    4133           BSR.S   GETSER1        A0 = GET SERIAL PORT 1 ADDRESS
00009844  601E                    4134           BRA.S   OUTP2
00009846                          4135  *
00009846                          4136  *    SEND LINE TO PORT2 WITH CR
00009846                          4137  *
00009846  1CFC 000D               4138  OUTPUT2  MOVE.B  #$D,(A6)+      TACK ON A "CR"
0000984A  4AB8 061C               4139           TST.L   OUTTO          SEE IF ALTERNATE ADDRESS
0000984E  6706                    4140           BEQ.S   OUTPUT2X
00009850  2F38 061C               4141           MOVE.L  OUTTO,-(A7)    PUSH ON STACK
00009854  4E75                    4142           RTS                    GO DO IT
00009856                          4143  
00009856  2F38 0638               4144  OUTPUT2X MOVE.L  OUTPORT2,-(A7) GO TO IO ROUTINE
0000985A  4E75                    4145           RTS                    (THIS NORMALLY GOES TO OUTPUT20)
0000985C                          4146  *
0000985C                          4147  OUTPUT20 DS      0
0000985C                          4148  *
0000985C                          4149  *     OUTPUT BUFFER TO PORT2
0000985C                          4150  *
0000985C  48E7 F0C0               4151  OUTPUT21 MOVEM.L D0-D3/A0-A1,-(A7)
00009860  7601                    4152           MOVEQ   #1,D3          SIGNAL FOR PORT2
00009862  6144                    4153           BSR.S   GETSER2        RETURNS SERIAL PORT 2 BASE ADDRESS IN A0
00009864                          4154  *
00009864                          4155  *   SEND BUFFER TO PORT
00009864                          4156  *
00009864  BBCE                    4157  OUTP2    CMP.L   A6,A5          SEE IF AT OR BEYOND END OF LINE
00009866  6506                    4158           BCS.S   OUTP3          NO... KEEP GOING, ELSE
00009868  4CDF 030F               4159           MOVEM.L (A7)+,D0-D3/A0-A1 RESTORE REGISTERS
0000986C  4E75                    4160           RTS                    END OF ROUTINE
0000986E                          4161  
0000986E  101D                    4162  OUTP3    MOVE.B  (A5)+,D0       GRAB BYTE TO OUTPUT
00009870  6102                    4163           BSR.S   OUTCH1         GO PRINT IT
00009872  60F0                    4164           BRA.S   OUTP2          GO DO ANOTHER
00009874                          4165  
00009874                          4166  *   SEND CHARACTER IN D0.B TO PORT1
00009874                          4167  *   WHOSE BASE ADDRESS IS IN A0
00009874                          4168  *   D3=0 FOR PORT1  D3=1 FOR PORT2
00009874                          4169  *   PUTS IN NULL PADDING AS NEEDED
00009874                          4170  *
00009874  6100 0102               4171  OUTCH1   BSR     OUTCH          GO PRINT D0
00009878  4A00                    4172           TST.B   D0             SEE IF NULL
0000987A  6726                    4173           BEQ.S   OUTCHRTS       JUST END IF NULL
0000987C  4282                    4174           CLR.L   D2             CLEAR UPPER BYTES OF NULL LOOP COUNTER
0000987E  43F8 0618               4175           LEA     NULLPADS,A1    FORM ADDRESS OF PADS
00009882  D3C3                    4176           ADD.L   D3,A1          D3=0 FOR PORT1 1=PORT2
00009884  1411                    4177           MOVE.B  (A1),D2        DEFAULT NULL PADS
00009886  0C00 000D               4178           CMPI.B  #$D,D0         SEE IF CR
0000988A  6608                    4179           BNE.S   OUTCH2
0000988C  43F8 061A               4180           LEA     CRPADS,A1      FORM ADDRESS OF CR PADS
00009890  D3C3                    4181           ADD.L   D3,A1          D3=0 FOR PORT1  1=PORT2
00009892  1411                    4182           MOVE.B  (A1),D2        NULLS AFTER CR
00009894  4A82                    4183  OUTCH2   TST.L   D2  SEE        IF ANY PADDS TO BE SEND
00009896  670A                    4184           BEQ.S   OUTCHRTS       0=NONE
00009898  4280                    4185           CLR.L   D0             0=NULL CHAR TO BE SEND
0000989A  6100 00DC               4186  OUTCH3   BSR     OUTCH          SEND A NULL
0000989E  5382                    4187           SUBQ.L  #1,D2          LOOP AROUND
000098A0  66F8                    4188           BNE     OUTCH3
000098A2  4E75                    4189  OUTCHRTS RTS                    END OF OUTCH ROUTINE
000098A4                          4190  
000098A4                          4191  *
000098A4                          4192  *   GET BASE ADDRESS OF SERIAL PORT 1 IN  A0
000098A4                          4193  *
000098A4                          4194  
000098A4  4E75                    4195  GETSER1   RTS
000098A6                          4196  
000098A6  4E75                    4197  RETURN   RTS     RETURN         (USED FROM A COUPLE OF PLACES)
000098A8                          4198  
000098A8                          4199  
000098A8                          4200  *
000098A8                          4201  *   GET BASE ADDRESS OF SERIAL PORT 2 IN A0
000098A8                          4202  *
000098A8                          4203  
000098A8  4E75                    4204  GETSER2  RTS
000098AA                          4205           
000098AA                          4206  *
000098AA                          4207  *     FIX THE BUFFER A5 & A6 SET TO START OF BUFFER QUE
000098AA                          4208  *
000098AA  4BF8 0540               4209  FIXBUF   LEA     BUFFER,A5
000098AE  2C4D                    4210           MOVE.L  A5,A6
000098B0  4E75                    4211           RTS
000098B2                          4212  
000098B2                          4213  *   INPUT A LINE FROM PORT1
000098B2                          4214  *
000098B2  4AB8 0620               4215  PORTIN1  TST.L   INFROM         SEE IF ALTERNAME ADDRESS
000098B6  6706                    4216           BEQ.S   PORTIN1X
000098B8  2F38 0620               4217           MOVE.L  INFROM,-(A7)   PUSH ON STACK
000098BC  4E75                    4218           RTS                    GO DO IT
000098BE  2F38 062C               4219  PORTIN1X MOVE.L  INPORT1,-(A7)  GO TO IO ROUTINE
000098C2  4E75                    4220           RTS                    NORMALLY GOES TO PORTIN10
000098C4                          4221  
000098C4  48E7 F9E0               4222  PORTIN1N MOVEM.L D0-D4/D7/A0-A2,-(A7)
000098C8  4A38 04E8               4223           TST.B   XONOFF+2
000098CC  6608                    4224           BNE.S   PORTIN1V       OVERRIDE "No Auto Line Feed"
000098CE  7E01                    4225           MOVEQ   #1,D7          "No Auto Line Feed" Entry point
000098D0  6006                    4226           BRA.S   PORTIN1W
000098D2                          4227  
000098D2                          4228  * ENTRY ALSO POSSIBLE FROM:  PORTIN2
000098D2  48E7 F9E0               4229  PORTIN10 MOVEM.L D0-D4/D7/A0-A2,-(A7)
000098D6  4287                    4230  PORTIN1V CLR.L   D7             "Auto Line Feed" Entry point.
000098D8  4283                    4231  PORTIN1W CLR.L   D3             FLAG AS PORT1
000098DA  61C8                    4232           BSR     GETSER1        MOVE ADDRESS INTO A0
000098DC                          4233  
000098DC  6100 00CA               4234  READBUF  BSR     INCHNE         GO GET SOME DATA  (NO ECHO)
000098E0  4A00                    4235           TST.B   D0             CHECK FOR NULLS
000098E2  67F8                    4236           BEQ.S   READBUF
000098E4  3800                    4237           MOVE.W  D0,D4          SAVE FOR A WHILE
000098E6  618C                    4238           BSR     OUTCH1         ECHO WHAT IS IN D0
000098E8  3004                    4239           MOVE.W  D4,D0          RESTORE IT
000098EA  0C00 000A               4240           CMPI.B  #LF,D0         SEE IF LINE FEED
000098EE  67EC                    4241           BEQ.S   READBUF        DONT PUT IT IN BUFFER
000098F0                          4242  
000098F0  0C00 0018               4243           CMPI.B  #CTLX,D0       SEE IF CTRL-X "CANCEL LINE"
000098F4  6610                    4244           BNE.S   CHKCTLH        No... Then go check for backspace
000098F6  700D                    4245           MOVEQ   #CR,D0         Yes.. 1) Send a carriage return
000098F8  6100 FF7A               4246           BSR     OUTCH1         *
000098FC  700A                    4247           MOVEQ   #LF,D0         *     2) Send a line feed
000098FE  6100 FF74               4248           BSR     OUTCH1         *
00009902  2C4D                    4249           MOVE.L  A5,A6          *     3) Set BUFFER at start again
00009904  60D6                    4250           BRA.S   READBUF        *     4) Restart this routine
00009906                          4251  
00009906  0C00 0008               4252  CHKCTLH  CMPI.B  #CTLH,D0       CTRL-H? (Backspace)
0000990A  6714                    4253           BEQ.S   BS4CTLH        Yes...  Go backspace 1 character
0000990C  0C00 007F               4254           CMPI.B  #DEL,D0        DEL?    (Also a Backspace)
00009910  6624                    4255           BNE.S   CHKCTLD        No....  Then go check for CTRL D
00009912  BDCD                    4256  BKSPACE  CMP.L   A5,A6          Yes...  Usually need an extra "Backspace"
00009914  67C6                    4257           BEQ     READBUF        If at start of buffer, don't back up any more.
00009916  103C 0008               4258           MOVE.B  #CTLH,D0       Backspace cursor.
0000991A  6100 FF58               4259           BSR     OUTCH1         *
0000991E  6004                    4260           BRA.S   BLANKIT        Bypass check for start of buffer
00009920                          4261  
00009920                          4262  BS4CTLH  DS      0              CTL-H already backed up 1 character.
00009920  BDCD                    4263           CMP.L   A5,A6          At beginning of buffer?
00009922  67B8                    4264           BEQ     READBUF        Yes...  Then don't back up any more.
00009924  7020                    4265  BLANKIT  MOVEQ   #$20,D0        Now blank out previous character.
00009926  6100 FF4C               4266           BSR     OUTCH1         *
0000992A  1026                    4267           MOVE.B  -(A6),D0       Remove last character from buffer.
0000992C  103C 0008               4268           MOVE.B  #CTLH,D0       Backup cursor again.
00009930  6100 FF42               4269           BSR     OUTCH1         *
00009934  60A6                    4270           BRA     READBUF        Go get next character.
00009936                          4271  
00009936  0C00 0004               4272  CHKCTLD  CMPI.B  #CTLD,D0       CTL D?  (REPRINT)
0000993A  6626                    4273           BNE.S   CHKCR          No....  Then go check if a "CR".
0000993C  700D                    4274           MOVEQ   #CR,D0         Yes...  Print "CR"
0000993E  6100 FF34               4275           BSR     OUTCH1         *
00009942  700A                    4276           MOVEQ   #LF,D0         Print "LF"
00009944  6100 FF2E               4277           BSR     OUTCH1         *
00009948  2F0D                    4278           MOVE.L  A5,-(A7)       SAVE ON STACK FOR A MOMENT
0000994A  6100 FEF0               4279           BSR     OUTPUT         GO PRINT BUFFER
0000994E  2A5F                    4280           MOVE.L  (A7)+,A5       GET BACK FROM STACK
00009950  608A                    4281           BRA     READBUF
00009952                          4282  
00009952  1CC0                    4283  CHARSAVE MOVE.B  D0,(A6)+       SAVE DATA INTO BUFFER
00009954  220E                    4284           MOVE.L  A6,D1          CALCULATE ROOM USED
00009956  928D                    4285           SUB.L   A5,D1          DONT USE MORE THAN "BUFFSIZE"
00009958  0C41 0080               4286           CMPI.W  #BUFFSIZE,D1
0000995C  6B00 FF7E               4287           BMI     READBUF        We're OK, go get next character.
00009960  60B0                    4288           BRA     BKSPACE        If not, handle as though a "CNTL-H"
00009962                          4289  
00009962  0C00 000D               4290  CHKCR    CMPI.B  #CR,D0         CR?  (End of command line).
00009966  66EA                    4291           BNE.S   CHARSAVE       No.. Then go store this character.
00009968                          4292  
00009968  4A07                    4293           TST.B   D7             Check "Auto Line Feed" switch
0000996A  6606                    4294           BNE.S   NOAUTOLF       Yes.. Bypass sending Line feed.
0000996C  700A                    4295           MOVEQ   #LF,D0         No... Set one up and...
0000996E  6100 FF04               4296           BSR     OUTCH1         .     Send it!
00009972                          4297  NOAUTOLF DS      0
00009972                          4298  
00009972  4CDF 079F               4299   MOVEM.L (A7)+,D0-D4/D7/A0-A2 Restore Regs.
00009976  4E75                    4300           RTS                    RETURN TO CALLER
00009978                          4301  
00009978                          4302  
00009978                          4303  *
00009978                          4304  *       SEND CHARACTER IN D0.B TO SCREEN
00009978                          4305  *
00009978  48E7 C000               4306  OUTCH    MOVEM.L  D0-D1,-(A7)
0000997C  2200                    4307           MOVE.L   D0,D1
0000997E  103C 0006               4308           MOVE.B   #6,D0          TRAP TASK #6 (DISPLAY SINGLE CHARACTER IN D1)
00009982  4E4F                    4309           TRAP     #15
00009984  4CDF 0003               4310           MOVEM.L  (A7)+,D0-D1
00009988  4E75                    4311           RTS
0000998A                          4312           
0000998A                          4313           
0000998A                          4314  *
0000998A                          4315  *   CHECK FOR BREAK ON PORT #1
0000998A                          4316  *
0000998A  4E75                    4317  CHKBRK    RTS
0000998C                          4318  
0000998C                          4319  *   MOVE.L  A0,-(A7)       SAVE A0 * * *
0000998C                          4320  *         BSR     GETSER1        RETURNS ADDRESS IN A0
0000998C                          4321  *         MOVE.B  (A0),D1        READ STATUS
0000998C                          4322  *         ANDI.B  #$10,D1
0000998C                          4323  *         BNE.S   BREAK
0000998C                          4324  *         MOVE.L  (A7)+,A0       RESTORE A0 * * *
0000998C                          4325  *         RTS
0000998C                          4326  
0000998C                          4327  *    WHAT TO DO WHEN THE BREAK IS PRESSED
0000998C                          4328  *
0000998C                          4329  
0000998C  4BFA 000E               4330  BREAK    LEA     MSG013(PC),A5  MSG:  "BREAK"
00009990  6100 E774               4331           BSR     FIXDCRLF       *
00009994  6100 FEA6               4332           BSR     OUTPUT         PRINT MESSAGE
00009998  6000 E82A               4333           BRA     MACSBUG        AND REENTER MACSBUG
0000999C                          4334             
0000999C= 0A 0A 42 52 45 41 4B    4335  MSG013   DC.B    LF,LF,'BREAK',CR,LF,LF,EOT
          0D 0A 0A 04           
000099A7= 00                      4337           DC.B    0              PAD BYTE
000099A8                          4338  
000099A8  48E7 4000               4339  INCHNE   MOVEM.L  D1,-(A7)
000099AC  103C 0005               4340           MOVE.B   #5,D0          EASy68K trap task to read single character into D1.B
000099B0  4E4F                    4341           TRAP     #15
000099B2  1001                    4342           MOVE.B   D1,D0
000099B4  4CDF 0002               4343           MOVEM.L  (A7)+,D1
000099B8                          4344           IF.B D0 <EQ> #CTLC THEN.S      if Ctrl-C pressed
000099B8  B03C 0003               4345s     CMP.B   #CTLC,D0
000099BC  6602                    4346s     BNE.S   _00000000
000099BE  60CC                    4347             BRA    BREAK
000099C0                          4348           ENDI
000099C0                          4349s _00000000
000099C0  4E75                    4350           RTS
000099C2                          4351  
000099C2                          4352  
000099C2                          4353  *     SCAN COMMAND LINE FOR PORT NUMBER
000099C2                          4354  *     DU LO VE MD
000099C2                          4355  *
000099C2  42B8 0620               4356  SCANPORT CLR.L   INFROM         DEFAULT IS WHATEVER IS CALLED
000099C6  42B8 061C               4357           CLR.L   OUTTO
000099CA  4E75                    4358  SCANP6   RTS
000099CC                          4359  
000099CC                          4360  
000099CC                          4361  
000099CC                          4362  *-------------------------------------------------------------------------
000099CC                          4363  * File CODE68K   68K ONE LINE ASSEMBLER                           07/23/82
000099CC                          4364  
000099CC                          4365  * EVALUATE EXPRESSION
000099CC                          4366  *  NUMBER PLUS OR MINUS NUMBER....
000099CC                          4367  *
000099CC                          4368  EV       DS      0
000099CC  2F07                    4369           MOVE.L  D7,-(A7)       SAVE D7
000099CE  4287                    4370           CLR.L   D7
000099D0  6120                    4371  EV21     BSR.S   GETFIELD       GET NUMBER
000099D2  DE80                    4372           ADD.L   D0,D7          D7 = NUMBER BEING BUILT
000099D4  121D                    4373  EV15     MOVE.B  (A5)+,D1       D1 = TERMINATING CHAR
000099D6  4280                    4374           CLR.L   D0             D0 = NEXT NUMBER (=0 1ST TIME)
000099D8  0C01 002B               4375           CMPI.B  #'+',D1
000099DC  67F2                    4376           BEQ     EV21           PLUS
000099DE  0C01 002D               4377           CMPI.B  #'-',D1
000099E2  6606                    4378           BNE.S   EV39           NOT MINUS
000099E4  610C                    4379           BSR.S   GETFIELD       GET NEXT NUMBER
000099E6  9E80                    4380           SUB.L   D0,D7
000099E8  60EA                    4381           BRA     EV15
000099EA                          4382  
000099EA  2007                    4383  EV39     MOVE.L  D7,D0          D0 = VALUE BUILT
000099EC  538D                    4384           SUBQ.L  #1,A5          A5 = CHAR AFTER EXPRESSION
000099EE  2E1F                    4385           MOVE.L  (A7)+,D7       RESTORE D7
000099F0  4E75                    4386           RTS
000099F2                          4387  
000099F2                          4388  GETFIELD DS      0
000099F2  0C15 002A               4389           CMPI.B  #'*',(A5)
000099F6  6606                    4390           BNE.S   GETF305
000099F8                          4391  
000099F8  2004                    4392           MOVE.L  D4,D0          D0 = PROGRAM COUNTER
000099FA  528D                    4393           ADDQ.L  #1,A5
000099FC  6036                    4394           BRA.S   GETF333
000099FE                          4395  
000099FE  0C15 0027               4396  GETF305  CMPI.B  #$27,(A5)
00009A02  662A                    4397           BNE.S   GETF325        NOT LITERAL
00009A04                          4398  
00009A04  528D                    4399           ADDQ.L  #1,A5
00009A06  4280                    4400           CLR.L   D0
00009A08                          4401  
00009A08  3229 000C               4402           MOVE.W  TLENGTH(A1),D1  D1 = SIZE
00009A0C  6704                    4403           BEQ.S   GETF308        .B = 0
00009A0E  EA49                    4404           LSR.W   #5,D1          .W = 1
00009A10  5381                    4405           SUBQ.L  #1,D1          .L = 3
00009A12                          4406  GETF308
00009A12                          4407  
00009A12  E188                    4408  GETF311  LSL.L   #8,D0
00009A14  101D                    4409           MOVE.B  (A5)+,D0
00009A16  0C15 0027               4410           CMPI.B  #$27,(A5)
00009A1A  6706                    4411           BEQ.S   GETF312        CLOSING QUOTE
00009A1C  51C9 FFF4               4412           DBF     D1,GETF311
00009A20  6056                    4413           BRA.S   ER1            OVERFLOW
00009A22                          4414  
00009A22  528D                    4415  GETF312  ADDQ.L  #1,A5          MOVE PAST CLOSING QUOTE
00009A24  6002                    4416           BRA.S   GETF314
00009A26                          4417  
00009A26  E188                    4418  GETF313  LSL.L   #8,D0
00009A28  51C9 FFFC               4419  GETF314  DBF     D1,GETF313     LEFT NORNALIZE
00009A2C  6006                    4420           BRA.S   GETF333
00009A2E                          4421  
00009A2E  6100 FCFC               4422  GETF325  BSR     GETDECNU       GET DECIMAL NUMBER
00009A32  6644                    4423           BNE.S   ER1            MESSED UP NUMBER
00009A34                          4424  
00009A34  4E75                    4425  GETF333  RTS
00009A36                          4426  
00009A36                          4427  XBASE    DS        0
00009A36                          4428  
00009A36                          4429  * FIND AND SET SIZE
00009A36                          4430  * BIT 5432109876543210
00009A36                          4431  *     ........00......  = BYTE
00009A36                          4432  *     ........01......  = WORD
00009A36                          4433  *     ........10......  = LONG
00009A36                          4434  *
00009A36  8469 000C               4435  FSIZE    OR.W    TLENGTH(A1),D2  SET SIZE BITS
00009A3A  4E75                    4436           RTS
00009A3C                          4437  
00009A3C                          4438  *  D0 = VALUE 0 - 7
00009A3C                          4439  *  D1 = 0 IF D@     = 1 IF A@
00009A3C  4281                    4440  GETREGD  CLR.L   D1
00009A3E  0C1D 0044               4441           CMPI.B  #'D',(A5)+
00009A42  6634                    4442           BNE.S   ER1
00009A44  4280                    4443  GET41    CLR.L   D0
00009A46  101D                    4444           MOVE.B  (A5)+,D0
00009A48  0400 0030               4445           SUBI.B  #'0',D0
00009A4C  6B2A                    4446           BMI.S   ER1
00009A4E  0C00 0007               4447           CMPI.B  #$7,D0
00009A52  6E24                    4448           BGT.S   ER1
00009A54  4E75                    4449           RTS
00009A56                          4450  
00009A56  4281                    4451  GETREGA  CLR.L   D1
00009A58  123C 0008               4452           MOVE.B  #8,D1
00009A5C  0C1D 0041               4453           CMPI.B  #'A',(A5)+
00009A60  6616                    4454           BNE.S   ER1
00009A62  60E0                    4455           BRA     GET41
00009A64                          4456  
00009A64  4241                    4457  GETREGAD CLR     D1
00009A66  101D                    4458           MOVE.B  (A5)+,D0
00009A68  0C00 0044               4459           CMPI.B  #'D',D0
00009A6C  67D6                    4460           BEQ     GET41
00009A6E  123C 0008               4461           MOVE.B  #8,D1
00009A72  0C00 0041               4462           CMPI.B  #'A',D0
00009A76  67CC                    4463           BEQ     GET41
00009A78  6000 078C               4464  ER1      BRA     ER
00009A7C                          4465  
00009A7C  3E3C 01FD               4466  EADA     MOVE.W  #$1FD,D7       DATA ALTERABLE ONLY
00009A80  6022                    4467           BRA.S   EA
00009A82                          4468  
00009A82  3E3C 07E4               4469  EAC      MOVE.W  #$7E4,D7       CONTROL ONLY
00009A86  601C                    4470           BRA.S   EA
00009A88                          4471  
00009A88  3E3C 01FC               4472  EAM      MOVE.W  #$1FC,D7       MEMORY ALTERABLE ONLY
00009A8C  6016                    4473           BRA.S   EA
00009A8E                          4474  
00009A8E  3E3C 0800               4475  EAZ      MOVE.W  #$800,D7       IMMEDIATE ONLY
00009A92  6010                    4476           BRA.S   EA
00009A94                          4477  
00009A94  3E3C 0FFD               4478  EADADDR  MOVE.W  #$FFD,D7       DATA ADDRESSING
00009A98  600A                    4479           BRA.S   EA
00009A9A                          4480  
00009A9A  3E3C 01FF               4481  EAA      MOVE.W  #$1FF,D7       ALTERABLE ADDRESSING
00009A9E  6004                    4482           BRA.S   EA
00009AA0                          4483  
00009AA0  3E3C 0FFF               4484  EAALL    MOVE.W  #$FFF,D7       ALL MODES
00009AA4                          4485  
00009AA4                          4486  *  ...............1  D@                DATA REGISTER
00009AA4                          4487  *  ..............1.  A@
00009AA4                          4488  *  .............1..  (A@)
00009AA4                          4489  *  ............1...  -(A@)
00009AA4                          4490  *  ...........1....  (A@)+
00009AA4                          4491  *  ..........1.....  DATA(A@)
00009AA4                          4492  *  .........1......  DATA(A@,R@)
00009AA4                          4493  *  ........1.......  DATA  (SHORT)
00009AA4                          4494  *  .......1........  DATA  (LONG)
00009AA4                          4495  *  ......1.........  DATA(PC)
00009AA4                          4496  *  .....1..........  DATA(PC,R@)
00009AA4                          4497  *  ....1...........  #DATA
00009AA4                          4498  *  1...............  SPECIAL CASE JMP.L
00009AA4                          4499  
00009AA4                          4500  * D0 = VALUE CALCULATED
00009AA4                          4501  * D2 = MASK WORD (1ST WORD OF INSTRUCTION)
00009AA4                          4502  * D3 = OFFSET FOR DATA STORE (TDATA+..)
00009AA4                          4503  * D4 = EXTENSION WORD
00009AA4                          4504  * D5 = <DATA>
00009AA4                          4505  * D6 = MODE AS BUILT   .........XXXXXX
00009AA4                          4506  * D7 = MODES ALLOWED
00009AA4                          4507  *
00009AA4                          4508  * A4 = BASE ADDRESS FOR DATA STORE (TDATA+..)[A4,D3]
00009AA4                          4509  EA       DS      0
00009AA4  4285                    4510           CLR.L   D5             ZERO VALUE
00009AA6  4286                    4511           CLR.L   D6             MODE = 000000
00009AA8  1015                    4512           MOVE.B  (A5),D0
00009AAA  0C00 0023               4513           CMPI.B  #'#',D0
00009AAE  6646                    4514           BNE.S   EA10
00009AB0                          4515  
00009AB0                          4516  * IMMEDIATE MODE
00009AB0                          4517  
00009AB0  0807 000B               4518           BTST    #11,D7
00009AB4  67C2                    4519           BEQ     ER1
00009AB6                          4520  
00009AB6  1C3C 003C               4521           MOVE.B  #$3C,D6        D6 = MODE  111100
00009ABA  528D                    4522           ADDQ.L  #1,A5
00009ABC                          4523  
00009ABC  6100 FF0E               4524           BSR     EV             EVALUATE EXPRESSION
00009AC0  2A00                    4525           MOVE.L  D0,D5          D5 = VALUE
00009AC2                          4526  
00009AC2  4A29 000B               4527           TST.B   TLSPEC(A1)
00009AC6  670A                    4528           BEQ.S   EA0633         .SIZE NOT SPECIFIED (.W ASSUMED)
00009AC8                          4529  
00009AC8  3029 000C               4530           MOVE.W  TLENGTH(A1),D0
00009ACC  6714                    4531           BEQ.S   EA0635         .BYTE
00009ACE                          4532  
00009ACE  4A00                    4533           TST.B   D0
00009AD0  6B18                    4534           BMI.S   EA0637         .LONG
00009AD2                          4535  
00009AD2  6100 0238               4536  EA0633   BSR     EA16BIT        .WORD     -32K TO +64K
00009AD6  3985 3000               4537  EA0634   MOVE.W  D5,(A4,D3)
00009ADA  5429 000A               4538           ADDQ.B  #2,TNB(A1)     BYTE COUNT
00009ADE  5483                    4539           ADDQ.L  #2,D3          OFFSET
00009AE0  4E75                    4540           RTS
00009AE2                          4541  
00009AE2  6100 023E               4542  EA0635   BSR     EA8BIT         -127 TO +255
00009AE6  6690                    4543           BNE     ER1
00009AE8  60EC                    4544           BRA     EA0634
00009AEA                          4545  
00009AEA  2985 3000               4546  EA0637   MOVE.L  D5,(A4,D3)
00009AEE  5829 000A               4547           ADDQ.B  #4,TNB(A1)
00009AF2  5883                    4548           ADDQ.L  #4,D3
00009AF4  4E75                    4549           RTS
00009AF6                          4550  
00009AF6                          4551  EA10     DS      0
00009AF6  0C15 002D               4552           CMPI.B  #'-',(A5)
00009AFA  6626                    4553           BNE.S   EA11
00009AFC                          4554  
00009AFC  0C2D 0028 0001          4555           CMPI.B  #'(',1(A5)
00009B02  6600 0090               4556           BNE     EA41           MAY BE "-<DATA>
00009B06                          4557  
00009B06  548D                    4558           ADDQ.L  #2,A5
00009B08  3C3C 0020               4559           MOVE.W  #$0020,D6      MODE = -(A@)    100AAA
00009B0C                          4560  
00009B0C  0807 0004               4561           BTST    #4,D7
00009B10  6700 FF66               4562           BEQ     ER1            THIS MODE NOT ALLOWED
00009B14                          4563  
00009B14  6100 FF40               4564           BSR     GETREGA
00009B18  8C40                    4565           OR.W    D0,D6
00009B1A                          4566  
00009B1A  0C1D 0029               4567           CMPI.B  #')',(A5)+
00009B1E  6670                    4568           BNE.S   ER3            NO CLOSING PAREN
00009B20  4E75                    4569           RTS
00009B22                          4570  
00009B22  0C00 0041               4571  EA11     CMPI.B  #'A',D0
00009B26  6612                    4572           BNE.S   EA21
00009B28                          4573  
00009B28  1C3C 0008               4574           MOVE.B  #$08,D6        MODE = 001...
00009B2C  0807 0001               4575           BTST    #1,D7
00009B30  675E                    4576           BEQ.S   ER3            MODE NOT ALLOWED
00009B32                          4577  
00009B32  6100 FF22               4578           BSR     GETREGA
00009B36  8C40                    4579           OR.W    D0,D6
00009B38  4E75                    4580           RTS
00009B3A                          4581  
00009B3A  0C00 0044               4582  EA21     CMPI.B  #'D',D0
00009B3E  660E                    4583           BNE.S   EA31
00009B40                          4584  
00009B40  0807 0000               4585           BTST    #0,D7
00009B44  674A                    4586           BEQ.S   ER3            MODE NOT ALLOWED
00009B46                          4587  
00009B46  6100 FEF4               4588           BSR     GETREGD        MODE = D@   000AAA
00009B4A  8C40                    4589           OR.W    D0,D6
00009B4C  4E75                    4590           RTS
00009B4E                          4591  
00009B4E  0C00 0028               4592  EA31     CMPI.B  #'(',D0
00009B52  6640                    4593           BNE.S   EA41
00009B54                          4594  
00009B54                          4595  * POSSIBLE
00009B54                          4596  *  (A@)
00009B54                          4597  *  (A@)+
00009B54                          4598  *  (A@,R@)  IMPLIED ZERO DISPLACEMENT
00009B54                          4599  *
00009B54  528D                    4600           ADDQ.L  #1,A5
00009B56  6100 FEFE               4601           BSR     GETREGA
00009B5A  8C40                    4602           OR.W    D0,D6
00009B5C                          4603  
00009B5C  101D                    4604           MOVE.B  (A5)+,D0
00009B5E  0C00 002C               4605           CMPI.B  #',',D0
00009B62  6700 00D0               4606           BEQ     EA5116         MODE = (A@,R@)  ;IMPLIED D5 = 0 DATA
00009B66                          4607  
00009B66  0C00 0029               4608           CMPI.B  #')',D0        LOOK FOR CLOSING )
00009B6A  6624                    4609           BNE.S   ER3
00009B6C                          4610  
00009B6C  0C15 0020               4611           CMPI.B  #BLANK,(A5)    LOOK FOR BLANK
00009B70  6714                    4612           BEQ.S   EA35           MODE = (A@)
00009B72                          4613  
00009B72  0C15 002B               4614           CMPI.B  #'+',(A5)
00009B76  660E                    4615           BNE.S   EA35
00009B78  528D                    4616           ADDQ.L  #1,A5
00009B7A                          4617  
00009B7A  0046 0018               4618           ORI.W   #$18,D6        MODE = 011...    (A@)+
00009B7E                          4619  
00009B7E  0807 0003               4620           BTST    #3,D7
00009B82  670C                    4621           BEQ.S   ER3            MODE NOT ALLOWED
00009B84                          4622  
00009B84  4E75                    4623  EA34     RTS
00009B86                          4624  
00009B86  0046 0010               4625  EA35     ORI.W   #$10,D6        MODE = 010...   (A@)
00009B8A                          4626  
00009B8A  0807 0002               4627           BTST    #2,D7
00009B8E  66F4                    4628           BNE     EA34           MODE ALLOWED
00009B90  6000 0674               4629  ER3      BRA     ER             MODE NOT ALLOWED
00009B94                          4630  
00009B94                          4631  * POSSIBLE
00009B94                          4632  *   <DATA>   SHORT
00009B94                          4633  *   <DATA>   LONG
00009B94                          4634  *   <DATA>(A@)
00009B94                          4635  *   <DATA>(A@,R@)
00009B94                          4636  *   <DATA>(A@,R@.W)
00009B94                          4637  *   <DATA>(A@,R@.L)
00009B94                          4638  *   <DATA>(PC)
00009B94                          4639  *   <DATA>(PC,R@)
00009B94                          4640  *   <DATA>(PC,R@.W)
00009B94                          4641  *   <DATA>(PC,R@.L)
00009B94                          4642  *
00009B94  6100 FE36               4643  EA41     BSR     EV             EVALUATE EXPRESSION
00009B98  2A00                    4644           MOVE.L  D0,D5          D5 = <DATA>
00009B9A                          4645  
00009B9A  1015                    4646           MOVE.B  (A5),D0
00009B9C  0C00 002C               4647           CMPI.B  #',',D0
00009BA0  6706                    4648           BEQ.S   EA4102
00009BA2  0C00 0020               4649           CMPI.B  #BLANK,D0
00009BA6  6642                    4650           BNE.S   EA4120
00009BA8                          4651  
00009BA8                          4652  *  <DATA>         ONLY
00009BA8                          4653  * CHECK IF NEGATIVE NUMBER
00009BA8                          4654  
00009BA8  2005                    4655  EA4102   MOVE.L  D5,D0
00009BAA  6A02                    4656           BPL.S   EA4105         POSITIVE NUMBER
00009BAC  4680                    4657           NOT.L   D0
00009BAE  0240 8000               4658  EA4105   ANDI.W  #$8000,D0
00009BB2  4A80                    4659           TST.L   D0
00009BB4  661E                    4660           BNE.S   EA4135         .LONG
00009BB6                          4661  
00009BB6                          4662  *  <DATA>.W
00009BB6  0807 0007               4663           BTST    #7,D7
00009BBA  6608                    4664           BNE.S   EA4127         SHORT ALLOWED
00009BBC  0807 000F               4665           BTST    #15,D7
00009BC0  67CE                    4666           BEQ     ER3            MODE NOT ALLOWED
00009BC2  6010                    4667           BRA.S   EA4135         SPECIAL CASE (JMP.L)
00009BC4                          4668  
00009BC4  0046 0038               4669  EA4127   ORI.W   #$38,D6        EA = ABSOULTE SHORT
00009BC8  3985 3000               4670           MOVE.W  D5,(A4,D3)     D5 = DATA
00009BCC  5429 000A               4671           ADDQ.B  #2,TNB(A1)     BYTE COUNT
00009BD0  5483                    4672           ADDQ.L  #2,D3
00009BD2  4E75                    4673           RTS
00009BD4                          4674  
00009BD4                          4675  *EA4134  CMPI.B  #'L',D0
00009BD4                          4676  *        BNE     ER3
00009BD4                          4677  
00009BD4                          4678  *  <DATA>.L
00009BD4  0046 0039               4679  EA4135   ORI.W   #$39,D6        EA = ABSOLUTE LONG
00009BD8  2985 3000               4680           MOVE.L  D5,(A4,D3)
00009BDC  5829 000A               4681           ADDQ.B  #4,TNB(A1)     BYTE COUNT
00009BE0  5883                    4682           ADDQ.L  #4,D3
00009BE2  0807 0008               4683           BTST    #8,D7
00009BE6  67A8                    4684           BEQ     ER3            MODE NOT ALLOWED
00009BE8  4E75                    4685           RTS
00009BEA                          4686  
00009BEA  528D                    4687  EA4120   ADDQ.L  #1,A5
00009BEC  0C00 0028               4688           CMPI.B  #'(',D0
00009BF0  669E                    4689           BNE     ER3
00009BF2                          4690  
00009BF2  0C15 0050               4691           CMPI.B  #'P',(A5)
00009BF6  6700 008E               4692           BEQ     EA61
00009BFA                          4693  
00009BFA                          4694  * <DATA>(A@.......
00009BFA  6100 011A               4695           BSR     EA16BITS       -32K TO +32K
00009BFE                          4696  
00009BFE  6100 FE56               4697           BSR     GETREGA
00009C02  8C40                    4698           OR.W    D0,D6
00009C04                          4699  
00009C04  1015                    4700           MOVE.B  (A5),D0
00009C06  0C00 0029               4701           CMPI.B  #')',D0
00009C0A  6624                    4702           BNE.S   EA5115
00009C0C                          4703  
00009C0C                          4704  * <DATA>(A@)
00009C0C  528D                    4705           ADDQ.L  #1,A5
00009C0E                          4706  
00009C0E  0807 0005               4707           BTST    #5,D7
00009C12  6700 00A0               4708           BEQ     ER4            MODE NOT ALLOWED
00009C16                          4709  
00009C16  0046 0028               4710           ORI.W   #$0028,D6      MODE = 101AAA
00009C1A                          4711  
00009C1A  0C85 00010000           4712           CMPI.L  #$10000,D5
00009C20  6A00 0092               4713           BPL     ER4
00009C24                          4714  
00009C24  3985 3000               4715           MOVE.W  D5,(A4,D3)
00009C28  5429 000A               4716           ADDQ.B  #2,TNB(A1)
00009C2C  5483                    4717           ADDQ.L  #2,D3
00009C2E  4E75                    4718           RTS
00009C30                          4719  
00009C30  6100 05BA               4720  EA5115   BSR     COMMA
00009C34                          4721  
00009C34                          4722  *  <DATA>(A@,-----    ADDRESS REGISTER WITH INDEX
00009C34  48C5                    4723  EA5116   EXT.L   D5
00009C36  6100 00F2               4724           BSR     EA8BITS        -128 TO +127
00009C3A  6678                    4725           BNE.S   ER4
00009C3C  0245 00FF               4726           ANDI.W  #$00FF,D5
00009C40  0046 0030               4727           ORI.W   #$0030,D6      MODE  110---
00009C44                          4728  
00009C44  0807 0006               4729           BTST    #6,D7
00009C48  676A                    4730           BEQ.S   ER4            MODE NOT ALLOWED
00009C4A                          4731  
00009C4A  6100 FE18               4732           BSR     GETREGAD
00009C4E  8041                    4733           OR.W    D1,D0
00009C50  E858                    4734           ROR.W   #4,D0
00009C52  8A40                    4735           OR.W    D0,D5          EXTENSION WORD
00009C54                          4736  
00009C54                          4737  * BIT 11 EXTENSION WORD
00009C54                          4738  *   0 = SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REGISTER
00009C54                          4739  *   1 = LONG VALUE IN INDEX REGISTER  (DEFAULT)
00009C54                          4740  *
00009C54  101D                    4741           MOVE.B  (A5)+,D0
00009C56  0C00 0029               4742           CMPI.B  #')',D0
00009C5A  671E                    4743           BEQ.S   EA5119         DEFAULT   .W
00009C5C                          4744  
00009C5C  0C00 002E               4745           CMPI.B  #'.',D0
00009C60  6652                    4746           BNE.S   ER4
00009C62                          4747  
00009C62  101D                    4748           MOVE.B  (A5)+,D0
00009C64  0C00 0057               4749           CMPI.B  #'W',D0
00009C68  670A                    4750           BEQ.S   EA5118
00009C6A                          4751  
00009C6A  0C00 004C               4752           CMPI.B  #'L',D0
00009C6E  6644                    4753           BNE.S   ER4            NEITHER .W NOR .L
00009C70                          4754  
00009C70  0045 0800               4755           ORI.W   #$0800,D5      EXTENSION WORD, W/L BIT = .L
00009C74                          4756  
00009C74  0C1D 0029               4757  EA5118   CMPI.B  #')',(A5)+
00009C78  663A                    4758           BNE.S   ER4            NO CLOSING ")"
00009C7A                          4759  
00009C7A  3985 3000               4760  EA5119   MOVE.W  D5,(A4,D3)
00009C7E  5429 000A               4761           ADDQ.B  #2,TNB(A1)
00009C82  5483                    4762           ADDQ.L  #2,D3
00009C84  4E75                    4763  EA5119E  RTS
00009C86                          4764  
00009C86                          4765  *  <DATA>(P-----
00009C86  528D                    4766  EA61     ADDQ.L  #1,A5
00009C88  0C1D 0043               4767           CMPI.B  #'C',(A5)+
00009C8C  6600 0578               4768           BNE     ER
00009C90                          4769  
00009C90  9AA9 000E               4770           SUB.L   PCOUNTER(A1),D5  D5 = D5 - PC
00009C94  5585                    4771           SUBQ.L  #2,D5          D5 = D5 - (PC + 2)
00009C96                          4772  
00009C96  101D                    4773           MOVE.B  (A5)+,D0
00009C98  0C00 0029               4774           CMPI.B  #')',D0
00009C9C  661A                    4775           BNE.S   EA71
00009C9E                          4776  
00009C9E                          4777  *  <DATA>(PC)
00009C9E  0046 003A               4778           ORI.W   #$3A,D6        MODE = 111010
00009CA2                          4779  
00009CA2  6172                    4780           BSR.S   EA16BITS       -32K TO +32K
00009CA4  3985 3000               4781           MOVE.W  D5,(A4,D3)
00009CA8  5429 000A               4782           ADDQ.B  #2,TNB(A1)
00009CAC  5483                    4783           ADDQ.L  #2,D3
00009CAE                          4784  
00009CAE  0807 0009               4785           BTST    #9,D7
00009CB2  66D0                    4786           BNE     EA5119E
00009CB4  6000 0550               4787  ER4      BRA     ER
00009CB8                          4788  
00009CB8                          4789  *  <DATA>(PC----          PROGRAM COUNTER WITH INDEX
00009CB8  3C3C 003B               4790  EA71     MOVE.W  #$003B,D6      MODE = 111011
00009CBC                          4791  
00009CBC  0C00 002C               4792           CMPI.B  #',',D0
00009CC0  66F2                    4793           BNE     ER4
00009CC2                          4794  
00009CC2  0807 000A               4795           BTST    #10,D7
00009CC6  67EC                    4796           BEQ     ER4            MODE NOT ALLOWED
00009CC8                          4797  
00009CC8  6160                    4798           BSR.S   EA8BITS        -128 TO +127
00009CCA  66E8                    4799           BNE     ER4
00009CCC                          4800  
00009CCC  0245 00FF               4801           ANDI.W  #$00FF,D5      D5 = VALUE
00009CD0  6100 FD92               4802           BSR     GETREGAD
00009CD4  8041                    4803           OR.W    D1,D0
00009CD6                          4804  
00009CD6  E858                    4805           ROR.W   #4,D0
00009CD8  8A40                    4806           OR.W    D0,D5          D5 = EXTENSION WORD
00009CDA                          4807  
00009CDA  101D                    4808           MOVE.B  (A5)+,D0
00009CDC  0C00 0029               4809           CMPI.B  #')',D0
00009CE0  671E                    4810           BEQ.S   EA7115         DEFAULT  .W
00009CE2                          4811  
00009CE2  0C00 002E               4812           CMPI.B  #'.',D0
00009CE6  66CC                    4813           BNE     ER4
00009CE8                          4814  
00009CE8  101D                    4815           MOVE.B  (A5)+,D0
00009CEA  0C00 0057               4816           CMPI.B  #'W',D0
00009CEE  670A                    4817           BEQ.S   EA7113
00009CF0                          4818  
00009CF0  0C00 004C               4819           CMPI.B  #'L',D0
00009CF4  66BE                    4820           BNE     ER4
00009CF6  0045 0800               4821           ORI.W   #$0800,D5      EXTENSION WORD W/L = .L
00009CFA                          4822  
00009CFA  0C1D 0029               4823  EA7113   CMPI.B  #')',(A5)+
00009CFE  66B4                    4824           BNE     ER4            NO CLOSING ")"
00009D00                          4825  
00009D00  3985 3000               4826  EA7115   MOVE.W  D5,(A4,D3)
00009D04  5429 000A               4827           ADDQ.B  #2,TNB(A1)
00009D08  5483                    4828           ADDQ.L  #2,D3
00009D0A  4E75                    4829           RTS
00009D0C                          4830  
00009D0C                          4831  ****************************************************************************
00009D0C                          4832  *
00009D0C                          4833  *        ROUTINES TO TEST FOR VALID EFFECTIVE ADDRESSES
00009D0C                          4834  *
00009D0C                          4835  *        EA16BIT   tests that -32768 <= D5 <= 65535.  (signed or unsigned)
00009D0C                          4836  *        EA16BITS  tests that -32768 <= D5 <= 32767.  (signed only)
00009D0C                          4837  *        EA8BIT    tests that   -128 <= D5 <=   255.  (signed or unsigned)
00009D0C                          4838  *        EA8BITS   tests that   -128 <= D5 <=   127.  (signed only)
00009D0C                          4839  *
00009D0C                          4840  *        The 16-bit tests branch to ER if invalid, else return.
00009D0C                          4841  *        The  8-bit tests return condition codes <EQ> if valid, else <NE>.
00009D0C                          4842  *        D5 is preserved unless a branch to ER results.
00009D0C                          4843  *        D1 is destroyed.
00009D0C                          4844  *
00009D0C                          4845  ****************************************************************************
00009D0C                          4846  
00009D0C                          4847  EA16BIT:
00009D0C  610C                    4848           BSR.S   EA16BITC       CHECK RANGE -32768 TO 32767.  IF
00009D0E  2205                    4849           MOVE.L  D5,D1          INVALID, CHECK WHETHER THE HIGH 16
00009D10  4841                    4850           SWAP    D1             BITS ARE 0 (WHICH IMPLIES THAT
00009D12  4A41                    4851           TST.W   D1             D5 <= 65535).  IF NOT, FALL THRU TO
00009D14  6728                    4852           BEQ.S   EASEX          THE 16-BIT SIGNED TEST--WE WILL
00009D16                          4853  *                               FAIL AND GO TO ER.
00009D16                          4854  
00009D16                          4855  EA16BITS:
00009D16  487A 04EE               4856           PEA     ER(PC)         SET UP TO RETURN TO ER IF INVALID.
00009D1A                          4857  
00009D1A  223C 00007FFF           4858  EA16BITC MOVE.L  #$7FFF,D1      D1  <--  2^16-1.
00009D20  600E                    4859           BRA.S   EAS            GO TO THE COMMON TEST ROUTINE.
00009D22                          4860  
00009D22                          4861  
00009D22                          4862  EA8BIT:
00009D22  610A                    4863           BSR.S   EA8BITC        CHECK RANGE -128 TO 127.  IF INVALID,
00009D24  2205                    4864           MOVE.L  D5,D1          CHECK WHETHER THE HIGH 24 BITS ARE
00009D26  E089                    4865           LSR.L   #8,D1          0 (WHICH IMPLIES THAT D5 <= 255).
00009D28  4E75                    4866           RTS
00009D2A                          4867  
00009D2A                          4868  EA8BITS:
00009D2A  6102                    4869           BSR.S   EA8BITC        JUST CHECK FOR -127 <= D5 <= 128.
00009D2C  4E75                    4870           RTS                    (BSR PUTS NEEDED ADDRESS ON STACK!)
00009D2E                          4871  
00009D2E  727F                    4872  EA8BITC  MOVEQ   #$7F,D1        D1  <--  2^8 - 1.
00009D30                          4873  
00009D30                          4874  *                  *** NOTE: THIS ROUTINE PLAYS WITH THE STACK ***
00009D30  BA81                    4875  EAS      CMP.L   D1,D5          IF D5 > 2^N-1, RETURN WITH <NE> (INVAL).
00009D32  6E0A                    4876           BGT.S   EASEX
00009D34  4681                    4877           NOT.L   D1             IF D5 < -2^N,  RETURN WITH <NE> (INVAL).
00009D36  BA81                    4878           CMP.L   D1,D5
00009D38  6D04                    4879           BLT.S   EASEX
00009D3A                          4880  
00009D3A  588F                    4881           ADDQ.L  #4,A7          POP THE RETURN ADDRESS OFF THE STACK,
00009D3C  4281                    4882           CLR.L   D1             SET <EQ> (VALID), AND RETURN.
00009D3E                          4883  
00009D3E  4E75                    4884  EASEX    RTS
00009D40                          4885  
00009D40                          4886  ADR      MACRO
00009D40                          4887           DC.W    M\1-XBASE
00009D40                          4888           ENDM
00009D40                          4889  
00009D40                          4890  TBLKEYS  DS     0              INDEX
00009D40                          4891m          ADR    ABCD            0  ABCD SBCD
00009D40= 0810                    4892m          DC.W    MABCD-XBASE
00009D42                          4893m          ENDM
00009D42                          4894m          ADR    ADD             1  ADD  SUB
00009D42= 08C8                    4895m          DC.W    MADD-XBASE
00009D44                          4896m          ENDM
00009D44                          4897m          ADR    ADDA            2  ADDA CMPA SUBA
00009D44= 0970                    4898m          DC.W    MADDA-XBASE
00009D46                          4899m          ENDM
00009D46                          4900m          ADR    ADDI            3  ADDI CMPI SUBI
00009D46= 0922                    4901m          DC.W    MADDI-XBASE
00009D48                          4902m          ENDM
00009D48                          4903m          ADR    ADDQ            4  ADDQ SUBQ
00009D48= 0998                    4904m          DC.W    MADDQ-XBASE
00009D4A                          4905m          ENDM
00009D4A                          4906m          ADR    ADDX            5  ADDX SUBX
00009D4A= 09DA                    4907m          DC.W    MADDX-XBASE
00009D4C                          4908m          ENDM
00009D4C                          4909m          ADR    AND             6  AND  EOR OR
00009D4C= 0A1C                    4910m          DC.W    MAND-XBASE
00009D4E                          4911m          ENDM
00009D4E                          4912m          ADR    ASL             7  ASL  LSL ROL ROXL
00009D4E= 0ACA                    4913m          DC.W    MASL-XBASE
00009D50                          4914m          ENDM
00009D50                          4915m          ADR    DBCC            8  DBCC
00009D50= 0BB6                    4916m          DC.W    MDBCC-XBASE
00009D52                          4917m          ENDM
00009D52                          4918m          ADR    BCHG            9  BCHG
00009D52= 0B3A                    4919m          DC.W    MBCHG-XBASE
00009D54                          4920m          ENDM
00009D54                          4921m          ADR    BRA            10  BRA  BSR  BCC
00009D54= 0BC4                    4922m          DC.W    MBRA-XBASE
00009D56                          4923m          ENDM
00009D56                          4924m          ADR    BSET           11  BSET
00009D56= 0B92                    4925m          DC.W    MBSET-XBASE
00009D58                          4926m          ENDM
00009D58                          4927m          ADR    CHK            12  CHK  DIVS DIVU MILS MULU
00009D58= 0C1C                    4928m          DC.W    MCHK-XBASE
00009D5A                          4929m          ENDM
00009D5A                          4930m          ADR    CLR            13  CLR NEG NEGX NOT TST
00009D5A= 0C36                    4931m          DC.W    MCLR-XBASE
00009D5C                          4932m          ENDM
00009D5C                          4933m          ADR    CMPM           14  CMPM
00009D5C= 0C44                    4934m          DC.W    MCMPM-XBASE
00009D5E                          4935m          ENDM
00009D5E                          4936m          ADR    MOVEQ          15  MOVEQ
00009D5E= 0E24                    4937m          DC.W    MMOVEQ-XBASE
00009D60                          4938m          ENDM
00009D60                          4939m          ADR    EXG            16  EXG
00009D60= 0C6E                    4940m          DC.W    MEXG-XBASE
00009D62                          4941m          ENDM
00009D62                          4942m          ADR    EXT            17  EXT
00009D62= 0CA8                    4943m          DC.W    MEXT-XBASE
00009D64                          4944m          ENDM
00009D64                          4945m          ADR    JMP            18  JMP  JSR
00009D64= 0FB8                    4946m          DC.W    MJMP-XBASE
00009D66                          4947m          ENDM
00009D66                          4948m          ADR    LEA            19  LEA
00009D66= 0FE4                    4949m          DC.W    MLEA-XBASE
00009D68                          4950m          ENDM
00009D68                          4951m          ADR    LINK           20  LINK
00009D68= 102E                    4952m          DC.W    MLINK-XBASE
00009D6A                          4953m          ENDM
00009D6A                          4954m          ADR    MOVE           21  MOVE
00009D6A= 0E70                    4955m          DC.W    MMOVE-XBASE
00009D6C                          4956m          ENDM
00009D6C                          4957m          ADR    CMMD2          22  NOP RESET RTE RTR RTS TRAPV
00009D6C= 07DE                    4958m          DC.W    MCMMD2-XBASE
00009D6E                          4959m          ENDM
00009D6E                          4960m          ADR    STOP           23  STOP
00009D6E= 104C                    4961m          DC.W    MSTOP-XBASE
00009D70                          4962m          ENDM
00009D70                          4963m          ADR    SWAP           24  SWAP
00009D70= 100C                    4964m          DC.W    MSWAP-XBASE
00009D72                          4965m          ENDM
00009D72                          4966m          ADR    TRAP           25  TRAP
00009D72= 1064                    4967m          DC.W    MTRAP-XBASE
00009D74                          4968m          ENDM
00009D74                          4969m          ADR    UNLK           26  UNLK
00009D74= 1076                    4970m          DC.W    MUNLK-XBASE
00009D76                          4971m          ENDM
00009D76                          4972m          ADR    MOVEM          27  MOVEM
00009D76= 0CC2                    4973m          DC.W    MMOVEM-XBASE
00009D78                          4974m          ENDM
00009D78                          4975m          ADR    ANDI           28  ANDI EORI ORI
00009D78= 0938                    4976m          DC.W    MANDI-XBASE
00009D7A                          4977m          ENDM
00009D7A                          4978m          ADR    SCC            29  NBCD SCC TAS
00009D7A= 0B2C                    4979m          DC.W    MSCC-XBASE
00009D7C                          4980m          ENDM
00009D7C                          4981m          ADR    BCLR           30  BCLR
00009D7C= 0B9E                    4982m          DC.W    MBCLR-XBASE
00009D7E                          4983m          ENDM
00009D7E                          4984m          ADR    BTST           31  BTST
00009D7E= 0BAA                    4985m          DC.W    MBTST-XBASE
00009D80                          4986m          ENDM
00009D80                          4987m          ADR    MOVEA          32  MOVEA
00009D80= 0F8C                    4988m          DC.W    MMOVEA-XBASE
00009D82                          4989m          ENDM
00009D82                          4990m          ADR    MOVEP          33  MOVEP
00009D82= 0DC2                    4991m          DC.W    MMOVEP-XBASE
00009D84                          4992m          ENDM
00009D84                          4993m          ADR    CMP            34  CMP
00009D84= 0856                    4994m          DC.W    MCMP-XBASE
00009D86                          4995m          ENDM
00009D86                          4996m          ADR    EOR            35  EOR
00009D86= 0A7E                    4997m          DC.W    MEOR-XBASE
00009D88                          4998m          ENDM
00009D88                          4999m          ADR    PEA            36  PEA
00009D88= 0FFE                    5000m          DC.W    MPEA-XBASE
00009D8A                          5001m          ENDM
00009D8A                          5002m          ADR    DC             37  DC.W
00009D8A= 1080                    5003m          DC.W    MDC-XBASE
00009D8C                          5004m          ENDM
00009D8C                          5005  
00009D8C                          5006  
00009D8C                          5007  * \1,\2 = MNEUMONIC (\2 SIGN BIT SET AS LAST CHARACTER)
00009D8C                          5008  * \3    = INDEX TO TABLKEYS
00009D8C                          5009  * \4,\5 = FIRST WORD MASK
00009D8C                          5010  * \6    = NO OPERAND ALLOWED IF SIGN SET
00009D8C                          5011  * \7    = .S ALLOWED (.W NOT ALLOWED)
00009D8C                          5012  OPC      MACRO
00009D8C                          5013           DC.B    '\1','\2'+128
00009D8C                          5014           DC.B    \3+\6+\7,$\4,$\5
00009D8C                          5015           ENDM
00009D8C                          5016  
00009D8C  =00000080               5017  NOC      EQU     $80            (BIT 7 SET) NO OPERAND
00009D8C  =00000040               5018  NW       EQU     $40            (BIT 6 SET) .W NOT ALLOWED
00009D8C                          5019  
00009D8C                          5020m TBLOPC   OPC     ABC,D,0,C1,00,0,0     ABCD
00009D8C= 41 42 43 C4             5021m          DC.B    'ABC','D'+128
00009D90= 00 C1 00                5022m          DC.B    0+0+0,$C1,$00
00009D93                          5023m          ENDM
00009D93                          5024m          OPC     ADD,A,2,D0,C0,0,0     ADDA
00009D93= 41 44 44 C1             5025m          DC.B    'ADD','A'+128
00009D97= 02 D0 C0                5026m          DC.B    2+0+0,$D0,$C0
00009D9A                          5027m          ENDM
00009D9A                          5028m          OPC     ADD,I,3,06,00,0,0     ADDI
00009D9A= 41 44 44 C9             5029m          DC.B    'ADD','I'+128
00009D9E= 03 06 00                5030m          DC.B    3+0+0,$06,$00
00009DA1                          5031m          ENDM
00009DA1                          5032m          OPC     ADD,Q,4,50,00,0,0     ADDQ
00009DA1= 41 44 44 D1             5033m          DC.B    'ADD','Q'+128
00009DA5= 04 50 00                5034m          DC.B    4+0+0,$50,$00
00009DA8                          5035m          ENDM
00009DA8                          5036m          OPC     ADD,X,5,D1,00,0,0     ADDX
00009DA8= 41 44 44 D8             5037m          DC.B    'ADD','X'+128
00009DAC= 05 D1 00                5038m          DC.B    5+0+0,$D1,$00
00009DAF                          5039m          ENDM
00009DAF                          5040m          OPC     AD,D,1,D0,00,0,0      ADD
00009DAF= 41 44 C4                5041m          DC.B    'AD','D'+128
00009DB2= 01 D0 00                5042m          DC.B    1+0+0,$D0,$00
00009DB5                          5043m          ENDM
00009DB5                          5044m          OPC     AND,I,28,02,00,0,0    ANDI
00009DB5= 41 4E 44 C9             5045m          DC.B    'AND','I'+128
00009DB9= 1C 02 00                5046m          DC.B    28+0+0,$02,$00
00009DBC                          5047m          ENDM
00009DBC                          5048m          OPC     AN,D,6,C0,00,0,0      AND
00009DBC= 41 4E C4                5049m          DC.B    'AN','D'+128
00009DBF= 06 C0 00                5050m          DC.B    6+0+0,$C0,$00
00009DC2                          5051m          ENDM
00009DC2                          5052m          OPC     AS,L,7,E1,00,0,0      ASL
00009DC2= 41 53 CC                5053m          DC.B    'AS','L'+128
00009DC5= 07 E1 00                5054m          DC.B    7+0+0,$E1,$00
00009DC8                          5055m          ENDM
00009DC8                          5056m          OPC     AS,R,07,E0,00,0,0     ASR
00009DC8= 41 53 D2                5057m          DC.B    'AS','R'+128
00009DCB= 07 E0 00                5058m          DC.B    07+0+0,$E0,$00
00009DCE                          5059m          ENDM
00009DCE                          5060m          OPC     BR,A,10,60,00,0,NW    BRA
00009DCE= 42 52 C1                5061m          DC.B    'BR','A'+128
00009DD1= 4A 60 00                5062m          DC.B    10+0+NW,$60,$00
00009DD4                          5063m          ENDM
00009DD4                          5064m          OPC     BH,I,10,62,00,0,NW    BHI
00009DD4= 42 48 C9                5065m          DC.B    'BH','I'+128
00009DD7= 4A 62 00                5066m          DC.B    10+0+NW,$62,$00
00009DDA                          5067m          ENDM
00009DDA                          5068m          OPC     BL,S,10,63,00,0,NW    BLS
00009DDA= 42 4C D3                5069m          DC.B    'BL','S'+128
00009DDD= 4A 63 00                5070m          DC.B    10+0+NW,$63,$00
00009DE0                          5071m          ENDM
00009DE0                          5072m          OPC     BC,C,10,64,00,0,NW    BCC
00009DE0= 42 43 C3                5073m          DC.B    'BC','C'+128
00009DE3= 4A 64 00                5074m          DC.B    10+0+NW,$64,$00
00009DE6                          5075m          ENDM
00009DE6                          5076m          OPC     BC,S,10,65,00,0,NW    BCS
00009DE6= 42 43 D3                5077m          DC.B    'BC','S'+128
00009DE9= 4A 65 00                5078m          DC.B    10+0+NW,$65,$00
00009DEC                          5079m          ENDM
00009DEC                          5080m          OPC     BN,E,10,66,00,0,NW    BNE
00009DEC= 42 4E C5                5081m          DC.B    'BN','E'+128
00009DEF= 4A 66 00                5082m          DC.B    10+0+NW,$66,$00
00009DF2                          5083m          ENDM
00009DF2                          5084m          OPC     BE,Q,10,67,00,0,NW    BEQ
00009DF2= 42 45 D1                5085m          DC.B    'BE','Q'+128
00009DF5= 4A 67 00                5086m          DC.B    10+0+NW,$67,$00
00009DF8                          5087m          ENDM
00009DF8                          5088m          OPC     BV,C,10,68,00,0,NW    BVC
00009DF8= 42 56 C3                5089m          DC.B    'BV','C'+128
00009DFB= 4A 68 00                5090m          DC.B    10+0+NW,$68,$00
00009DFE                          5091m          ENDM
00009DFE                          5092m          OPC     BV,S,10,69,00,0,NW    BVS
00009DFE= 42 56 D3                5093m          DC.B    'BV','S'+128
00009E01= 4A 69 00                5094m          DC.B    10+0+NW,$69,$00
00009E04                          5095m          ENDM
00009E04                          5096m          OPC     BP,L,10,6A,00,0,NW    BPL
00009E04= 42 50 CC                5097m          DC.B    'BP','L'+128
00009E07= 4A 6A 00                5098m          DC.B    10+0+NW,$6A,$00
00009E0A                          5099m          ENDM
00009E0A                          5100m          OPC     BM,I,10,6B,00,0,NW    BMI
00009E0A= 42 4D C9                5101m          DC.B    'BM','I'+128
00009E0D= 4A 6B 00                5102m          DC.B    10+0+NW,$6B,$00
00009E10                          5103m          ENDM
00009E10                          5104m          OPC     BG,E,10,6C,00,0,NW    BGE
00009E10= 42 47 C5                5105m          DC.B    'BG','E'+128
00009E13= 4A 6C 00                5106m          DC.B    10+0+NW,$6C,$00
00009E16                          5107m          ENDM
00009E16                          5108m          OPC     BL,T,10,6D,00,0,NW    BLT
00009E16= 42 4C D4                5109m          DC.B    'BL','T'+128
00009E19= 4A 6D 00                5110m          DC.B    10+0+NW,$6D,$00
00009E1C                          5111m          ENDM
00009E1C                          5112m          OPC     BG,T,10,6E,00,0,NW    BGT
00009E1C= 42 47 D4                5113m          DC.B    'BG','T'+128
00009E1F= 4A 6E 00                5114m          DC.B    10+0+NW,$6E,$00
00009E22                          5115m          ENDM
00009E22                          5116m          OPC     BL,E,10,6F,00,0,NW    BLE
00009E22= 42 4C C5                5117m          DC.B    'BL','E'+128
00009E25= 4A 6F 00                5118m          DC.B    10+0+NW,$6F,$00
00009E28                          5119m          ENDM
00009E28                          5120m          OPC     BCH,G,9,01,40,0,0     BCHG
00009E28= 42 43 48 C7             5121m          DC.B    'BCH','G'+128
00009E2C= 09 01 40                5122m          DC.B    9+0+0,$01,$40
00009E2F                          5123m          ENDM
00009E2F                          5124m          OPC     BCL,R,30,01,80,0,0    BCLR      DYNAMIC
00009E2F= 42 43 4C D2             5125m          DC.B    'BCL','R'+128
00009E33= 1E 01 80                5126m          DC.B    30+0+0,$01,$80
00009E36                          5127m          ENDM
00009E36                          5128m          OPC     BSE,T,11,01,C0,0,0    BSET
00009E36= 42 53 45 D4             5129m          DC.B    'BSE','T'+128
00009E3A= 0B 01 C0                5130m          DC.B    11+0+0,$01,$C0
00009E3D                          5131m          ENDM
00009E3D                          5132m          OPC     BS,R,10,61,00,0,NW    BSR
00009E3D= 42 53 D2                5133m          DC.B    'BS','R'+128
00009E40= 4A 61 00                5134m          DC.B    10+0+NW,$61,$00
00009E43                          5135m          ENDM
00009E43                          5136m          OPC     BTS,T,31,01,00,0,0    BTST
00009E43= 42 54 53 D4             5137m          DC.B    'BTS','T'+128
00009E47= 1F 01 00                5138m          DC.B    31+0+0,$01,$00
00009E4A                          5139m          ENDM
00009E4A                          5140m          OPC     B,T,10,60,00,0,NW     BT
00009E4A= 42 D4                   5141m          DC.B    'B','T'+128
00009E4C= 4A 60 00                5142m          DC.B    10+0+NW,$60,$00
00009E4F                          5143m          ENDM
00009E4F                          5144m          OPC     CH,K,12,41,80,0,0     CHK
00009E4F= 43 48 CB                5145m          DC.B    'CH','K'+128
00009E52= 0C 41 80                5146m          DC.B    12+0+0,$41,$80
00009E55                          5147m          ENDM
00009E55                          5148m          OPC     CL,R,13,42,00,0,0     CLR
00009E55= 43 4C D2                5149m          DC.B    'CL','R'+128
00009E58= 0D 42 00                5150m          DC.B    13+0+0,$42,$00
00009E5B                          5151m          ENDM
00009E5B                          5152m          OPC     CMP,A,2,B0,C0,0,0     CMPA
00009E5B= 43 4D 50 C1             5153m          DC.B    'CMP','A'+128
00009E5F= 02 B0 C0                5154m          DC.B    2+0+0,$B0,$C0
00009E62                          5155m          ENDM
00009E62                          5156m          OPC     CMP,I,3,0C,00,0,0     CMPI
00009E62= 43 4D 50 C9             5157m          DC.B    'CMP','I'+128
00009E66= 03 0C 00                5158m          DC.B    3+0+0,$0C,$00
00009E69                          5159m          ENDM
00009E69                          5160m          OPC     CMP,M,14,B1,08,0,0    CMPM
00009E69= 43 4D 50 CD             5161m          DC.B    'CMP','M'+128
00009E6D= 0E B1 08                5162m          DC.B    14+0+0,$B1,$08
00009E70                          5163m          ENDM
00009E70                          5164m          OPC     CM,P,34,B0,00,0,0     CMP
00009E70= 43 4D D0                5165m          DC.B    'CM','P'+128
00009E73= 22 B0 00                5166m          DC.B    34+0+0,$B0,$00
00009E76                          5167m          ENDM
00009E76                          5168m          OPC     DB,T,8,50,C8,0,NW     DBT
00009E76= 44 42 D4                5169m          DC.B    'DB','T'+128
00009E79= 48 50 C8                5170m          DC.B    8+0+NW,$50,$C8
00009E7C                          5171m          ENDM
00009E7C                          5172m          OPC     DB,F,8,51,C8,0,NW     DBF
00009E7C= 44 42 C6                5173m          DC.B    'DB','F'+128
00009E7F= 48 51 C8                5174m          DC.B    8+0+NW,$51,$C8
00009E82                          5175m          ENDM
00009E82                          5176m          OPC     DBR,A,8,51,C8,0,NW    DBRA
00009E82= 44 42 52 C1             5177m          DC.B    'DBR','A'+128
00009E86= 48 51 C8                5178m          DC.B    8+0+NW,$51,$C8
00009E89                          5179m          ENDM
00009E89                          5180m          OPC     DBH,I,8,52,C8,0,NW    DBHI
00009E89= 44 42 48 C9             5181m          DC.B    'DBH','I'+128
00009E8D= 48 52 C8                5182m          DC.B    8+0+NW,$52,$C8
00009E90                          5183m          ENDM
00009E90                          5184m          OPC     DBL,S,8,53,C8,0,NW    DBLS
00009E90= 44 42 4C D3             5185m          DC.B    'DBL','S'+128
00009E94= 48 53 C8                5186m          DC.B    8+0+NW,$53,$C8
00009E97                          5187m          ENDM
00009E97                          5188m          OPC     DBC,C,8,54,C8,0,NW    DBCC
00009E97= 44 42 43 C3             5189m          DC.B    'DBC','C'+128
00009E9B= 48 54 C8                5190m          DC.B    8+0+NW,$54,$C8
00009E9E                          5191m          ENDM
00009E9E                          5192m          OPC     DBC,S,8,55,C8,0,NW    DBCS
00009E9E= 44 42 43 D3             5193m          DC.B    'DBC','S'+128
00009EA2= 48 55 C8                5194m          DC.B    8+0+NW,$55,$C8
00009EA5                          5195m          ENDM
00009EA5                          5196m          OPC     DBN,E,8,56,C8,0,NW    DBNE
00009EA5= 44 42 4E C5             5197m          DC.B    'DBN','E'+128
00009EA9= 48 56 C8                5198m          DC.B    8+0+NW,$56,$C8
00009EAC                          5199m          ENDM
00009EAC                          5200m          OPC     DBE,Q,8,57,C8,0,NW    DBEQ
00009EAC= 44 42 45 D1             5201m          DC.B    'DBE','Q'+128
00009EB0= 48 57 C8                5202m          DC.B    8+0+NW,$57,$C8
00009EB3                          5203m          ENDM
00009EB3                          5204m          OPC     DBV,C,8,58,C8,0,NW    DBVC
00009EB3= 44 42 56 C3             5205m          DC.B    'DBV','C'+128
00009EB7= 48 58 C8                5206m          DC.B    8+0+NW,$58,$C8
00009EBA                          5207m          ENDM
00009EBA                          5208m          OPC     DBV,S,8,59,C8,0,NW    DBVS
00009EBA= 44 42 56 D3             5209m          DC.B    'DBV','S'+128
00009EBE= 48 59 C8                5210m          DC.B    8+0+NW,$59,$C8
00009EC1                          5211m          ENDM
00009EC1                          5212m          OPC     DBP,L,8,5A,C8,0,NW    DBPL
00009EC1= 44 42 50 CC             5213m          DC.B    'DBP','L'+128
00009EC5= 48 5A C8                5214m          DC.B    8+0+NW,$5A,$C8
00009EC8                          5215m          ENDM
00009EC8                          5216m          OPC     DBM,I,8,5B,C8,0,NW    DBMI
00009EC8= 44 42 4D C9             5217m          DC.B    'DBM','I'+128
00009ECC= 48 5B C8                5218m          DC.B    8+0+NW,$5B,$C8
00009ECF                          5219m          ENDM
00009ECF                          5220m          OPC     DBG,E,8,5C,C8,0,NW    DBGE
00009ECF= 44 42 47 C5             5221m          DC.B    'DBG','E'+128
00009ED3= 48 5C C8                5222m          DC.B    8+0+NW,$5C,$C8
00009ED6                          5223m          ENDM
00009ED6                          5224m          OPC     DBL,T,8,5D,C8,0,NW    DBLT
00009ED6= 44 42 4C D4             5225m          DC.B    'DBL','T'+128
00009EDA= 48 5D C8                5226m          DC.B    8+0+NW,$5D,$C8
00009EDD                          5227m          ENDM
00009EDD                          5228m          OPC     DBG,T,8,5E,C8,0,NW    DBGT
00009EDD= 44 42 47 D4             5229m          DC.B    'DBG','T'+128
00009EE1= 48 5E C8                5230m          DC.B    8+0+NW,$5E,$C8
00009EE4                          5231m          ENDM
00009EE4                          5232m          OPC     DBL,E,8,5F,C8,0,NW    DBLE
00009EE4= 44 42 4C C5             5233m          DC.B    'DBL','E'+128
00009EE8= 48 5F C8                5234m          DC.B    8+0+NW,$5F,$C8
00009EEB                          5235m          ENDM
00009EEB                          5236m          OPC     DC.,W,37,00,00,0,0    DC.W  (WORD ONLY)
00009EEB= 44 43 2E D7             5237m          DC.B    'DC.','W'+128
00009EEF= 25 00 00                5238m          DC.B    37+0+0,$00,$00
00009EF2                          5239m          ENDM
00009EF2                          5240m          OPC     DIV,S,12,81,C0,0,0    DIVS
00009EF2= 44 49 56 D3             5241m          DC.B    'DIV','S'+128
00009EF6= 0C 81 C0                5242m          DC.B    12+0+0,$81,$C0
00009EF9                          5243m          ENDM
00009EF9                          5244m          OPC     DIV,U,12,80,C0,0,0    DIVU
00009EF9= 44 49 56 D5             5245m          DC.B    'DIV','U'+128
00009EFD= 0C 80 C0                5246m          DC.B    12+0+0,$80,$C0
00009F00                          5247m          ENDM
00009F00                          5248m          OPC     EOR,I,28,0A,00,0,0    EORI
00009F00= 45 4F 52 C9             5249m          DC.B    'EOR','I'+128
00009F04= 1C 0A 00                5250m          DC.B    28+0+0,$0A,$00
00009F07                          5251m          ENDM
00009F07                          5252m          OPC     EO,R,35,B1,00,0,0     EOR
00009F07= 45 4F D2                5253m          DC.B    'EO','R'+128
00009F0A= 23 B1 00                5254m          DC.B    35+0+0,$B1,$00
00009F0D                          5255m          ENDM
00009F0D                          5256m          OPC     EX,G,16,C1,00,0,0     EXG
00009F0D= 45 58 C7                5257m          DC.B    'EX','G'+128
00009F10= 10 C1 00                5258m          DC.B    16+0+0,$C1,$00
00009F13                          5259m          ENDM
00009F13                          5260m          OPC     EX,T,17,48,00,0,0     EXT
00009F13= 45 58 D4                5261m          DC.B    'EX','T'+128
00009F16= 11 48 00                5262m          DC.B    17+0+0,$48,$00
00009F19                          5263m          ENDM
00009F19                          5264m          OPC     JM,P,18,4E,C0,0,NW    JMP
00009F19= 4A 4D D0                5265m          DC.B    'JM','P'+128
00009F1C= 52 4E C0                5266m          DC.B    18+0+NW,$4E,$C0
00009F1F                          5267m          ENDM
00009F1F                          5268m          OPC     JS,R,18,4E,80,0,NW    JSR
00009F1F= 4A 53 D2                5269m          DC.B    'JS','R'+128
00009F22= 52 4E 80                5270m          DC.B    18+0+NW,$4E,$80
00009F25                          5271m          ENDM
00009F25                          5272m          OPC     LE,A,19,41,C0,0,0     LEA
00009F25= 4C 45 C1                5273m          DC.B    'LE','A'+128
00009F28= 13 41 C0                5274m          DC.B    19+0+0,$41,$C0
00009F2B                          5275m          ENDM
00009F2B                          5276m          OPC     LIN,K,20,4E,50,0,0    LINK
00009F2B= 4C 49 4E CB             5277m          DC.B    'LIN','K'+128
00009F2F= 14 4E 50                5278m          DC.B    20+0+0,$4E,$50
00009F32                          5279m          ENDM
00009F32                          5280m          OPC     LS,L,7,E3,08,0,0      LSL
00009F32= 4C 53 CC                5281m          DC.B    'LS','L'+128
00009F35= 07 E3 08                5282m          DC.B    7+0+0,$E3,$08
00009F38                          5283m          ENDM
00009F38                          5284m          OPC     LS,R,07,E2,08,0,0     LSR
00009F38= 4C 53 D2                5285m          DC.B    'LS','R'+128
00009F3B= 07 E2 08                5286m          DC.B    07+0+0,$E2,$08
00009F3E                          5287m          ENDM
00009F3E                          5288m          OPC     MOVE,A,32,00,04,0,0   MOVEA
00009F3E= 4D 4F 56 45 C1          5289m          DC.B    'MOVE','A'+128
00009F43= 20 00 04                5290m          DC.B    32+0+0,$00,$04
00009F46                          5291m          ENDM
00009F46                          5292m          OPC     MOVE,M,27,48,80,0,0   MOVEM
00009F46= 4D 4F 56 45 CD          5293m          DC.B    'MOVE','M'+128
00009F4B= 1B 48 80                5294m          DC.B    27+0+0,$48,$80
00009F4E                          5295m          ENDM
00009F4E                          5296m          OPC     MOVE,P,33,01,08,0,0   MOVEP
00009F4E= 4D 4F 56 45 D0          5297m          DC.B    'MOVE','P'+128
00009F53= 21 01 08                5298m          DC.B    33+0+0,$01,$08
00009F56                          5299m          ENDM
00009F56                          5300m          OPC     MOVE,Q,15,70,00,0,0   MOVEQ
00009F56= 4D 4F 56 45 D1          5301m          DC.B    'MOVE','Q'+128
00009F5B= 0F 70 00                5302m          DC.B    15+0+0,$70,$00
00009F5E                          5303m          ENDM
00009F5E                          5304m          OPC     MOV,E,21,00,00,0,0    MOVE
00009F5E= 4D 4F 56 C5             5305m          DC.B    'MOV','E'+128
00009F62= 15 00 00                5306m          DC.B    21+0+0,$00,$00
00009F65                          5307m          ENDM
00009F65                          5308m          OPC     MUL,S,12,C1,C0,0,0    MULS
00009F65= 4D 55 4C D3             5309m          DC.B    'MUL','S'+128
00009F69= 0C C1 C0                5310m          DC.B    12+0+0,$C1,$C0
00009F6C                          5311m          ENDM
00009F6C                          5312m          OPC     MUL,U,12,C0,C0,0,0    MULU
00009F6C= 4D 55 4C D5             5313m          DC.B    'MUL','U'+128
00009F70= 0C C0 C0                5314m          DC.B    12+0+0,$C0,$C0
00009F73                          5315m          ENDM
00009F73                          5316m          OPC     NBC,D,29,48,0,0,0     NBCD
00009F73= 4E 42 43 C4             5317m          DC.B    'NBC','D'+128
00009F77= 1D 48 00                5318m          DC.B    29+0+0,$48,$0
00009F7A                          5319m          ENDM
00009F7A                          5320m          OPC     NEG,X,13,40,00,0,0    NEGX
00009F7A= 4E 45 47 D8             5321m          DC.B    'NEG','X'+128
00009F7E= 0D 40 00                5322m          DC.B    13+0+0,$40,$00
00009F81                          5323m          ENDM
00009F81                          5324m          OPC     NE,G,13,44,00,0,0     NEG
00009F81= 4E 45 C7                5325m          DC.B    'NE','G'+128
00009F84= 0D 44 00                5326m          DC.B    13+0+0,$44,$00
00009F87                          5327m          ENDM
00009F87                          5328m          OPC     NO,P,22,4E,71,NOC,0   NOP
00009F87= 4E 4F D0                5329m          DC.B    'NO','P'+128
00009F8A= 96 4E 71                5330m          DC.B    22+NOC+0,$4E,$71
00009F8D                          5331m          ENDM
00009F8D                          5332m          OPC     NO,T,13,46,00,0,0     NOT
00009F8D= 4E 4F D4                5333m          DC.B    'NO','T'+128
00009F90= 0D 46 00                5334m          DC.B    13+0+0,$46,$00
00009F93                          5335m          ENDM
00009F93                          5336m          OPC     OR,I,28,00,00,0,0     ORI
00009F93= 4F 52 C9                5337m          DC.B    'OR','I'+128
00009F96= 1C 00 00                5338m          DC.B    28+0+0,$00,$00
00009F99                          5339m          ENDM
00009F99                          5340m          OPC     O,R,6,80,00,0,0       OR
00009F99= 4F D2                   5341m          DC.B    'O','R'+128
00009F9B= 06 80 00                5342m          DC.B    6+0+0,$80,$00
00009F9E                          5343m          ENDM
00009F9E                          5344m          OPC     PE,A,36,48,40,0,0     PEA
00009F9E= 50 45 C1                5345m          DC.B    'PE','A'+128
00009FA1= 24 48 40                5346m          DC.B    36+0+0,$48,$40
00009FA4                          5347m          ENDM
00009FA4                          5348m          OPC     RESE,T,22,4E,70,NOC,0 RESET
00009FA4= 52 45 53 45 D4          5349m          DC.B    'RESE','T'+128
00009FA9= 96 4E 70                5350m          DC.B    22+NOC+0,$4E,$70
00009FAC                          5351m          ENDM
00009FAC                          5352m          OPC     RO,L,7,E7,18,0,0      ROL
00009FAC= 52 4F CC                5353m          DC.B    'RO','L'+128
00009FAF= 07 E7 18                5354m          DC.B    7+0+0,$E7,$18
00009FB2                          5355m          ENDM
00009FB2                          5356m          OPC     RO,R,07,E6,18,0,0     ROR
00009FB2= 52 4F D2                5357m          DC.B    'RO','R'+128
00009FB5= 07 E6 18                5358m          DC.B    07+0+0,$E6,$18
00009FB8                          5359m          ENDM
00009FB8                          5360m          OPC     ROX,L,7,E5,10,0,0     ROXL
00009FB8= 52 4F 58 CC             5361m          DC.B    'ROX','L'+128
00009FBC= 07 E5 10                5362m          DC.B    7+0+0,$E5,$10
00009FBF                          5363m          ENDM
00009FBF                          5364m          OPC     ROX,R,07,E4,10,0,0    ROXR
00009FBF= 52 4F 58 D2             5365m          DC.B    'ROX','R'+128
00009FC3= 07 E4 10                5366m          DC.B    07+0+0,$E4,$10
00009FC6                          5367m          ENDM
00009FC6                          5368m          OPC     RT,E,22,4E,73,NOC,0   RTE
00009FC6= 52 54 C5                5369m          DC.B    'RT','E'+128
00009FC9= 96 4E 73                5370m          DC.B    22+NOC+0,$4E,$73
00009FCC                          5371m          ENDM
00009FCC                          5372m          OPC     RT,R,22,4E,77,NOC,0   RTR
00009FCC= 52 54 D2                5373m          DC.B    'RT','R'+128
00009FCF= 96 4E 77                5374m          DC.B    22+NOC+0,$4E,$77
00009FD2                          5375m          ENDM
00009FD2                          5376m          OPC     RT,S,22,4E,75,NOC,0   RTS
00009FD2= 52 54 D3                5377m          DC.B    'RT','S'+128
00009FD5= 96 4E 75                5378m          DC.B    22+NOC+0,$4E,$75
00009FD8                          5379m          ENDM
00009FD8                          5380m          OPC     SBC,D,0,81,00,0,0     SBCD
00009FD8= 53 42 43 C4             5381m          DC.B    'SBC','D'+128
00009FDC= 00 81 00                5382m          DC.B    0+0+0,$81,$00
00009FDF                          5383m          ENDM
00009FDF                          5384m          OPC     S,F,29,51,C0,0,0      SF
00009FDF= 53 C6                   5385m          DC.B    'S','F'+128
00009FE1= 1D 51 C0                5386m          DC.B    29+0+0,$51,$C0
00009FE4                          5387m          ENDM
00009FE4                          5388m          OPC     SH,I,29,52,C0,0,0     SHI
00009FE4= 53 48 C9                5389m          DC.B    'SH','I'+128
00009FE7= 1D 52 C0                5390m          DC.B    29+0+0,$52,$C0
00009FEA                          5391m          ENDM
00009FEA                          5392m          OPC     SL,S,29,53,C0,0,0     SLS
00009FEA= 53 4C D3                5393m          DC.B    'SL','S'+128
00009FED= 1D 53 C0                5394m          DC.B    29+0+0,$53,$C0
00009FF0                          5395m          ENDM
00009FF0                          5396m          OPC     SC,C,29,54,C0,0,0     SCC
00009FF0= 53 43 C3                5397m          DC.B    'SC','C'+128
00009FF3= 1D 54 C0                5398m          DC.B    29+0+0,$54,$C0
00009FF6                          5399m          ENDM
00009FF6                          5400m          OPC     SC,S,29,55,C0,0,0     SCS
00009FF6= 53 43 D3                5401m          DC.B    'SC','S'+128
00009FF9= 1D 55 C0                5402m          DC.B    29+0+0,$55,$C0
00009FFC                          5403m          ENDM
00009FFC                          5404m          OPC     SN,E,29,56,C0,0,0     SNE
00009FFC= 53 4E C5                5405m          DC.B    'SN','E'+128
00009FFF= 1D 56 C0                5406m          DC.B    29+0+0,$56,$C0
0000A002                          5407m          ENDM
0000A002                          5408m          OPC     SE,Q,29,57,C0,0,0     SEQ
0000A002= 53 45 D1                5409m          DC.B    'SE','Q'+128
0000A005= 1D 57 C0                5410m          DC.B    29+0+0,$57,$C0
0000A008                          5411m          ENDM
0000A008                          5412m          OPC     SV,C,29,58,C0,0,0     SVC
0000A008= 53 56 C3                5413m          DC.B    'SV','C'+128
0000A00B= 1D 58 C0                5414m          DC.B    29+0+0,$58,$C0
0000A00E                          5415m          ENDM
0000A00E                          5416m          OPC     SV,S,29,59,C0,0,0     SVS
0000A00E= 53 56 D3                5417m          DC.B    'SV','S'+128
0000A011= 1D 59 C0                5418m          DC.B    29+0+0,$59,$C0
0000A014                          5419m          ENDM
0000A014                          5420m          OPC     SP,L,29,5A,C0,0,0     SPL
0000A014= 53 50 CC                5421m          DC.B    'SP','L'+128
0000A017= 1D 5A C0                5422m          DC.B    29+0+0,$5A,$C0
0000A01A                          5423m          ENDM
0000A01A                          5424m          OPC     SM,I,29,5B,C0,0,0     SMI
0000A01A= 53 4D C9                5425m          DC.B    'SM','I'+128
0000A01D= 1D 5B C0                5426m          DC.B    29+0+0,$5B,$C0
0000A020                          5427m          ENDM
0000A020                          5428m          OPC     SG,E,29,5C,C0,0,0     SGE
0000A020= 53 47 C5                5429m          DC.B    'SG','E'+128
0000A023= 1D 5C C0                5430m          DC.B    29+0+0,$5C,$C0
0000A026                          5431m          ENDM
0000A026                          5432m          OPC     SL,T,29,5D,C0,0,0     SLT
0000A026= 53 4C D4                5433m          DC.B    'SL','T'+128
0000A029= 1D 5D C0                5434m          DC.B    29+0+0,$5D,$C0
0000A02C                          5435m          ENDM
0000A02C                          5436m          OPC     SG,T,29,5E,C0,0,0     SGT
0000A02C= 53 47 D4                5437m          DC.B    'SG','T'+128
0000A02F= 1D 5E C0                5438m          DC.B    29+0+0,$5E,$C0
0000A032                          5439m          ENDM
0000A032                          5440m          OPC     SL,E,29,5F,C0,0,0     SLE
0000A032= 53 4C C5                5441m          DC.B    'SL','E'+128
0000A035= 1D 5F C0                5442m          DC.B    29+0+0,$5F,$C0
0000A038                          5443m          ENDM
0000A038                          5444m          OPC     STO,P,23,4E,72,0,0    STOP
0000A038= 53 54 4F D0             5445m          DC.B    'STO','P'+128
0000A03C= 17 4E 72                5446m          DC.B    23+0+0,$4E,$72
0000A03F                          5447m          ENDM
0000A03F                          5448m          OPC     S,T,29,50,C0,0,0      ST
0000A03F= 53 D4                   5449m          DC.B    'S','T'+128
0000A041= 1D 50 C0                5450m          DC.B    29+0+0,$50,$C0
0000A044                          5451m          ENDM
0000A044                          5452m          OPC     SUB,A,2,90,C0,0,0     SUBA
0000A044= 53 55 42 C1             5453m          DC.B    'SUB','A'+128
0000A048= 02 90 C0                5454m          DC.B    2+0+0,$90,$C0
0000A04B                          5455m          ENDM
0000A04B                          5456m          OPC     SUB,I,3,04,00,0,0     SUBI
0000A04B= 53 55 42 C9             5457m          DC.B    'SUB','I'+128
0000A04F= 03 04 00                5458m          DC.B    3+0+0,$04,$00
0000A052                          5459m          ENDM
0000A052                          5460m          OPC     SUB,Q,4,51,00,0,0     SUBQ
0000A052= 53 55 42 D1             5461m          DC.B    'SUB','Q'+128
0000A056= 04 51 00                5462m          DC.B    4+0+0,$51,$00
0000A059                          5463m          ENDM
0000A059                          5464m          OPC     SUB,X,5,91,00,0,0     SUBX
0000A059= 53 55 42 D8             5465m          DC.B    'SUB','X'+128
0000A05D= 05 91 00                5466m          DC.B    5+0+0,$91,$00
0000A060                          5467m          ENDM
0000A060                          5468m          OPC     SU,B,1,90,00,0,0      SUB
0000A060= 53 55 C2                5469m          DC.B    'SU','B'+128
0000A063= 01 90 00                5470m          DC.B    1+0+0,$90,$00
0000A066                          5471m          ENDM
0000A066                          5472m          OPC     SWA,P,24,48,40,0,0    SWAP
0000A066= 53 57 41 D0             5473m          DC.B    'SWA','P'+128
0000A06A= 18 48 40                5474m          DC.B    24+0+0,$48,$40
0000A06D                          5475m          ENDM
0000A06D                          5476m          OPC     TA,S,29,4A,C0,0,0     TAS
0000A06D= 54 41 D3                5477m          DC.B    'TA','S'+128
0000A070= 1D 4A C0                5478m          DC.B    29+0+0,$4A,$C0
0000A073                          5479m          ENDM
0000A073                          5480m          OPC     TRAP,V,22,4E,76,NOC,0 TRAPV
0000A073= 54 52 41 50 D6          5481m          DC.B    'TRAP','V'+128
0000A078= 96 4E 76                5482m          DC.B    22+NOC+0,$4E,$76
0000A07B                          5483m          ENDM
0000A07B                          5484m          OPC     TRA,P,25,4E,40,0,0    TRAP
0000A07B= 54 52 41 D0             5485m          DC.B    'TRA','P'+128
0000A07F= 19 4E 40                5486m          DC.B    25+0+0,$4E,$40
0000A082                          5487m          ENDM
0000A082                          5488m          OPC     TS,T,13,4A,00,0,0     TST
0000A082= 54 53 D4                5489m          DC.B    'TS','T'+128
0000A085= 0D 4A 00                5490m          DC.B    13+0+0,$4A,$00
0000A088                          5491m          ENDM
0000A088                          5492m          OPC     UNL,K,26,4E,58,0,0    UNLK
0000A088= 55 4E 4C CB             5493m          DC.B    'UNL','K'+128
0000A08C= 1A 4E 58                5494m          DC.B    26+0+0,$4E,$58
0000A08F                          5495m          ENDM
0000A08F                          5496  
0000A08F= 00                      5497           DC.B    0              PAD BYTE
0000A090                          5498  
0000A090                          5499  TBLOPCE  DS      0
0000A090                          5500  
0000A090                          5501  * WITHOUT LABEL FIELD
0000A090                          5502  * 012345678901234567890123456789012345678901234567890
0000A090                          5503  * AAAAAA DDDDDDDDDDDDDDDDDDDD OPCODE  OPERAND
0000A090                          5504  *        FDATA                FOC     FOP
0000A090                          5505  
0000A090                          5506  * 012345678901234567890123456789012345678901234567890
0000A090                          5507  * AAAAAA DDDDDDDDDDDDDDDDDDDD LLLLLLLL OPCODE  OPERAND
0000A090                          5508  *        FDATA                FOL      FOC     FOP
0000A090                          5509  
0000A090                          5510  * A3 = STORE POINTER
0000A090                          5511  * A4 = PROGRAM COUNTER
0000A090                          5512  * A5 = SOURCE PTR BEGINNING
0000A090                          5513  * A6 = SOURCE PTR END+1
0000A090                          5514  *
0000A090  =00000050               5515  OUTBSIZE EQU     80        BUFFER SIZE
0000A090  =0000000A               5516  FDATA    EQU     10        OFFSET TO DATA
0000A090  =0000001F               5517  FOL      EQU     31        OFFSET TO LABEL
0000A090  =0000001F               5518  FOC      EQU     31        OFFSET TO OP-CODE (NO LABEL FIELD)
0000A090  =00000027               5519  FOP      EQU     39        OFFSET TO OPERAND (NO LABEL FIELD)
0000A090                          5520  
0000A090  4E51 FFDE               5521  CODE68K  LINK    A1,#0-(ESKE-ESKB)
0000A094  2F49 001E               5522           MOVE.L  A1,LINK(A7)    SAVE LINKAGE
0000A098  224F                    5523           MOVE.L  A7,A1          A1 = BASE REGISTER TO DATA
0000A09A                          5524  
0000A09A  1CBC 0020               5525           MOVE.B  #BLANK,(A6)    INSURE LAST CHAR IS SPACE
0000A09E                          5526  
0000A09E  204B                    5527           MOVE.L  A3,A0
0000A0A0  704F                    5528           MOVEQ   #OUTBSIZE-1,D0
0000A0A2  10FC 0020               5529  M300     MOVE.B  #BLANK,(A0)+   SPACE FILL BUFFER
0000A0A6  51C8 FFFA               5530           DBRA    D0,M300
0000A0AA  5588                    5531           SUBQ.L  #2,A0
0000A0AC  2348 001A               5532           MOVE.L  A0,PTRBUFE(A1) PTR TO END OF BUFFER
0000A0B0                          5533  
0000A0B0  234C 000E               5534           MOVE.L  A4,PCOUNTER(A1)  FORMAT PC
0000A0B4  280C                    5535           MOVE.L  A4,D4          D4 = P-COUNTER
0000A0B6  200C                    5536           MOVE.L  A4,D0
0000A0B8                          5537  
0000A0B8  2F0E                    5538           MOVE.L  A6,-(A7)       SAVE A6
0000A0BA  2C4B                    5539           MOVE.L  A3,A6
0000A0BC  6100 F548               5540           BSR     FRELADDR       FORM RELATIVE ADDRESS
0000A0C0  2C5F                    5541           MOVE.L  (A7)+,A6       RESTORE A6
0000A0C2                          5542  
0000A0C2  7E01                    5543           MOVEQ   #1,D7          POSSIBLE ERROR CODE
0000A0C4  200C                    5544           MOVE.L  A4,D0
0000A0C6  E298                    5545           ROR.L   #1,D0
0000A0C8  6B00 0140               5546           BMI     ERDONE         PC ODD ADDRESS
0000A0CC                          5547  
0000A0CC  7E1F                    5548           MOVEQ   #FOL,D7        POSSIBLE ERROR CODE
0000A0CE  0C1D 0020               5549           CMPI.B  #BLANK,(A5)+
0000A0D2  6600 0136               5550           BNE     ERDONE         1ST CHAR NOT SPACE
0000A0D6                          5551  
0000A0D6  137C 0002 000A          5552           MOVE.B  #2,TNB(A1)     INZ # OF BYTES
0000A0DC  337C 0040 000C          5553           MOVE.W  #$40,TLENGTH(A1)  SIZE = .W (DEFAULT)
0000A0E2  4229 000B               5554           CLR.B   TLSPEC(A1)     DEFAULT (SIZE NOT SPECIFIED)
0000A0E6                          5555  
0000A0E6  204B                    5556           MOVE.L  A3,A0          A0 = STORE ADDRESS
0000A0E8  D1FC 0000001F           5557           ADD.L   #FOC,A0
0000A0EE                          5558  
0000A0EE  6100 010C               5559  M340     BSR     GETCHARF       GET PAST SPACES
0000A0F2  0C00 0020               5560           CMPI.B  #BLANK,D0
0000A0F6  67F6                    5561           BEQ     M340
0000A0F8                          5562  
0000A0F8  538D                    5563           SUBQ.L  #1,A5          FORMAT OP-CODE
0000A0FA  6100 0100               5564  M350     BSR     GETCHARF
0000A0FE  10C0                    5565           MOVE.B  D0,(A0)+
0000A100  0C00 002E               5566           CMPI.B  #'.',D0
0000A104  6628                    5567           BNE.S   M352
0000A106                          5568  
0000A106  1355 000B               5569           MOVE.B  (A5),TLSPEC(A1)  NOT DEFAULT
0000A10A  0C15 0057               5570           CMPI.B  #'W',(A5)
0000A10E  671E                    5571           BEQ.S   M352
0000A110  0C15 0053               5572           CMPI.B  #'S',(A5)
0000A114  6718                    5573           BEQ.S   M352           .SHORT = .WORD
0000A116  4269 000C               5574           CLR.W   TLENGTH(A1)
0000A11A  0C15 0042               5575           CMPI.B  #'B',(A5)
0000A11E  670E                    5576           BEQ.S   M352           SIZE = .W
0000A120  337C 0080 000C          5577           MOVE.W  #$80,TLENGTH(A1)
0000A126  0C15 004C               5578           CMPI.B  #'L',(A5)
0000A12A  6600 00D8               5579           BNE     ERF
0000A12E                          5580  
0000A12E  0C00 0020               5581  M352     CMPI.B  #BLANK,D0
0000A132  66C6                    5582           BNE     M350           NOT SPACE CONTINUE
0000A134                          5583  
0000A134                          5584  * SEARCH OP-CODE TABLE
0000A134  41FA FC56               5585           LEA     TBLOPC(PC),A0  A0 = PTR TO TABLE OF CODES
0000A138  244B                    5586  M410     MOVE.L  A3,A2          A3 = START OF STORE BUFFER
0000A13A  D5FC 0000001F           5587           ADD.L   #FOC,A2        A2 = PTR TO OP-CODE JUST FORMATTED
0000A140                          5588  
0000A140  1018                    5589  M415     MOVE.B  (A0)+,D0       XXXXXXDD
0000A142  4880                    5590           EXT.W   D0             XXXXSSDD  SIGN EXTENDED
0000A144  0200 007F               5591           ANDI.B  #$7F,D0
0000A148  B01A                    5592           CMP.B   (A2)+,D0
0000A14A  6606                    5593           BNE.S   M420           NON-MATCH
0000A14C  4A40                    5594           TST.W   D0
0000A14E  6AF0                    5595           BPL     M415           SIGN RESET; CONTINUE
0000A150  6018                    5596           BRA.S   M430           MATCH COMPLETE
0000A152                          5597  
0000A152  4A40                    5598  M420     TST.W   D0             SEQUENCE TO NEXT CODE
0000A154  6B04                    5599           BMI.S   M426
0000A156  1018                    5600  M424     MOVE.B  (A0)+,D0
0000A158  6AFC                    5601           BPL     M424           FINISH THIS OP-CODE
0000A15A  5688                    5602  M426     ADDQ.L  #3,A0          ADJUST PTR TO TABLE
0000A15C  45FA FF32               5603           LEA     TBLOPCE(PC),A2
0000A160  B5C8                    5604           CMP.L   A0,A2
0000A162  66D4                    5605           BNE     M410
0000A164                          5606  
0000A164  7E1F                    5607  M428     MOVEQ   #FOC,D7        ERROR CODE
0000A166  6000 00A2               5608           BRA     ERDONE
0000A16A                          5609  
0000A16A                          5610  * GET GOTO INDEX
0000A16A                          5611  * GET FIRST WORD MASK
0000A16A  1012                    5612  M430     MOVE.B  (A2),D0        MUST TERMINATE OP-CODE
0000A16C  0C00 0020               5613           CMPI.B  #BLANK,D0        WITH SPACE OR PERIOD
0000A170  6706                    5614           BEQ.S   M432
0000A172  0C00 002E               5615           CMPI.B  #'.',D0
0000A176  66EC                    5616           BNE     M428           ERROR
0000A178                          5617  M432
0000A178                          5618  
0000A178  4280                    5619           CLR.L   D0
0000A17A  1018                    5620           MOVE.B  (A0)+,D0       D0 =  KEYS  INDEX
0000A17C  1200                    5621           MOVE.B  D0,D1          D1 =  KEYS (INDEX)
0000A17E  0200 003F               5622           ANDI.B  #$3F,D0        D0 =        INDEX
0000A182  E380                    5623           ASL.L   #1,D0          INDEX * TWO
0000A184  1418                    5624           MOVE.B  (A0)+,D2
0000A186  E14A                    5625           LSL.W   #8,D2
0000A188  1418                    5626           MOVE.B  (A0)+,D2       D2 = FIRST WORD MASK
0000A18A  3282                    5627           MOVE.W  D2,(A1)        *D2,TDATA(A1)
0000A18C                          5628  
0000A18C                          5629  * INSURE .S .W MATCH OP-CODE
0000A18C                          5630  
0000A18C  1629 000B               5631           MOVE.B  TLSPEC(A1),D3  D3 = .n SPECIFIED
0000A190  671A                    5632           BEQ.S   M4326          NOT SPECIFIED
0000A192  0801 0006               5633           BTST    #6,D1
0000A196  670E                    5634           BEQ.S   M4324          .W ALLOWED (.S NOT ALLOWED)
0000A198  0C03 0057               5635           CMPI.B  #'W',D3
0000A19C  67C6                    5636           BEQ     M428           .W NOT ALLOWED
0000A19E  0C03 0042               5637           CMPI.B  #'B',D3
0000A1A2  67C0                    5638           BEQ     M428           .B NOT ALLOWED
0000A1A4  6006                    5639           BRA.S   M4326
0000A1A6                          5640  
0000A1A6  0C03 0053               5641  M4324    CMPI.B  #'S',D3
0000A1AA  67B8                    5642           BEQ     M428           .S NOT ALLOWED
0000A1AC                          5643  M4326
0000A1AC                          5644  
0000A1AC                          5645  * CALCULATE GOTO ADDRESS
0000A1AC                          5646  
0000A1AC  41FA FB92               5647           LEA     TBLKEYS(PC),A0 A0 = PTR TO KEYS
0000A1B0  3030 0000               5648           MOVE.W  (A0,D0),D0     D0 = 16 BIT OFFSET
0000A1B4  45FA F880               5649           LEA     XBASE(PC),A2   A2 = BASE ADDRESS
0000A1B8  D5C0                    5650           ADD.L   D0,A2          A2 = COMPUTED GO TO  ADDRESS
0000A1BA                          5651  
0000A1BA                          5652  * FORMAT OPERAND IF REGUIRED
0000A1BA                          5653  
0000A1BA  4A01                    5654           TST.B   D1             LOOK AT KEY
0000A1BC  6B22                    5655           BMI.S   M440           OPERAND NOT REQUIRED
0000A1BE                          5656  
0000A1BE  204B                    5657           MOVE.L  A3,A0
0000A1C0  D1FC 00000027           5658           ADD.L   #FOP,A0        STORE POINTER
0000A1C6  2348 0012               5659           MOVE.L  A0,PTROP(A1)   POINTER TO OPERAND (FORMATED)
0000A1CA  6130                    5660  M435     BSR.S   GETCHARF       D0 = CHAR
0000A1CC  0C00 0020               5661           CMPI.B  #BLANK,D0
0000A1D0  67F8                    5662           BEQ     M435           SKIP SPACES
0000A1D2                          5663  
0000A1D2  10C0                    5664  M437     MOVE.B  D0,(A0)+       MOVE REST OF SOURCE LINE
0000A1D4  6126                    5665           BSR.S   GETCHARF       D0 = CHAR
0000A1D6  BDCD                    5666           CMP.L   A5,A6
0000A1D8  6AF8                    5667           BPL     M437
0000A1DA  2348 001A               5668           MOVE.L  A0,PTRBUFE(A1) POINTER TO END FORMATED SOURCE
0000A1DE  2C48                    5669           MOVE.L  A0,A6          A6 = POINTER TO END OF SOURCE
0000A1E0                          5670  M440
0000A1E0                          5671  
0000A1E0  2A69 0012               5672           MOVE.L  PTROP(A1),A5   A5 = PTR TO OPERAND
0000A1E4  49E9 0002               5673           LEA     TDATA+2(A1),A4 A4 = BASE ADDR FOR DATA STORE
0000A1E8  4283                    5674           CLR.L   D3             D3 = OFFSET FOR DATA STORE
0000A1EA  4ED2                    5675           JMP     (A2)           GOTO ROUTINE
0000A1EC                          5676  *                               D2 = MASK
0000A1EC                          5677  *                               D4 = P-COUNTER
0000A1EC                          5678  
0000A1EC  0C1D 002C               5679  COMMA    CMPI.B  #',',(A5)+
0000A1F0  6614                    5680           BNE.S   ER             NOT COMMA
0000A1F2  4E75                    5681           RTS
0000A1F4                          5682  
0000A1F4  BDCD                    5683  GETCHAR  CMP.L   A5,A6
0000A1F6  6B0E                    5684           BMI.S   ER
0000A1F8  101D                    5685           MOVE.B  (A5)+,D0
0000A1FA  4E75                    5686           RTS
0000A1FC                          5687  
0000A1FC  BDCD                    5688  GETCHARF CMP.L   A5,A6
0000A1FE  6B04                    5689           BMI.S   ERF
0000A200  101D                    5690           MOVE.B  (A5)+,D0
0000A202  4E75                    5691           RTS
0000A204                          5692  
0000A204  2A48                    5693  ERF      MOVE.L  A0,A5
0000A206                          5694  
0000A206  2E0D                    5695  ER       MOVE.L  A5,D7          D7 = ERROR FLAG
0000A208  9E8B                    5696           SUB.L   A3,D7          ..& POSITION OF ERROR
0000A20A  4286                    5697  ERDONE   CLR.L   D6             D6 = (ZERO) BYTE COUNT
0000A20C  6024                    5698           BRA.S   CMMD35
0000A20E                          5699  
0000A20E  0C15 0020               5700  CMMD2    CMPI.B  #BLANK,(A5)
0000A212  66F2                    5701           BNE     ER             OPERAND DID NOT END WITH SPACE
0000A214                          5702  
0000A214                          5703  MCMMD2   DS      0              NO OPERAND SEQUENCE
0000A214  3282                    5704           MOVE.W  D2,(A1)        *D2,TDATA(A1)
0000A216                          5705  
0000A216  1629 000A               5706           MOVE.B  TNB(A1),D3     FORMAT DATA
0000A21A  2C03                    5707           MOVE.L  D3,D6          D7 = NUMBER OF BYTES
0000A21C  45D1                    5708           LEA     (A1),A2        A2 = PTR TO HEX DATA  *TDATA(A1),A2
0000A21E  2C4B                    5709           MOVE.L  A3,A6          D3 = NUMBER OF BYTES
0000A220  DDFC 0000000A           5710           ADD.L   #FDATA,A6      A6 = STORE PTR
0000A226  101A                    5711  FPR315   MOVE.B  (A2)+,D0
0000A228  6100 F3C0               5712           BSR     PNT2HX
0000A22C  5383                    5713           SUBQ.L  #1,D3
0000A22E  66F6                    5714           BNE     FPR315         MORE BYTES
0000A230                          5715  
0000A230  4287                    5716           CLR.L   D7             RESET ERROR FLAG
0000A232                          5717  
0000A232  4CD1 0007               5718  CMMD35   MOVEM.L (A1),D0-D2       D0-D2 = DATA   *TDATA(A1),D0-D2
0000A236                          5719  
0000A236  2C69 001A               5720           MOVE.L  PTRBUFE(A1),A6   A6 = POINTER TO END OF BUFFER
0000A23A                          5721  
0000A23A  2869 000E               5722           MOVE.L  PCOUNTER(A1),A4  A4 = ORGINAL PC
0000A23E                          5723  
0000A23E  2269 001E               5724           MOVE.L  LINK(A1),A1
0000A242  4E59                    5725           UNLK    A1
0000A244  4E75                    5726           RTS                    RETURN TO REQUESTOR
0000A246                          5727  *                               A3 = POINTER TO START OF BUFFER
0000A246                          5728  *                               D6 = NUMBER OF BYTES ASSEMBLED
0000A246                          5729  *                               D7 = ERROR FLAG (POSITION)
0000A246                          5730  
0000A246                          5731  
0000A246                          5732  *  SIZE = BYTE
0000A246                          5733  *    DY,DX
0000A246                          5734  *    -(AY),-(AX)
0000A246                          5735  *    ....RX@.SS...RY@
0000A246                          5736  MABCD    DS      0              (INDEX 0) ABCD SBCD
0000A246  4A29 000B               5737           TST.B   TLSPEC(A1)
0000A24A  6708                    5738           BEQ.S   MABCD9         DEFAULT SIZE = BYTE
0000A24C  0C69 0000 000C          5739           CMPI.W  #$00,TLENGTH(A1)
0000A252  66B2                    5740           BNE     ER             NOT .B
0000A254                          5741  MABCD9
0000A254                          5742  
0000A254  3E3C 0011               5743           MOVE.W  #$11,D7
0000A258  6100 F84A               5744           BSR     EA
0000A25C                          5745  
0000A25C  618E                    5746           BSR     COMMA
0000A25E                          5747  
0000A25E  2006                    5748           MOVE.L  D6,D0
0000A260  0240 0007               5749           ANDI.W  #7,D0
0000A264  8440                    5750           OR.W    D0,D2
0000A266                          5751  
0000A266  0806 0005               5752           BTST    #5,D6
0000A26A  6716                    5753           BEQ.S   MABCD55        D@,D@ MODE
0000A26C                          5754  
0000A26C  0042 0008               5755           ORI.W   #$0008,D2      -(A@),-(A@) MODE
0000A270                          5756  
0000A270  3E3C 0010               5757           MOVE.W  #$10,D7
0000A274  6100 F82E               5758           BSR     EA
0000A278                          5759  
0000A278  0246 0007               5760           ANDI.W  #7,D6
0000A27C  EE5E                    5761           ROR.W   #7,D6
0000A27E  8446                    5762           OR.W    D6,D2
0000A280  608C                    5763           BRA     CMMD2
0000A282                          5764  
0000A282  6100 F7B8               5765  MABCD55  BSR     GETREGD        D@,D@
0000A286  EE58                    5766           ROR.W   #7,D0
0000A288  8440                    5767           OR.W    D0,D2
0000A28A  6082                    5768  CMMD2S10 BRA     CMMD2
0000A28C                          5769  
0000A28C                          5770  
0000A28C                          5771  MCMP     DS      0              (INDEX 34)
0000A28C  6100 F812               5772           BSR     EAALL
0000A290  2806                    5773           MOVE.L  D6,D4          D4 = SOURCE MODE
0000A292                          5774  
0000A292  6166                    5775           BSR.S   COMMAS20
0000A294                          5776  
0000A294  0C15 0041               5777           CMPI.B  #'A',(A5)
0000A298  6700 0116               5778           BEQ     MADDA21        DESTINATION = A@
0000A29C                          5779  
0000A29C  0C04 003C               5780           CMPI.B  #$3C,D4
0000A2A0  6748                    5781           BEQ.S   MCMP56         SOURCE  ....I  #<DATA>,...
0000A2A2                          5782  
0000A2A2  6100 F792               5783           BSR     FSIZE
0000A2A6                          5784  
0000A2A6  3E3C 0009               5785           MOVE.W  #$009,D7
0000A2AA  6100 F7F8               5786           BSR     EA             D@ + (A@)+
0000A2AE  2006                    5787           MOVE.L  D6,D0          MMMRRR
0000A2B0  0240 0038               5788           ANDI.W  #$38,D0        MMM...
0000A2B4                          5789  
0000A2B4  672C                    5790           BEQ.S   MCMP39         DESTINATION  D@
0000A2B6                          5791  
0000A2B6  0C00 0018               5792           CMPI.B  #$18,D0
0000A2BA  6600 FF4A               5793           BNE     ER
0000A2BE                          5794  
0000A2BE  0246 000F               5795           ANDI.W  #$F,D6         (AY)+,(AX)+
0000A2C2  EE5E                    5796           ROR.W   #7,D6
0000A2C4  8446                    5797           OR.W    D6,D2          ....AX@.........
0000A2C6  0042 0100               5798           ORI.W   #$0100,D2      ...1AX@.........
0000A2CA                          5799  
0000A2CA  2004                    5800           MOVE.L  D4,D0
0000A2CC  0240 0038               5801           ANDI.W  #$38,D0
0000A2D0  0C40 0018               5802           CMPI.W  #$18,D0
0000A2D4  6600 FF30               5803           BNE     ER             NOT (A@)+
0000A2D8  0244 000F               5804           ANDI.W  #$F,D4         ............1AY@
0000A2DC  8444                    5805           OR.W    D4,D2
0000A2DE  6000 FF2E               5806           BRA     CMMD2
0000A2E2                          5807  
0000A2E2                          5808  *  <EA>,D@
0000A2E2  EE5E                    5809  MCMP39   ROR.W   #7,D6
0000A2E4  8446                    5810           OR.W    D6,D2
0000A2E6                          5811  
0000A2E6  8444                    5812           OR.W    D4,D2
0000A2E8  600E                    5813           BRA.S   CMMD2S11
0000A2EA                          5814  
0000A2EA  343C 0C00               5815  MCMP56   MOVE.W  #$0C00,D2      #<DATA>,<EA>      MASK = CMPI
0000A2EE                          5816  
0000A2EE  6100 F746               5817           BSR     FSIZE
0000A2F2                          5818  
0000A2F2  6100 F788               5819           BSR     EADA
0000A2F6  8446                    5820           OR.W    D6,D2
0000A2F8  6090                    5821  CMMD2S11 BRA     CMMD2S10
0000A2FA                          5822  
0000A2FA  6000 FEF0               5823  COMMAS20 BRA     COMMA
0000A2FE                          5824  
0000A2FE                          5825  MADD     DS      0              (INDEX 1)
0000A2FE  6100 F7A0               5826           BSR     EAALL
0000A302  2806                    5827           MOVE.L  D6,D4          D4 = SOURCE MODE
0000A304                          5828  
0000A304  61F4                    5829           BSR     COMMAS20
0000A306                          5830  
0000A306  0C15 0041               5831           CMPI.B  #'A',(A5)
0000A30A  6700 00A4               5832           BEQ     MADDA21        DESTINATION = A@
0000A30E                          5833  
0000A30E  0C04 003C               5834           CMPI.B  #$3C,D4
0000A312  6728                    5835           BEQ.S   MADD56         SOURCE  ....I  #<DATA>,...
0000A314                          5836  
0000A314  6100 F720               5837           BSR     FSIZE
0000A318                          5838  
0000A318  3E3C 01FF               5839           MOVE.W  #$1FF,D7
0000A31C  6100 F786               5840           BSR     EA             ALTERABLE + D@
0000A320  2006                    5841           MOVE.L  D6,D0          MMMRRR
0000A322  0240 0038               5842           ANDI.W  #$38,D0        MMM...
0000A326  6608                    5843           BNE.S   MADD46         DESTINATION NOT  D@
0000A328                          5844  
0000A328                          5845  *  <EA>,D@
0000A328  EE5E                    5846           ROR.W   #7,D6
0000A32A  8446                    5847           OR.W    D6,D2
0000A32C                          5848  
0000A32C  8444                    5849           OR.W    D4,D2
0000A32E  60C8                    5850           BRA     CMMD2S11
0000A330                          5851  
0000A330                          5852  MADD46   DS      0              D@,<EA>
0000A330  0042 0100               5853           ORI.W   #$100,D2
0000A334                          5854  
0000A334  EE5C                    5855           ROR.W   #7,D4
0000A336  8444                    5856           OR.W    D4,D2          <EA> AS DESTINATION
0000A338                          5857  
0000A338  8446                    5858           OR.W    D6,D2          D@  AS SOURCE
0000A33A  60BC                    5859           BRA     CMMD2S11
0000A33C                          5860  
0000A33C  2002                    5861  MADD56   MOVE.L  D2,D0          #<DATA>,<EA>
0000A33E  343C 0600               5862           MOVE.W  #$0600,D2      MASK = ADDI
0000A342                          5863  
0000A342  0C40 D000               5864           CMPI.W  #$D000,D0
0000A346  6704                    5865           BEQ.S   MADD58
0000A348  343C 0400               5866           MOVE.W  #$400,D2       MASK = SUBI
0000A34C                          5867  MADD58
0000A34C                          5868  
0000A34C  6100 F6E8               5869           BSR     FSIZE
0000A350                          5870  
0000A350  6100 F72A               5871           BSR     EADA           DATA ALTERABLE ONLY
0000A354  8446                    5872           OR.W    D6,D2
0000A356  60A0                    5873           BRA     CMMD2S11
0000A358                          5874  
0000A358  2A69 0012               5875  MADDI    MOVE.L  PTROP(A1),A5   (INDEX 3) CMPI
0000A35C  6100 F6D8               5876           BSR     FSIZE
0000A360                          5877  
0000A360  6100 F72C               5878           BSR     EAZ
0000A364                          5879  
0000A364  6194                    5880           BSR     COMMAS20
0000A366                          5881  
0000A366  6100 F714               5882           BSR     EADA           DATA ALTERABLE ONLY
0000A36A  8446                    5883           OR.W    D6,D2
0000A36C  608A                    5884           BRA     CMMD2S11
0000A36E                          5885  
0000A36E                          5886  *  SIZE =  BYTE, WORD, LONG
0000A36E                          5887  *  #<DATA>,SR
0000A36E                          5888  *  #<DATA>,<EA>    DATA ALTERABLE ONLY
0000A36E                          5889  MANDI    DS      0              (INDEX 28) ANDI EORI ORI
0000A36E  6100 F6C6               5890           BSR     FSIZE
0000A372                          5891  
0000A372  6100 F71A               5892           BSR     EAZ
0000A376                          5893  
0000A376  6182                    5894           BSR     COMMAS20
0000A378                          5895  
0000A378  0C15 0053               5896           CMPI.B  #'S',(A5)
0000A37C  670A                    5897           BEQ.S   MANDI23
0000A37E                          5898  
0000A37E  6100 F6FC               5899           BSR     EADA
0000A382  8446                    5900           OR.W    D6,D2
0000A384  6000 FF72               5901           BRA     CMMD2S11
0000A388                          5902  
0000A388  0C2D 0052 0001          5903  MANDI23  CMPI.B  #'R',1(A5)     #<DATA>,SR
0000A38E  6600 FE76               5904           BNE     ER
0000A392  0C69 0080 000C          5905           CMPI.W  #$0080,TLENGTH(A1)
0000A398  6700 FE6C               5906           BEQ     ER             .L NOT ALLOWED WITH SR
0000A39C  0042 003C               5907           ORI.W   #$003C,D2
0000A3A0  548D                    5908           ADDQ.L  #2,A5          POINTER TO END OF OPERAND
0000A3A2  6000 FE6A               5909           BRA     CMMD2
0000A3A6                          5910  
0000A3A6                          5911  MADDA    DS      0              (INDEX 2)
0000A3A6  6100 F6F8               5912           BSR     EAALL
0000A3AA  8446                    5913           OR.W    D6,D2
0000A3AC                          5914  
0000A3AC  6100 FE3E               5915           BSR     COMMA
0000A3B0                          5916  
0000A3B0  8446                    5917  MADDA21  OR.W    D6,D2
0000A3B2  3029 000C               5918           MOVE.W  TLENGTH(A1),D0
0000A3B6  6700 FE4E               5919           BEQ     ER             .BYTE NOT ALLOWED
0000A3BA  E348                    5920           LSL.W   #1,D0          .W = 011......
0000A3BC  0040 00C0               5921           ORI.W   #$00C0,D0      .L = 111......
0000A3C0  8440                    5922           OR.W    D0,D2
0000A3C2                          5923  
0000A3C2  6100 F692               5924           BSR     GETREGA
0000A3C6  EE58                    5925           ROR.W   #7,D0
0000A3C8  8440                    5926           OR.W    D0,D2
0000A3CA  6000 FE42               5927           BRA     CMMD2
0000A3CE                          5928  
0000A3CE                          5929  MADDQ    DS      0              (INDEX 4)
0000A3CE  6100 F666               5930           BSR     FSIZE
0000A3D2                          5931  
0000A3D2  6100 0682               5932           BSR     GETIMM
0000A3D6                          5933  
0000A3D6  4A80                    5934           TST.L   D0
0000A3D8  6700 FE2C               5935           BEQ     ER             DATA = ZERO
0000A3DC  0C00 0009               5936           CMPI.B  #9,D0
0000A3E0  6A00 FE24               5937           BPL     ER             VALUE TOO BIG
0000A3E4  0240 0007               5938           ANDI.W  #$7,D0         MAKE 8 = 0
0000A3E8  EE58                    5939           ROR.W   #7,D0          SHIFT DATA TO BITS 9-11
0000A3EA  8440                    5940           OR.W    D0,D2
0000A3EC                          5941  
0000A3EC  6100 FDFE               5942           BSR     COMMA
0000A3F0                          5943  
0000A3F0  6100 F6A8               5944           BSR     EAA            ALTERABLE ADDRESSING
0000A3F4                          5945  
0000A3F4  8446                    5946           OR.W    D6,D2
0000A3F6  2002                    5947           MOVE.L  D2,D0
0000A3F8  0240 00C0               5948           ANDI.W  #$C0,D0
0000A3FC  660E                    5949           BNE.S   MADDQ25
0000A3FE                          5950  
0000A3FE                          5951  * BYTE SIZE; ADDRESS REGISTER DIRECT NOT ALLOWED
0000A3FE  2002                    5952           MOVE.L  D2,D0
0000A400  0240 0038               5953           ANDI.W  #$38,D0
0000A404  0C00 0008               5954           CMPI.B  #$08,D0
0000A408  6700 FDFC               5955           BEQ     ER
0000A40C  6000 FE00               5956  MADDQ25  BRA     CMMD2
0000A410                          5957  
0000A410                          5958  * SIZE = BYTE, WORD, LONG
0000A410                          5959  *    DY,DX
0000A410                          5960  *    -(AY),-(AX)
0000A410                          5961  *    ....RX@.SS...RY@
0000A410                          5962  MADDX    DS      0              (INDEX 5)
0000A410  6100 F624               5963           BSR     FSIZE
0000A414                          5964  
0000A414  3E3C 0011               5965           MOVE.W  #$11,D7
0000A418  6100 F68A               5966           BSR     EA
0000A41C                          5967  
0000A41C  6100 FDCE               5968           BSR     COMMA
0000A420                          5969  
0000A420  2006                    5970           MOVE.L  D6,D0
0000A422  0240 0007               5971           ANDI.W  #7,D0
0000A426  8440                    5972           OR.W    D0,D2
0000A428                          5973  
0000A428  0806 0005               5974           BTST    #5,D6
0000A42C  6718                    5975           BEQ.S   MADDX5         D@,D@ MODE
0000A42E                          5976  
0000A42E  0042 0008               5977           ORI.W   #$0008,D2      -(A@),-(A@) MODE
0000A432                          5978  
0000A432  3E3C 0010               5979           MOVE.W  #$10,D7
0000A436  6100 F66C               5980           BSR     EA
0000A43A                          5981  
0000A43A  0246 0007               5982           ANDI.W  #7,D6
0000A43E  EE5E                    5983           ROR.W   #7,D6
0000A440  8446                    5984           OR.W    D6,D2
0000A442  6000 FDCA               5985           BRA     CMMD2
0000A446                          5986  
0000A446  6100 F5F4               5987  MADDX5   BSR     GETREGD        D@,D@
0000A44A  EE58                    5988           ROR.W   #7,D0
0000A44C  8440                    5989           OR.W    D0,D2
0000A44E  6000 FDBE               5990           BRA     CMMD2
0000A452                          5991  
0000A452                          5992  *  SIZE = BYTE, WORD, LONG
0000A452                          5993  *         <EA>,D@
0000A452                          5994  *         D@,<EA>
0000A452  6100 F5E2               5995  MAND     BSR     FSIZE          (INDEX 6)
0000A456                          5996  
0000A456  0C15 0023               5997           CMPI.B  #'#',(A5)
0000A45A  6740                    5998           BEQ.S   MAND90
0000A45C                          5999  
0000A45C  6100 0082               6000           BSR     A5TODEST       MOVE A5 TO DESTINATION
0000A460                          6001  
0000A460  1015                    6002           MOVE.B  (A5),D0        D0 = 1ST CHAR OF DESTINATION
0000A462  2A69 0012               6003           MOVE.L  PTROP(A1),A5   A5 = POINTER TO OPERAND
0000A466  0C00 0044               6004           CMPI.B  #'D',D0
0000A46A  671A                    6005           BEQ.S   MAND77
0000A46C                          6006  
0000A46C  0042 0100               6007           ORI.W   #$0100,D2       D@,<EA>
0000A470                          6008  
0000A470  6100 F5CA               6009           BSR     GETREGD
0000A474  EE58                    6010           ROR.W   #7,D0
0000A476  8440                    6011           OR.W    D0,D2
0000A478                          6012  
0000A478  6100 FD72               6013           BSR     COMMA
0000A47C                          6014  
0000A47C  6100 F60A               6015           BSR     EAM            ALTERABLE MEMORY
0000A480  8446                    6016           OR.W    D6,D2
0000A482  6000 FD8A               6017           BRA     CMMD2
0000A486                          6018  
0000A486  6100 F60C               6019  MAND77   BSR     EADADDR        <EA>,D@
0000A48A  8446                    6020           OR.W    D6,D2
0000A48C                          6021  
0000A48C  6100 FD5E               6022           BSR     COMMA
0000A490                          6023  
0000A490  6100 F5AA               6024           BSR     GETREGD
0000A494  EE58                    6025           ROR.W   #7,D0
0000A496  8440                    6026           OR.W    D0,D2
0000A498  6000 FD74               6027           BRA     CMMD2
0000A49C                          6028  
0000A49C  0242 F000               6029  MAND90   ANDI.W  #$F000,D2
0000A4A0  0C42 C000               6030           CMPI.W  #$C000,D2
0000A4A4  6708                    6031           BEQ.S   MAND97          AND
0000A4A6  343C 0000               6032           MOVE.W  #$0000,D2      CHANGE TO "ORI"
0000A4AA  6000 FEC2               6033  MAND91   BRA     MANDI
0000A4AE  343C 0200               6034  MAND97   MOVE.W  #$0200,D2      CHANGE TO "ADDI"
0000A4B2  60F6                    6035           BRA     MAND91
0000A4B4                          6036  
0000A4B4  6100 F580               6037  MEOR     BSR     FSIZE          (INDEX 35)
0000A4B8                          6038  
0000A4B8  0C15 0023               6039           CMPI.B  #'#',(A5)
0000A4BC  6716                    6040           BEQ.S   MEOR90
0000A4BE                          6041  
0000A4BE  6100 F57C               6042           BSR     GETREGD
0000A4C2  EE58                    6043           ROR.W   #7,D0
0000A4C4  8440                    6044           OR.W    D0,D2
0000A4C6                          6045  
0000A4C6  6100 FD24               6046           BSR     COMMA
0000A4CA                          6047  
0000A4CA  6100 F5B0               6048           BSR     EADA           DATA ALTERABLE ADDRESSING
0000A4CE  8446                    6049           OR.W    D6,D2
0000A4D0  6000 FD3C               6050           BRA     CMMD2
0000A4D4                          6051  
0000A4D4  2A69 0012               6052  MEOR90   MOVE.L  PTROP(A1),A5   A5 = POINTER TO OPERAND
0000A4D8  343C 0A00               6053           MOVE.W  #$0A00,D2      CHANGE TO "EORI"
0000A4DC  6000 FE90               6054           BRA     MANDI
0000A4E0                          6055  
0000A4E0  4281                    6056  A5TODEST CLR.L   D1             MOVE A5 TO DESTINATION
0000A4E2  6100 FD10               6057  A5300    BSR     GETCHAR
0000A4E6  0C00 0028               6058           CMPI.B  #'(',D0
0000A4EA  6602                    6059           BNE.S   A5305
0000A4EC  2200                    6060           MOVE.L  D0,D1
0000A4EE  0C00 0029               6061  A5305    CMPI.B  #')',D0
0000A4F2  67EC                    6062           BEQ     A5TODEST
0000A4F4  0C00 002C               6063           CMPI.B  #',',D0
0000A4F8  66E8                    6064           BNE     A5300
0000A4FA  4A41                    6065           TST     D1
0000A4FC  66E4                    6066           BNE     A5300
0000A4FE  4E75                    6067           RTS
0000A500                          6068  
0000A500                          6069  MASL     DS      0              (INDEX 7)
0000A500                          6070  
0000A500                          6071  *         ASL     LSL     ROL     ROXL
0000A500                          6072  *  MASKS  E000    E008    E018    E010
0000A500                          6073  *         E0C0    E2C0    E6C0    E4C0   SHIFT MEMORY
0000A500                          6074  
0000A500  6100 F534               6075           BSR     FSIZE
0000A504                          6076  
0000A504  101D                    6077           MOVE.B  (A5)+,D0
0000A506  0C00 0023               6078           CMPI.B  #'#',D0
0000A50A  6628                    6079           BNE.S   MSL200
0000A50C                          6080  
0000A50C                          6081  *  #<COUNT>,D@
0000A50C  6100 F4BE               6082           BSR     EV
0000A510  0C80 00000008           6083           CMPI.L  #8,D0
0000A516  6E00 FCEE               6084           BGT     ER             GREATER THAN 8
0000A51A                          6085  
0000A51A  0200 0007               6086           ANDI.B  #$7,D0         MAKE 8 INTO 0
0000A51E  EE58                    6087  MSL150   ROR.W   #7,D0
0000A520  0242 F1FF               6088           ANDI.W  #$F1FF,D2
0000A524  8440                    6089           OR.W    D0,D2          COUNT/REG
0000A526                          6090  
0000A526  6100 FCC4               6091           BSR     COMMA
0000A52A                          6092  
0000A52A  6100 F510               6093           BSR     GETREGD
0000A52E  8440                    6094           OR.W    D0,D2
0000A530  6000 FCDC               6095           BRA     CMMD2
0000A534                          6096  
0000A534                          6097  MSL200   DS      0              D@,D@
0000A534  0C00 0044               6098           CMPI.B  #'D',D0
0000A538  660C                    6099           BNE.S   MSL300
0000A53A                          6100  
0000A53A                          6101  *        D@,D@
0000A53A  0042 0020               6102           ORI.W   #$20,D2
0000A53E  538D                    6103           SUBQ.L  #1,A5
0000A540  6100 F4FA               6104           BSR     GETREGD
0000A544  60D8                    6105           BRA     MSL150
0000A546                          6106  
0000A546                          6107  MSL300   DS      0              <EA>      SHIFT MEMORY
0000A546  538D                    6108           SUBQ.L  #1,A5
0000A548  0042 00C0               6109           ORI.W   #$00C0,D2      SIZE = MEMORY
0000A54C                          6110  
0000A54C  0242 FFC0               6111           ANDI.W  #$FFC0,D2      REMOVE "SHIFT MEMORY" BITS
0000A550                          6112  
0000A550  0C69 0040 000C          6113           CMPI.W  #$0040,TLENGTH(A1)
0000A556  6658                    6114           BNE.S   ER2            NOT .WORD
0000A558                          6115  
0000A558  6100 F52E               6116           BSR     EAM
0000A55C  8446                    6117           OR.W    D6,D2
0000A55E  6000 FCAE               6118           BRA     CMMD2
0000A562                          6119  
0000A562  6100 0334               6120  MSCC     BSR     SIZEBYTE       (INDEX 29) NBCD SCC TAS
0000A566                          6121  
0000A566  6100 F514               6122           BSR     EADA           DATA ALTERABLE ONLY
0000A56A  8446                    6123           OR.W    D6,D2
0000A56C  6000 FCA0               6124           BRA     CMMD2
0000A570                          6125  
0000A570                          6126  MBCHG    DS      0              (9)
0000A570  0C15 0023               6127           CMPI.B  #'#',(A5)
0000A574  6648                    6128           BNE.S   MB200
0000A576                          6129  
0000A576  343C 0840               6130           MOVE.W  #$0840,D2      NEW OP-CODE MASK
0000A57A                          6131  
0000A57A  528D                    6132  MB100    ADDQ.L  #1,A5
0000A57C  6100 F44E               6133           BSR     EV             EVALUATE EXPRESSION
0000A580  0C80 00000021           6134           CMPI.L  #33,D0
0000A586  6E28                    6135           BGT.S   ER2            (MODULO 32)
0000A588  3340 0002               6136           MOVE.W  D0,TDATA+2(A1)
0000A58C  5483                    6137           ADDQ.L  #2,D3          STORE POINTER
0000A58E                          6138  
0000A58E  5429 000A               6139           ADDQ.B  #2,TNB(A1)
0000A592                          6140  
0000A592  6100 FC58               6141  MB105    BSR     COMMA
0000A596                          6142  
0000A596  6100 F4E4               6143           BSR     EADA           DESTINATION
0000A59A  8446                    6144           OR.W    D6,D2
0000A59C                          6145  
0000A59C  4A29 000B               6146           TST.B   TLSPEC(A1)     ..
0000A5A0  6718                    6147           BEQ.S   MB185          DEFAULT
0000A5A2                          6148  
0000A5A2  0246 0038               6149           ANDI.W  #$0038,D6
0000A5A6  660C                    6150           BNE.S   MB145          DESTINATION <EA> WAS NOT D@
0000A5A8                          6151  
0000A5A8  0C69 0080 000C          6152           CMPI.W  #$80,TLENGTH(A1)  DESTINATION <EA> WAS D@
0000A5AE  670A                    6153           BEQ.S   MB185          LENGTH IS .L
0000A5B0  6000 FC54               6154  ER2      BRA     ER
0000A5B4                          6155  
0000A5B4  4A69 000C               6156  MB145    TST.W   TLENGTH(A1)
0000A5B8  66F6                    6157           BNE     ER2            NOT BYTE LENGTH
0000A5BA                          6158  
0000A5BA  6000 FC52               6159  MB185    BRA     CMMD2
0000A5BE                          6160  
0000A5BE  6100 F47C               6161  MB200    BSR     GETREGD        DYNAMIC
0000A5C2  EE58                    6162           ROR.W   #7,D0
0000A5C4  8440                    6163           OR.W    D0,D2
0000A5C6                          6164  
0000A5C6  60CA                    6165           BRA     MB105
0000A5C8                          6166  
0000A5C8  0C15 0023               6167  MBSET    CMPI.B  #'#',(A5)      (INDEX 11) BCLR BSET
0000A5CC  66F0                    6168           BNE     MB200
0000A5CE                          6169  
0000A5CE  343C 08C0               6170           MOVE.W  #$08C0,D2
0000A5D2  60A6                    6171           BRA     MB100
0000A5D4                          6172  
0000A5D4  0C15 0023               6173  MBCLR    CMPI.B  #'#',(A5)      (INDEX 30)
0000A5D8  66E4                    6174           BNE     MB200
0000A5DA                          6175  
0000A5DA  343C 0880               6176           MOVE.W  #$0880,D2
0000A5DE  609A                    6177           BRA     MB100
0000A5E0                          6178  
0000A5E0  0C15 0023               6179  MBTST    CMPI.B  #'#',(A5)      (INDEX 31)
0000A5E4  66D8                    6180           BNE     MB200
0000A5E6                          6181  
0000A5E6  343C 0800               6182           MOVE.W  #$0800,D2
0000A5EA  608E                    6183           BRA     MB100
0000A5EC                          6184  
0000A5EC                          6185  MDBCC    DS      0              (INDEX 8)
0000A5EC  6100 F44E               6186           BSR     GETREGD
0000A5F0  8440                    6187           OR.W    D0,D2
0000A5F2                          6188  
0000A5F2  6100 FBF8               6189           BSR     COMMA
0000A5F6  613C                    6190           BSR.S   EVSR
0000A5F8  601A                    6191           BRA.S   MBRA23
0000A5FA                          6192  
0000A5FA                          6193  *  SIZE   .S  =  .W   (DEFAULT)
0000A5FA                          6194  *         .L  =  .L
0000A5FA                          6195  MBRA     DS      0              (INDEX 10)
0000A5FA  6138                    6196           BSR.S   EVSR
0000A5FC                          6197  
0000A5FC  0C69 0080 000C          6198           CMPI.W  #$0080,TLENGTH(A1)
0000A602  6710                    6199           BEQ.S   MBRA23         FORCED LONG
0000A604                          6200  
0000A604  6100 F724               6201           BSR     EA8BITS        -128 TO +127
0000A608  660A                    6202           BNE.S   MBRA23         NOT 8 BIT VALUE
0000A60A                          6203  
0000A60A  8405                    6204           OR.B    D5,D2
0000A60C  6000 FC00               6205           BRA     CMMD2          .SHORT
0000A610                          6206  
0000A610  6000 FBF4               6207  EVER     BRA     ER             ERROR HANDLER
0000A614                          6208  
0000A614  4A29 000B               6209  MBRA23   TST.B   TLSPEC(A1)
0000A618  6708                    6210           BEQ.S   MBRA27
0000A61A  0C69 0040 000C          6211           CMPI.W  #$0040,TLENGTH(A1)
0000A620  67EE                    6212           BEQ     EVER           .S SPECIFIED
0000A622                          6213  MBRA27
0000A622                          6214  
0000A622  2A04                    6215           MOVE.L  D4,D5          RESTORE D5
0000A624  6100 F6F0               6216           BSR     EA16BITS       -32K TO +32K
0000A628  3345 0002               6217           MOVE.W  D5,TDATA+2(A1)
0000A62C  5429 000A               6218           ADDQ.B  #2,TNB(A1)
0000A630  6000 FBDC               6219           BRA     CMMD2
0000A634                          6220  
0000A634  6100 F396               6221  EVSR     BSR     EV
0000A638  0C15 0020               6222           CMPI.B  #BLANK,(A5)
0000A63C  66D2                    6223           BNE     EVER           DID NOT TERMINATE WITH SPACE
0000A63E                          6224  
0000A63E  2A00                    6225           MOVE.L  D0,D5
0000A640  E280                    6226           ASR.L   #1,D0
0000A642  65CC                    6227           BCS     EVER           ODD VALUE
0000A644  2829 000E               6228           MOVE.L  PCOUNTER(A1),D4
0000A648  5484                    6229           ADDQ.L  #2,D4          D4 = PC + 2
0000A64A  9A84                    6230           SUB.L   D4,D5
0000A64C  67C2                    6231           BEQ     EVER           ZERO; SPECIAL CASE ERROR
0000A64E  2805                    6232           MOVE.L  D5,D4
0000A650  4E75                    6233           RTS
0000A652                          6234  
0000A652                          6235  MCHK     DS      0              (INDEX 12) CHK DIV MUL
0000A652  6100 0238               6236           BSR     SIZEWORD
0000A656                          6237  
0000A656  6100 F43C               6238           BSR     EADADDR        DATA ADDRESSING ONLY
0000A65A  8446                    6239           OR.W    D6,D2
0000A65C                          6240  
0000A65C  6100 FB8E               6241           BSR     COMMA
0000A660                          6242  
0000A660  6100 F3DA               6243           BSR     GETREGD
0000A664  EE58                    6244           ROR.W   #7,D0
0000A666  8440                    6245           OR.W    D0,D2
0000A668                          6246  
0000A668  6000 FBA4               6247           BRA     CMMD2
0000A66C                          6248  
0000A66C                          6249  MCLR     DS      0              (INDEX 13)
0000A66C  6100 F3C8               6250           BSR     FSIZE
0000A670                          6251  
0000A670  6100 F40A               6252           BSR     EADA           DATA ALTERABLE ONLY
0000A674  8446                    6253           OR.W    D6,D2
0000A676  6000 FB96               6254           BRA     CMMD2
0000A67A                          6255  
0000A67A                          6256  * SIZE = BYTE, WORD, LONG
0000A67A                          6257  MCMPM    DS      0              (INDEX 14)
0000A67A  6100 F3BA               6258           BSR     FSIZE
0000A67E                          6259  
0000A67E  3E3C 0008               6260           MOVE.W  #$0008,D7
0000A682  6100 F420               6261           BSR     EA             -(A@)   ONLY
0000A686  0246 0007               6262           ANDI.W  #7,D6
0000A68A  8446                    6263           OR.W    D6,D2
0000A68C                          6264  
0000A68C  6100 FB5E               6265           BSR     COMMA
0000A690                          6266  
0000A690  3E3C 0008               6267           MOVE.W  #$0008,D7
0000A694  6100 F40E               6268           BSR     EA
0000A698  0246 0007               6269           ANDI.W  #7,D6
0000A69C  EE5E                    6270           ROR.W   #7,D6
0000A69E  8446                    6271           OR.W    D6,D2
0000A6A0  6000 FB6C               6272           BRA     CMMD2
0000A6A4                          6273  
0000A6A4                          6274  MEXG     DS      0              (INDEX 16)
0000A6A4  6100 01D6               6275           BSR     SIZELONG
0000A6A8                          6276  
0000A6A8  6100 F3BA               6277           BSR     GETREGAD
0000A6AC  2800                    6278           MOVE.L  D0,D4          D4 = REG NUMBER
0000A6AE  2A01                    6279           MOVE.L  D1,D5          D5 = REG TYPE
0000A6B0                          6280  
0000A6B0  6100 FB3A               6281           BSR     COMMA          TEST FOR COMMA
0000A6B4                          6282  
0000A6B4  6100 F3AE               6283           BSR     GETREGAD
0000A6B8                          6284  
0000A6B8  BA81                    6285           CMP.L   D1,D5
0000A6BA  6714                    6286           BEQ.S   MEXG35         BOTH REGS THE SAME
0000A6BC                          6287  
0000A6BC                          6288  *  DX,AY  OR  AY,DX
0000A6BC  0042 0088               6289           ORI.W   #$88,D2        MODE
0000A6C0  4A01                    6290           TST.B   D1
0000A6C2  6602                    6291           BNE.S   MEXG25
0000A6C4                          6292  
0000A6C4  C144                    6293           EXG     D0,D4          SWAP SOURCE & DESTINATION
0000A6C6                          6294  
0000A6C6  8440                    6295  MEXG25   OR.W    D0,D2          .......MMMMMYYY
0000A6C8  EE5C                    6296           ROR.W   #7,D4
0000A6CA  8444                    6297           OR.W    D4,D2          ....XXXMMMMMYYY
0000A6CC  6000 FB40               6298           BRA     CMMD2
0000A6D0                          6299  
0000A6D0  0042 0040               6300  MEXG35   ORI.W   #$0040,D2      OP-MODE
0000A6D4  4A01                    6301           TST.B   D1
0000A6D6  67EE                    6302           BEQ     MEXG25         DX,DY
0000A6D8                          6303  
0000A6D8  0042 0048               6304           ORI.W   #$0048,D2      AX,AY
0000A6DC  60E8                    6305           BRA     MEXG25
0000A6DE                          6306  
0000A6DE                          6307  
0000A6DE                          6308  MEXT     DS      0              (INDEX 17)
0000A6DE  4A69 000C               6309           TST.W   TLENGTH(A1)
0000A6E2  6700 FB22               6310           BEQ     ER             BYTE SIZE NOT ALLOWED
0000A6E6                          6311  
0000A6E6  6100 F34E               6312           BSR     FSIZE          .W = ........10......
0000A6EA  0642 0040               6313           ADDI.W  #$0040,D2      .L = ........11......
0000A6EE                          6314  
0000A6EE  6100 F34C               6315           BSR     GETREGD
0000A6F2  8440                    6316           OR.W    D0,D2
0000A6F4  6000 FB18               6317           BRA     CMMD2
0000A6F8                          6318  
0000A6F8                          6319  MMOVEM   DS      0              (INDEX 27)
0000A6F8  3029 000C               6320           MOVE.W  TLENGTH(A1),D0 SIZE BITS  76 TO 6
0000A6FC  6700 FB08               6321           BEQ     ER             BYTE       00  ERROR
0000A700  E248                    6322           LSR.W   #1,D0          WORD       01    0
0000A702  0240 0040               6323           ANDI.W  #$0040,D0      LONG       10    1
0000A706  8440                    6324           OR.W    D0,D2
0000A708                          6325  
0000A708  5429 000A               6326           ADDQ.B  #2,TNB(A1)     NUMBER OF BYTES
0000A70C  5483                    6327           ADDQ.L  #2,D3          FORCE STORE PTR PAST MASK
0000A70E                          6328  
0000A70E  0C15 0041               6329           CMPI.B  #'A',(A5)
0000A712  671E                    6330           BEQ.S   MMM44
0000A714  0C15 0044               6331           CMPI.B  #'D',(A5)
0000A718  6718                    6332           BEQ.S   MMM44
0000A71A                          6333  
0000A71A                          6334  *    <EA>,<REGISTER LIST>       MEMORY TO REGISTER
0000A71A  0042 0400               6335           ORI.W   #$0400,D2      DIRECTION BIT
0000A71E                          6336  
0000A71E  3E3C 07EC               6337           MOVE.W  #$7EC,D7       MODES ALLOWED
0000A722  6100 F380               6338           BSR     EA
0000A726  8446                    6339           OR.W    D6,D2
0000A728                          6340  
0000A728  6100 FAC2               6341           BSR     COMMA
0000A72C                          6342  
0000A72C  612A                    6343           BSR.S   MMM48
0000A72E  6000 FADE               6344           BRA     CMMD2
0000A732                          6345  
0000A732                          6346  
0000A732                          6347  *   <REGISTER LIST>,<EA>        REGISTER TO MEMORY
0000A732                          6348  MMM44    DS      0
0000A732                          6349  
0000A732                          6350  * EVALUATE DESTINATION FIRST
0000A732  6100 FAC0               6351  MMM46    BSR     GETCHAR
0000A736  0C00 002C               6352           CMPI.B  #',',D0        FIND COMMA
0000A73A  66F6                    6353           BNE     MMM46
0000A73C                          6354  
0000A73C  3E3C 01F4               6355           MOVE.W  #$1F4,D7       MODES ALLOWED
0000A740  6100 F362               6356           BSR     EA
0000A744  8446                    6357           OR.W    D6,D2
0000A746  234D 0016               6358           MOVE.L  A5,PENDOP(A1)  END OF OPERAND
0000A74A  2A69 0012               6359           MOVE.L  PTROP(A1),A5
0000A74E  6108                    6360           BSR.S   MMM48          EVALUATE REGISTERS
0000A750  2A69 0016               6361           MOVE.L  PENDOP(A1),A5  POINTER TO END OF OPERAND
0000A754  6000 FAB8               6362           BRA     CMMD2
0000A758                          6363  
0000A758                          6364  *        D6 = CORRESPONDENCE MASK
0000A758                          6365  *        D4 = CONTROL  $FF '-BLANK/'
0000A758  4286                    6366  MMM48    CLR.L   D6             MASK
0000A75A  78FF                    6367           MOVEQ   #-1,D4         CONTROL = $FF
0000A75C                          6368  
0000A75C  6100 FA96               6369  RL111    BSR     GETCHAR
0000A760  0C00 002C               6370           CMPI.B  #',',D0
0000A764  6706                    6371           BEQ.S   RL114          DONE; FOUND COMMA
0000A766  0C00 0020               6372           CMPI.B  #BLANK,D0
0000A76A  6602                    6373           BNE.S   RL115          NOT SPACE
0000A76C  4E75                    6374  RL114    RTS     DONE
0000A76E                          6375  
0000A76E  0C00 002F               6376  RL115    CMPI.B  #'/',D0
0000A772  6614                    6377           BNE.S   RL444
0000A774                          6378  
0000A774  4A04                    6379           TST.B   D4             CONTROL
0000A776  6B00 FA8E               6380           BMI     ER
0000A77A  2800                    6381           MOVE.L  D0,D4          CONTROL = '/'
0000A77C  6100 F2E6               6382  RL333    BSR     GETREGAD
0000A780  8200                    6383           OR.B    D0,D1          D1 = BIT POSITION
0000A782  1A01                    6384           MOVE.B  D1,D5          D5 = LAST REGISTER ENTERED
0000A784  6146                    6385           BSR.S   SETBIT
0000A786  60D4                    6386           BRA     RL111
0000A788                          6387  
0000A788  0C00 002D               6388  RL444    CMPI.B  #'-',D0
0000A78C  6630                    6389           BNE.S   RL666
0000A78E                          6390  
0000A78E  0C04 002F               6391           CMPI.B  #'/',D4        CONTROL
0000A792  6600 FA72               6392           BNE     ER
0000A796  2800                    6393           MOVE.L  D0,D4          CONTROL = '-'
0000A798  6100 F2CA               6394           BSR     GETREGAD
0000A79C  8200                    6395           OR.B    D0,D1
0000A79E  2E01                    6396           MOVE.L  D1,D7          D7 = NOW REGISTER
0000A7A0  1005                    6397           MOVE.B  D5,D0          D5 = LAST REG
0000A7A2  B300                    6398           EOR.B   D1,D0
0000A7A4  0200 0038               6399           ANDI.B  #$38,D0
0000A7A8  6600 FA5C               6400           BNE     ER             NOT MATCED SET
0000A7AC  BA01                    6401           CMP.B   D1,D5
0000A7AE  6A00 FA56               6402           BPL     ER
0000A7B2                          6403  
0000A7B2  5285                    6404  RL555    ADDQ.L  #1,D5
0000A7B4  2205                    6405           MOVE.L  D5,D1
0000A7B6  6114                    6406           BSR.S   SETBIT
0000A7B8  BA07                    6407           CMP.B   D7,D5
0000A7BA  6BF6                    6408           BMI     RL555
0000A7BC  609E                    6409           BRA     RL111
0000A7BE                          6410  
0000A7BE  4A04                    6411  RL666    TST.B   D4
0000A7C0  6A00 FA44               6412           BPL     ER
0000A7C4  183C 002F               6413           MOVE.B  #'/',D4        CONTROL = '/'
0000A7C8  538D                    6414           SUBQ.L  #1,A5
0000A7CA  60B0                    6415           BRA     RL333
0000A7CC                          6416  
0000A7CC  41FA 001A               6417  SETBIT   LEA     MTBL(PC),A0    SET BIT IN CORRESPONDENCE MASK
0000A7D0  2002                    6418           MOVE.L  D2,D0
0000A7D2  0240 0038               6419           ANDI.W  #$38,D0
0000A7D6  0C40 0020               6420           CMPI.W  #$20,D0
0000A7DA  6604                    6421           BNE.S   RL30           NOT PREDECREMENT
0000A7DC  1230 1000               6422           MOVE.B  (A0,D1),D1     D1 = BIT  (FOR SURE)
0000A7E0  03C6                    6423  RL30     BSET    D1,D6
0000A7E2                          6424  
0000A7E2  3346 0002               6425           MOVE.W  D6,TDATA+2(A1) SAVE CORRESPONDENCE MASK
0000A7E6  4E75                    6426           RTS
0000A7E8                          6427  
0000A7E8= 0F 0E 0D 0C 0B 0A 09    6428  MTBL     DC.B    15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
          08 07 06 05 04 03 02  
          01 00                 
0000A7F8                          6431  
0000A7F8                          6432  
0000A7F8                          6433  
0000A7F8                          6434  
0000A7F8                          6435  *   D@,<DATA>(A@)
0000A7F8                          6436  *   <DATA>(A@),D@
0000A7F8                          6437  *         (A@),D@            FORCED TO 0(A@),D0
0000A7F8                          6438  *         D@,(A@)            FORCED TO D0,0(A@)
0000A7F8                          6439  *
0000A7F8                          6440  *  SIZE = WORD, LONG
0000A7F8                          6441  MMOVEP   DS      0              (INDEX 33)
0000A7F8  3029 000C               6442           MOVE.W  TLENGTH(A1),D0
0000A7FC  6700 FA08               6443           BEQ     ER             .BYTE NOT ALLOWED
0000A800  E248                    6444           LSR.W   #1,D0
0000A802  0240 0040               6445           ANDI.W  #$0040,D0
0000A806  8440                    6446           OR.W    D0,D2          SIZE
0000A808                          6447  
0000A808  3E3C 0025               6448           MOVE.W  #$25,D7
0000A80C  6100 F296               6449           BSR     EA             D6 = MODE
0000A810                          6450  
0000A810  6100 F9DA               6451           BSR     COMMA
0000A814                          6452  
0000A814  2006                    6453           MOVE.L  D6,D0
0000A816  0240 0038               6454           ANDI.W  #$38,D0
0000A81A  0C00 0000               6455           CMPI.B  #$0,D0
0000A81E  670A                    6456           BEQ.S   MMP344         D@,<DATA>(A@)
0000A820                          6457  
0000A820                          6458  *    <DATA>(A@),D@
0000A820  6100 F21A               6459           BSR     GETREGD
0000A824  EE58                    6460           ROR.W   #7,D0
0000A826  8440                    6461           OR.W    D0,D2          D@
0000A828  6010                    6462           BRA.S   MMP348
0000A82A                          6463  
0000A82A  0042 0080               6464  MMP344   ORI.W   #$0080,D2      REGISTER TO MEMORY
0000A82E                          6465  
0000A82E  EE5E                    6466           ROR.W   #7,D6
0000A830  8446                    6467           OR.W    D6,D2          D@
0000A832                          6468  
0000A832  3E3C 0024               6469           MOVE.W  #$24,D7
0000A836  6100 F26C               6470           BSR     EA
0000A83A  2006                    6471  MMP348   MOVE.L  D6,D0
0000A83C  0246 0007               6472           ANDI.W  #7,D6
0000A840  8446                    6473           OR.W    D6,D2          A@
0000A842                          6474  
0000A842  0240 0038               6475           ANDI.W  #$38,D0
0000A846  0C00 0010               6476           CMPI.B  #$10,D0
0000A84A  660A                    6477           BNE.S   MMP368         <DATA>(A@)
0000A84C                          6478  
0000A84C  4269 0002               6479           CLR.W   TDATA+2(A1)    <DATA> FORCED TO ZERO;  "(A@)"
0000A850  5429 000A               6480           ADDQ.B  #2,TNB(A1)     NUMBER OF BYTES
0000A854  5483                    6481           ADDQ.L  #2,D3          STORE POINTER
0000A856  6000 F9B6               6482  MMP368   BRA     CMMD2
0000A85A                          6483  
0000A85A                          6484  MMOVEQ   DS      0              (INDEX 34)
0000A85A  6100 01FA               6485           BSR     GETIMM
0000A85E  2A00                    6486           MOVE.L  D0,D5
0000A860                          6487  
0000A860  6100 F4C8               6488           BSR     EA8BITS        -128 TO +127
0000A864  6600 F9A0               6489           BNE     ER
0000A868  8405                    6490           OR.B    D5,D2          D5 = VALUE
0000A86A                          6491  
0000A86A  6100 F980               6492           BSR     COMMA
0000A86E                          6493  
0000A86E  6100 F1CC               6494           BSR     GETREGD        D@
0000A872  EE58                    6495           ROR.W   #7,D0
0000A874                          6496  
0000A874  8440                    6497  MMQ20    OR.W    D0,D2
0000A876  6104                    6498           BSR.S   SIZELONG
0000A878  6000 F994               6499           BRA     CMMD2
0000A87C                          6500  
0000A87C  4A29 000B               6501  SIZELONG TST.B   TLSPEC(A1)     MUST BE .LONG
0000A880  6708                    6502           BEQ.S   SI201          DEFAULT SIZE OK
0000A882  0C69 0080 000C          6503           CMPI.W  #$0080,TLENGTH(A1)
0000A888  660A                    6504           BNE.S   ER10           NOT .LONG
0000A88A  4E75                    6505  SI201    RTS
0000A88C                          6506  
0000A88C  0C69 0040 000C          6507  SIZEWORD CMPI.W  #$0040,TLENGTH(A1)  MUST BE .WORD
0000A892  67F6                    6508           BEQ     SI201          [RTS]
0000A894  6000 F970               6509  ER10     BRA     ER
0000A898                          6510  
0000A898  4A29 000B               6511  SIZEBYTE TST.B   TLSPEC(A1)
0000A89C  6706                    6512           BEQ.S   SI222          DEFAULT SIZE OK
0000A89E  4A69 000C               6513           TST.W   TLENGTH(A1)
0000A8A2  66F0                    6514           BNE     ER10
0000A8A4  4E75                    6515  SI222    RTS
0000A8A6                          6516  
0000A8A6                          6517  MMOVE    DS      0              (INDEX 21)
0000A8A6  0C15 0053               6518           CMPI.B  #'S',(A5)
0000A8AA  661C                    6519           BNE.S   MMM40
0000A8AC  343C 40C0               6520           MOVE.W  #$40C0,D2      SR,<EA>
0000A8B0  528D                    6521           ADDQ.L  #1,A5
0000A8B2  0C1D 0052               6522           CMPI.B  #'R',(A5)+
0000A8B6  66DC                    6523           BNE     ER10
0000A8B8                          6524  
0000A8B8  6100 F932               6525           BSR     COMMA
0000A8BC                          6526  
0000A8BC  6100 F1BE               6527           BSR     EADA           DATA ALTERABLE ONLY (DESTINATION)
0000A8C0                          6528  
0000A8C0  8446                    6529  MM315    OR.W    D6,D2
0000A8C2  61C8                    6530           BSR     SIZEWORD
0000A8C4  6000 F948               6531           BRA     CMMD2
0000A8C8                          6532  
0000A8C8  0C15 0055               6533  MMM40    CMPI.B  #'U',(A5)
0000A8CC  661C                    6534           BNE.S   MMM50
0000A8CE  528D                    6535           ADDQ.L  #1,A5
0000A8D0  0C1D 0053               6536           CMPI.B  #'S',(A5)+
0000A8D4  66BE                    6537           BNE     ER10
0000A8D6  0C1D 0050               6538           CMPI.B  #'P',(A5)+
0000A8DA  66B8                    6539           BNE     ER10
0000A8DC                          6540  
0000A8DC  6100 F90E               6541           BSR     COMMA
0000A8E0                          6542  
0000A8E0  343C 4E68               6543           MOVE.W  #$4E68,D2      USP,A@
0000A8E4  6100 F170               6544           BSR     GETREGA
0000A8E8  608A                    6545           BRA     MMQ20
0000A8EA                          6546  
0000A8EA                          6547  * GET EXCEPTIONS FROM DESTINATION
0000A8EA                          6548  MMM50    DS      0
0000A8EA                          6549  
0000A8EA  6100 FBF4               6550           BSR     A5TODEST       MOVE A5 TO DESTINATION
0000A8EE                          6551  
0000A8EE  101D                    6552           MOVE.B  (A5)+,D0
0000A8F0  0C00 0043               6553           CMPI.B  #'C',D0
0000A8F4  6622                    6554           BNE.S   MMM60
0000A8F6  0C1D 0043               6555           CMPI.B  #'C',(A5)+
0000A8FA  6698                    6556           BNE     ER10
0000A8FC  0C1D 0052               6557           CMPI.B  #'R',(A5)+
0000A900  6692                    6558           BNE     ER10
0000A902  343C 44C0               6559           MOVE.W  #$44C0,D2      <EA>,CCR
0000A906                          6560  
0000A906  234D 0016               6561  MM508    MOVE.L  A5,PENDOP(A1)  SAVE POINTER
0000A90A  2A69 0012               6562           MOVE.L  PTROP(A1),A5   A5 = POINTER TO OPERAND
0000A90E                          6563  
0000A90E  6100 F184               6564           BSR     EADADDR        DATA ADDRESSING ONLY (SOURCE)
0000A912  2A69 0016               6565           MOVE.L  PENDOP(A1),A5
0000A916  60A8                    6566           BRA     MM315
0000A918                          6567  
0000A918  0C00 0053               6568  MMM60    CMPI.B  #'S',D0
0000A91C  660E                    6569           BNE.S   MM70
0000A91E  343C 46C0               6570           MOVE.W  #$46C0,D2      <EA>,SR
0000A922  0C1D 0052               6571           CMPI.B  #'R',(A5)+
0000A926  6600 F8DE               6572           BNE     ER
0000A92A  60DA                    6573           BRA     MM508
0000A92C                          6574  
0000A92C  0C00 0055               6575  MM70     CMPI.B  #'U',D0
0000A930  6628                    6576           BNE.S   MM80
0000A932  343C 4E60               6577           MOVE.W  #$4E60,D2      A@,USP
0000A936  0C1D 0053               6578           CMPI.B  #'S',(A5)+
0000A93A  6600 F8CA               6579           BNE     ER
0000A93E  0C1D 0050               6580           CMPI.B  #'P',(A5)+
0000A942  6600 F8C2               6581           BNE     ER
0000A946                          6582  
0000A946  234D 0016               6583           MOVE.L  A5,PENDOP(A1)
0000A94A  2A69 0012               6584           MOVE.L  PTROP(A1),A5
0000A94E  6100 F106               6585           BSR     GETREGA
0000A952  2A69 0016               6586           MOVE.L  PENDOP(A1),A5  RESTORE A5
0000A956  6000 FF1C               6587           BRA     MMQ20
0000A95A                          6588  
0000A95A  2A69 0012               6589  MM80     MOVE.L  PTROP(A1),A5   A5 = POINTER TO SOURCE FIELD
0000A95E  6100 F0D6               6590           BSR     FSIZE          GET SIZE (BITS  7 - 6)
0000A962  ED4A                    6591           LSL.W   #6,D2          ADJUST TO(BITS 13-12)
0000A964  0802 000D               6592           BTST    #13,D2
0000A968  6608                    6593           BNE.S   MM804          .L 10 TO 10
0000A96A  0642 1000               6594           ADDI.W  #$1000,D2      .W 01 TO 11
0000A96E  0042 1000               6595           ORI.W   #$1000,D2      .B 00 TO 01
0000A972  6100 F12C               6596  MM804    BSR     EAALL          SOURCE; ALL MODES ALLOWED
0000A976  8446                    6597           OR.W    D6,D2
0000A978                          6598  
0000A978                          6599  * IF BYTE SIZE; "ADDRESS REGISTER DIRECT" NOT ALLOWED
0000A978                          6600  
0000A978  2002                    6601           MOVE.L  D2,D0
0000A97A  0240 3000               6602           ANDI.W  #$3000,D0
0000A97E  0C40 1000               6603           CMPI.W  #$1000,D0
0000A982  660C                    6604           BNE.S   MM806          NOT .B SIZE
0000A984  0206 0038               6605           ANDI.B  #$38,D6
0000A988  0C06 0008               6606           CMPI.B  #$08,D6
0000A98C  6700 F878               6607           BEQ     ER
0000A990                          6608  MM806    DS      0
0000A990                          6609  
0000A990  6100 F85A               6610           BSR     COMMA
0000A994                          6611  
0000A994  3E3C 01FF               6612           MOVE.W  #$1FF,D7       DATA ALTERABLE + A@
0000A998  6100 F10A               6613           BSR     EA
0000A99C                          6614  
0000A99C  2006                    6615           MOVE.L  D6,D0          DESTINATION
0000A99E  0240 0038               6616           ANDI.W  #$0038,D0
0000A9A2  0C40 0008               6617           CMPI.W  #$0008,D0
0000A9A6  6712                    6618           BEQ.S   MMOVEA1        A@ MAKE MOVEA
0000A9A8                          6619  
0000A9A8                          6620  * POSITION REGISTER AND MODE OF DESTINATION
0000A9A8                          6621  
0000A9A8  E69E                    6622  MM825    ROR.L   #3,D6          RRR............. .............MMM
0000A9AA  E65E                    6623           ROR.W   #3,D6                           MMM.............
0000A9AC  4846                    6624           SWAP    D6             MMM............. RRR.............
0000A9AE  E75E                    6625           ROL.W   #3,D6                           .............RRR
0000A9B0  E39E                    6626           ROL.L   #1,D6          MM.............. ............RRRM
0000A9B2  E19E                    6627           ROL.L   #8,D6          ................ ....RRRMMM......
0000A9B4  8446                    6628           OR.W    D6,D2
0000A9B6  6000 F856               6629           BRA     CMMD2
0000A9BA                          6630  
0000A9BA  4283                    6631  MMOVEA1  CLR.L   D3
0000A9BC  137C 0002 000A          6632           MOVE.B  #2,TNB(A1)
0000A9C2                          6633  
0000A9C2                          6634  MMOVEA   DS      0              (INDEX 32)
0000A9C2  2A69 0012               6635           MOVE.L  PTROP(A1),A5   A5 = POINTER TO OPERAND
0000A9C6                          6636  
0000A9C6  3429 000C               6637           MOVE.W  TLENGTH(A1),D2 D0 = SIZE
0000A9CA  6700 F83A               6638           BEQ     ER             .BYTE NOT ALLOWED
0000A9CE                          6639  
0000A9CE  ED4A                    6640           LSL.W   #6,D2          .SIZE
0000A9D0  0802 000C               6641           BTST    #12,D2
0000A9D4  6704                    6642           BEQ.S   MMA225         .L = ..10
0000A9D6  0042 3000               6643           ORI.W   #$3000,D2      .W = ..11
0000A9DA                          6644  MMA225
0000A9DA                          6645  
0000A9DA  6100 F0C4               6646           BSR     EAALL          ALL MODES ALLOWED
0000A9DE  8446                    6647           OR.W    D6,D2
0000A9E0                          6648  
0000A9E0  6100 F80A               6649           BSR     COMMA
0000A9E4                          6650  
0000A9E4  3E3C 0002               6651           MOVE.W  #$0002,D7      A@ ONLY
0000A9E8  6100 F0BA               6652           BSR     EA
0000A9EC  60BA                    6653           BRA     MM825
0000A9EE                          6654  
0000A9EE                          6655  
0000A9EE                          6656  MJMP     DS      0              (INDEX 18)
0000A9EE  4A29 000B               6657           TST.B   TLSPEC(A1)
0000A9F2  671C                    6658           BEQ.S   MJMP32         DEFAULT (ALLOW EITHER .S OR .L)
0000A9F4  3029 000C               6659           MOVE.W  TLENGTH(A1),D0
0000A9F8  6700 F80C               6660           BEQ     ER             .B NOT ALLOWED
0000A9FC  3E3C 06E4               6661           MOVE.W  #$6E4,D7       D7 = MODES ALLOWED
0000AA00  0C40 0040               6662           CMPI.W  #$40,D0
0000AA04  6704                    6663           BEQ.S   MJMP22         .S SPECIFIED (.W ACCEPTED)
0000AA06  3E3C 8764               6664           MOVE.W  #$8764,D7      MODE FOR .L
0000AA0A  6100 F098               6665  MJMP22   BSR     EA
0000AA0E  6004                    6666           BRA.S   MJMP42
0000AA10                          6667  
0000AA10  6100 F070               6668  MJMP32   BSR     EAC            CONTROL ADDRESSING ONLY
0000AA14  8446                    6669  MJMP42   OR.W    D6,D2
0000AA16  6000 F7F6               6670           BRA     CMMD2
0000AA1A                          6671  
0000AA1A                          6672  * SIZE = LONG
0000AA1A                          6673  MLEA     DS      0              (INDEX 19)
0000AA1A  6100 FE60               6674           BSR     SIZELONG
0000AA1E                          6675  
0000AA1E  6100 F062               6676           BSR     EAC            CONTROL ADDRESSING ONLY
0000AA22  8446                    6677           OR.W    D6,D2
0000AA24                          6678  
0000AA24  6100 F7C6               6679           BSR     COMMA
0000AA28                          6680  
0000AA28  6100 F02C               6681           BSR     GETREGA
0000AA2C  EE58                    6682           ROR.W   #7,D0
0000AA2E  8440                    6683           OR.W    D0,D2
0000AA30  6000 F7DC               6684           BRA     CMMD2
0000AA34                          6685  
0000AA34                          6686  
0000AA34                          6687  * SIZE = LONG
0000AA34                          6688  MPEA     DS      0              (INDEX 36)
0000AA34  6100 FE46               6689           BSR     SIZELONG
0000AA38                          6690  
0000AA38  6100 F048               6691           BSR     EAC            CONTROL ADDRESSING ONLY
0000AA3C  8446                    6692           OR.W    D6,D2
0000AA3E  6000 F7CE               6693           BRA     CMMD2
0000AA42                          6694  
0000AA42                          6695  MSWAP    DS      0              (INDEX 24)
0000AA42                          6696  * SIZE WORD
0000AA42  0C69 0040 000C          6697           CMPI.W  #$0040,TLENGTH(A1)
0000AA48  6600 F7BC               6698           BNE     ER             NOT .W
0000AA4C                          6699  
0000AA4C  6100 EFEE               6700           BSR     GETREGD        D@ ONLY
0000AA50  8440                    6701           OR.W    D0,D2
0000AA52  6000 F7BA               6702           BRA     CMMD2
0000AA56                          6703  
0000AA56  0C1D 0023               6704  GETIMM   CMPI.B  #'#',(A5)+
0000AA5A  6600 F7AA               6705           BNE     ER
0000AA5E                          6706  
0000AA5E  6100 EF6C               6707           BSR     EV             EVALUATE EXPRESSION
0000AA62  4E75                    6708           RTS                    D0 = VALUE
0000AA64                          6709  
0000AA64  6100 EFF0               6710  MLINK    BSR     GETREGA        (INDEX 20)
0000AA68  8440                    6711           OR.W    D0,D2
0000AA6A                          6712  
0000AA6A  6100 F780               6713           BSR     COMMA
0000AA6E                          6714  
0000AA6E  61E6                    6715           BSR     GETIMM
0000AA70  2A00                    6716           MOVE.L  D0,D5
0000AA72  6100 F2A2               6717           BSR     EA16BITS       -32K TO +32K
0000AA76  3340 0002               6718           MOVE.W  D0,TDATA+2(A1)
0000AA7A                          6719  
0000AA7A  5429 000A               6720           ADDQ.B  #2,TNB(A1)
0000AA7E  6000 F78E               6721           BRA     CMMD2
0000AA82                          6722  
0000AA82                          6723  MSTOP    DS      0              (INDEX 23)
0000AA82                          6724  * UNSIZED
0000AA82  61D2                    6725           BSR     GETIMM
0000AA84  0C80 00010000           6726           CMPI.L  #$00010000,D0
0000AA8A  6400 F77A               6727           BCC     ER
0000AA8E  3340 0002               6728           MOVE.W  D0,TDATA+2(A1)
0000AA92  5429 000A               6729           ADDQ.B  #2,TNB(A1)
0000AA96  6000 F776               6730           BRA     CMMD2
0000AA9A                          6731  
0000AA9A                          6732  MTRAP    DS      0              (INDEX 25)
0000AA9A  61BA                    6733           BSR     GETIMM
0000AA9C  0C80 00000010           6734           CMPI.L  #16,D0
0000AAA2  6400 F762               6735           BCC     ER
0000AAA6  8440                    6736           OR.W    D0,D2
0000AAA8  6000 F764               6737           BRA     CMMD2
0000AAAC                          6738  
0000AAAC                          6739  MUNLK    DS      0              (INDEX 26)
0000AAAC                          6740  * UNSIZED
0000AAAC  6100 EFA8               6741           BSR     GETREGA
0000AAB0  8440                    6742           OR.W    D0,D2
0000AAB2  6000 F75A               6743           BRA     CMMD2
0000AAB6                          6744  
0000AAB6                          6745  MDC      DS      0              (INDEX 37) .W ONLY ALLOWED
0000AAB6  6100 EF14               6746           BSR     EV
0000AABA  2A00                    6747           MOVE.L  D0,D5
0000AABC  6100 F24E               6748           BSR     EA16BIT        ONLY .W ALLOWED     -32K TO +64K
0000AAC0  3405                    6749           MOVE.W  D5,D2
0000AAC2  6000 F74A               6750           BRA     CMMD2
0000AAC6                          6751  
0000AAC6                          6752  
0000AAC6                          6753  
0000AAC6                          6754  
0000AAC6                          6755  *-------------------------------------------------------------------------
0000AAC6                          6756  * File DCODE68K  68K ONE LINE DISASSEMBLER                        07/28/82
0000AAC6                          6757  
0000AAC6                          6758  *        CALLING SEQUENCE:
0000AAC6                          6759  *   D0,D1,D2 = CODE TO BE DISASSEMBLED
0000AAC6                          6760  *   A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
0000AAC6                          6761  *   A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
0000AAC6                          6762  *        JSR       DCODE68K
0000AAC6                          6763  
0000AAC6                          6764  *        RETURN:
0000AAC6                          6765  *   A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
0000AAC6                          6766  *   A5 = POINTER TO LINE AS DISASSEMBLED
0000AAC6                          6767  *   A6 = POINTER TO END OF LINE
0000AAC6                          6768  *
0000AAC6                          6769  * 01234567890123456789012345678901234567890123456789
0000AAC6                          6770  * AAAAAA FDATA.DDDDDDDDDDDDDD FOC.... FOP.....
0000AAC6                          6771  
0000AAC6                          6772  *FDATA   EQU     10             DATA FIELD
0000AAC6                          6773  *FOC     EQU     31             OP-CODE FIELD
0000AAC6                          6774  *FOP     EQU     39             OPERAND FIELD
0000AAC6                          6775  
0000AAC6                          6776  * CAUSES ORGIN MODULO 4
0000AAC6                          6777  LONG     MACRO
0000AAC6                          6778           DS      0
0000AAC6                          6779           DS.B    (*-X)&2
0000AAC6                          6780           ENDM
0000AAC6                          6781  
0000AAC6                          6782  
0000AAC6                          6783  X        DS      0              BASE ADDRESS THIS MODULE
0000AAC6                          6784m          LONG
0000AAC6                          6785m          DS      0
0000AAC6                          6786m          DS.B    (*-X)&2
0000AAC6                          6787m          ENDM
0000AAC6                          6788  
0000AAC6                          6789  *  MOVEM REGISTERS TO EA
0000AAC6                          6790  *
0000AAC6                          6791  *        01001D001S......
0000AAC6                          6792  *        ..........XXXXXX       EFFECTIVE ADDRESS
0000AAC6                          6793  *        .........0......       WORD
0000AAC6                          6794  *        .........1......       LONG
0000AAC6                          6795  *        .....0..........       REGISTER TO MEMORY
0000AAC6                          6796  *        .....1..........       MEMORY TO REGISTER
0000AAC6                          6797  *
0000AAC6                          6798  
0000AAC6                          6799  IMOVEMFR DS      0
0000AAC6  6100 071E               6800           BSR     MOVEMS         SIZE
0000AACA                          6801  
0000AACA  7C38                    6802           MOVEQ   #$0038,D6
0000AACC  CC54                    6803           AND.W   (A4),D6
0000AACE  0C46 0020               6804           CMPI.W  #$0020,D6
0000AAD2  6706                    6805           BEQ.S   IM7788         PREDECREMENT MODE
0000AAD4                          6806  
0000AAD4  7C01                    6807           MOVEQ   #1,D6          D6 = INCREMENTER (BIT POSITION)
0000AAD6  7200                    6808           MOVEQ   #0,D1          D1 = BIT POSITION
0000AAD8  6004                    6809           BRA.S   IM7799
0000AADA                          6810  
0000AADA  7CFF                    6811  IM7788   MOVEQ   #-1,D6         D6 = DECREMENTER (BIT POSITION)
0000AADC  720F                    6812           MOVEQ   #15,D1         D1 = BIT POSITION
0000AADE  6100 071A               6813  IM7799   BSR     MOVEMR         BUILD MASK WORD
0000AAE2                          6814  
0000AAE2  1CFC 002C               6815           MOVE.B  #',',(A6)+     STORE COMMA
0000AAE6                          6816  
0000AAE6  5483                    6817           ADDQ.L  #2,D3
0000AAE8  3814                    6818           MOVE.W  (A4),D4
0000AAEA  3E3C 01F4               6819           MOVE.W  #$1F4,D7       CONTROL + PREDECREMENT
0000AAEE  6100 0534               6820           BSR     EEA
0000AAF2  601C                    6821           BRA.S   CS16           COMMON
0000AAF4                          6822  
0000AAF4                          6823m          LONG
0000AAF4                          6824m          DS      0
0000AAF4                          6825m          DS.B    (*-X)&2
0000AAF6                          6826m          ENDM
0000AAF6                          6827  * MOVEM  EA  TO REGISTERS
0000AAF6                          6828  *
0000AAF6  6100 06EE               6829  IMOVEMTR BSR     MOVEMS         SIZE
0000AAFA  5483                    6830           ADDQ.L  #2,D3
0000AAFC  3E3C 07EC               6831           MOVE.W  #$7EC,D7       CONTROL + POSTINCREMENT
0000AB00  6100 0522               6832           BSR     EEA
0000AB04                          6833  
0000AB04  1CFC 002C               6834           MOVE.B  #',',(A6)+     STORE COMMA
0000AB08                          6835  
0000AB08  7C01                    6836           MOVEQ   #1,D6          D6 = BIT POSITION INCREMENTER
0000AB0A  7200                    6837           MOVEQ   #0,D1          D1 = BIT POSITION
0000AB0C  6100 06EC               6838           BSR     MOVEMR
0000AB10                          6839  
0000AB10  606C                    6840  CS16     BRA.S   CS15           COMMON
0000AB12                          6841  
0000AB12                          6842  
0000AB12                          6843m          LONG
0000AB12                          6844m          DS      0
0000AB12                          6845m          DS.B    (*-X)&2
0000AB12                          6846m          ENDM
0000AB12                          6847  ISTOP    DS      0
0000AB12  302C 0002               6848           MOVE.W  2(A4),D0
0000AB16  1CFC 0023               6849           MOVE.B  #'#',(A6)+     IMMEDIATE
0000AB1A  1CFC 0024               6850           MOVE.B  #'$',(A6)+     HEX
0000AB1E  6100 EAC2               6851           BSR     PNT4HX         VALUE
0000AB22  6000 07EE               6852           BRA     COMMON4
0000AB26                          6853  
0000AB26                          6854m          LONG
0000AB26                          6855m          DS      0
0000AB26                          6856m          DS.B    (*-X)&2
0000AB26                          6857m          ENDM
0000AB26                          6858  IMMED    DS      0              ADD  AND  CMP #  EOR  OR  SUB
0000AB26  6100 0472               6859           BSR     FORMSIZE
0000AB2A  5483                    6860           ADDQ.L  #2,D3          SIZE = 4
0000AB2C  1CFC 0023               6861           MOVE.B  #'#',(A6)+     IMMEDIATE
0000AB30                          6862  
0000AB30  4280                    6863           CLR.L   D0
0000AB32  302C 0002               6864           MOVE.W  2(A4),D0       D0 = EXTENSION WORD
0000AB36  3214                    6865           MOVE.W  (A4),D1
0000AB38  EC49                    6866           LSR.W   #6,D1
0000AB3A  0241 0003               6867           ANDI.W  #3,D1
0000AB3E  6746                    6868           BEQ.S   IMMED65        .BYTE
0000AB40                          6869  
0000AB40  0C01 0001               6870           CMPI.B  #1,D1
0000AB44  6750                    6871           BEQ.S   IMMED75        .WORD
0000AB46                          6872  
0000AB46  5483                    6873           ADDQ.L  #2,D3          .LONG    SIZE = 6
0000AB48  202C 0002               6874           MOVE.L  2(A4),D0       D0 = LONG EXTENSION WORD
0000AB4C                          6875  
0000AB4C  6100 E380               6876  IMMED45  BSR     HEX2DEC        DECIMAL
0000AB50                          6877  
0000AB50  1CC5                    6878           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AB52                          6879  
0000AB52  3014                    6880           MOVE    (A4),D0
0000AB54  0240 003F               6881           ANDI.W  #$003F,D0
0000AB58  0C40 003C               6882           CMPI.W  #$003C,D0      DESTINATION ADDRESS MODE 111100  "SR"
0000AB5C  6622                    6883           BNE.S   IMMED55        NOT FOUND
0000AB5E                          6884  
0000AB5E  3014                    6885           MOVE.W  (A4),D0        "SR"  ILLEGAL FOR
0000AB60  0240 4000               6886           ANDI.W  #$4000,D0      ADDI   SUBI  CMPI
0000AB64  6600 07D6               6887           BNE     FERROR         0600   0400  0C00
0000AB68                          6888  
0000AB68  3214                    6889           MOVE.W  (A4),D1
0000AB6A  0241 00C0               6890           ANDI.W  #$00C0,D1
0000AB6E  0C41 0080               6891           CMPI.W  #$0080,D1
0000AB72  6700 07C8               6892           BEQ     FERROR         .LONG NOT ALLOWED
0000AB76                          6893  
0000AB76  1CFC 0053               6894           MOVE.B  #'S',(A6)+     #,SR FOR ANDI, EORI, ORI
0000AB7A  1CFC 0052               6895           MOVE.B  #'R',(A6)+
0000AB7E  603E                    6896  CS15     BRA.S   CS14           COMMON
0000AB80                          6897  
0000AB80  6100 04A2               6898  IMMED55  BSR     EEA
0000AB84  6038                    6899           BRA.S   CS14           COMMON
0000AB86                          6900  
0000AB86  2200                    6901  IMMED65  MOVE.L  D0,D1          D1 = XXXXXXXX........
0000AB88  E049                    6902           LSR.W   #8,D1          D1 = 00000000XXXXXXXX
0000AB8A  670A                    6903           BEQ.S   IMMED75
0000AB8C  2200                    6904           MOVE.L  D0,D1
0000AB8E  EE41                    6905           ASR.W   #7,D1
0000AB90  5241                    6906           ADDQ.W  #1,D1          CHECK FOR NEGATIVE
0000AB92  6600 07A8               6907           BNE     FERROR
0000AB96                          6908  
0000AB96  48C0                    6909  IMMED75  EXT.L   D0
0000AB98  60B2                    6910           BRA     IMMED45
0000AB9A                          6911  
0000AB9A                          6912  *  BIT   5432109876543210
0000AB9A                          6913  *        ....RRRMMM......       DESTINATION REGISTER MODE
0000AB9A                          6914  *        ..........MMMRRR       SOURCE MODE REGISTER
0000AB9A                          6915  *        0001............       .BYTE
0000AB9A                          6916  *        0011............       .WORD
0000AB9A                          6917  *        0010............       .LONG
0000AB9A                          6918  *
0000AB9A                          6919  * IF BYTE SIZE; DESTINATION ADDRESS DIRECT NOT ALLOWED
0000AB9A                          6920m          LONG
0000AB9A                          6921m          DS      0
0000AB9A                          6922m          DS.B    (*-X)&2
0000AB9A                          6923m          ENDM
0000AB9A                          6924  IMOVE    DS      0
0000AB9A  6000 03A2               6925           BRA     IMOVEA1
0000AB9E                          6926  
0000AB9E                          6927m          LONG
0000AB9E                          6928m          DS      0
0000AB9E                          6929m          DS.B    (*-X)&2
0000AB9E                          6930m          ENDM
0000AB9E                          6931  ILINK    DS      0
0000AB9E  615E                    6932           BSR.S   FORMREGA
0000ABA0                          6933  
0000ABA0  1CC5                    6934           MOVE.B  D5,(A6)+       COMMA SERARATOR
0000ABA2                          6935  
0000ABA2  1CFC 0023               6936           MOVE.B  #'#',(A6)+
0000ABA6  302C 0002               6937           MOVE.W  2(A4),D0
0000ABAA  48C0                    6938           EXT.L   D0
0000ABAC  6100 E320               6939           BSR     HEX2DEC        DECIMAL DISPLACEMENT
0000ABB0  6000 0760               6940           BRA     COMMON4
0000ABB4                          6941  
0000ABB4                          6942m          LONG
0000ABB4                          6943m          DS      0
0000ABB4                          6944m          DS.B    (*-X)&2
0000ABB6                          6945m          ENDM
0000ABB6                          6946  FORM1    DS      0              CLR  NEG  NEGX  NOT TST
0000ABB6  6100 03E2               6947           BSR.L   FORMSIZE
0000ABBA                          6948  
0000ABBA                          6949  
0000ABBA                          6950  *                               NBCD TAS
0000ABBA  6100 0468               6951  FORM1A   BSR     EEA            DATA ALTERABLE ONLY
0000ABBE  606E                    6952  CS14     BRA.S   CS13           COMMON
0000ABC0                          6953  
0000ABC0                          6954m          LONG
0000ABC0                          6955m          DS      0
0000ABC0                          6956m          DS.B    (*-X)&2
0000ABC2                          6957m          ENDM
0000ABC2                          6958  FORM3    DS      0              EXT  SWAP
0000ABC2  614A                    6959           BSR.S   FORMREGD
0000ABC4  6068                    6960           BRA.S   CS13           COMMON
0000ABC6                          6961  
0000ABC6                          6962m          LONG
0000ABC6                          6963m          DS      0
0000ABC6                          6964m          DS.B    (*-X)&2
0000ABC6                          6965m          ENDM
0000ABC6                          6966  FORM4    DS      0              TRAP
0000ABC6  1CFC 0023               6967           MOVE.B  #'#',(A6)+
0000ABCA  3014                    6968           MOVE.W  (A4),D0
0000ABCC  0280 0000000F           6969           ANDI.L  #$0F,D0
0000ABD2  6100 E2FA               6970           BSR     HEX2DEC        DECIMAL
0000ABD6  6056                    6971           BRA.S   CS13           COMMON
0000ABD8                          6972  
0000ABD8                          6973m          LONG
0000ABD8                          6974m          DS      0
0000ABD8                          6975m          DS.B    (*-X)&2
0000ABDA                          6976m          ENDM
0000ABDA                          6977  FORM5    DS      0              UNLNK
0000ABDA  6122                    6978           BSR.S   FORMREGA
0000ABDC  6050                    6979           BRA.S   CS13           COMMON
0000ABDE                          6980  
0000ABDE                          6981  *  BIT   5432109876543210
0000ABDE                          6982  *        ....RRR.........       ADDRESS REGISTER
0000ABDE                          6983  *        ..........XXXXXX       EFFECTIVE ADDRESS
0000ABDE                          6984  *
0000ABDE                          6985m          LONG
0000ABDE                          6986m          DS      0
0000ABDE                          6987m          DS.B    (*-X)&2
0000ABDE                          6988m          ENDM
0000ABDE                          6989  FORM6A   DS      0              LEA
0000ABDE  3E3C 07E4               6990           MOVE.W  #$7E4,D7       CONTROL ADDRESSING
0000ABE2  6154                    6991           BSR.S   EEA10
0000ABE4                          6992  
0000ABE4  1CC5                    6993           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000ABE6                          6994  
0000ABE6  3814                    6995           MOVE.W  (A4),D4
0000ABE8  EF5C                    6996           ROL.W   #7,D4
0000ABEA  6112                    6997           BSR.S   FORMREGA
0000ABEC  6040                    6998           BRA.S   CS13           COMMON
0000ABEE                          6999  
0000ABEE                          7000  *  BIT   5432109876543210
0000ABEE                          7001  *        ....DDD.........       DATA REGISTER
0000ABEE                          7002  *        ..........XXXXXX       EFFECTIVE ADDRESS
0000ABEE                          7003  *
0000ABEE                          7004m          LONG
0000ABEE                          7005m          DS      0
0000ABEE                          7006m          DS.B    (*-X)&2
0000ABEE                          7007m          ENDM
0000ABEE                          7008  FORM6D   DS      0              CHK  DIVS  DIVU  MULS  MULU
0000ABEE  3E3C 0FFD               7009           MOVE.W  #$FFD,D7       DATA ADDRESSING
0000ABF2  6144                    7010           BSR.S   EEA10
0000ABF4                          7011  
0000ABF4  1CC5                    7012           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000ABF6                          7013  
0000ABF6  3814                    7014           MOVE.W  (A4),D4
0000ABF8  EF5C                    7015           ROL.W   #7,D4
0000ABFA  6112                    7016           BSR.S   FORMREGD
0000ABFC  6030                    7017           BRA.S   CS13           COMMON
0000ABFE                          7018  
0000ABFE  1CFC 0041               7019  FORMREGA MOVE.B  #'A',(A6)+     FORMAT A@
0000AC02  0204 0007               7020  FORMREG5 ANDI.B  #$07,D4
0000AC06  0004 0030               7021           ORI.B   #'0',D4
0000AC0A  1CC4                    7022           MOVE.B  D4,(A6)+
0000AC0C  4E75                    7023           RTS
0000AC0E                          7024  
0000AC0E  1CFC 0044               7025  FORMREGD MOVE.B  #'D',(A6)+     FORMAT D@
0000AC12  60EE                    7026           BRA     FORMREG5
0000AC14                          7027  
0000AC14                          7028  *  BIT   5432109876543210
0000AC14                          7029  *        ....DDD......DDD       DATA REGISTERS
0000AC14                          7030  *
0000AC14                          7031m          LONG
0000AC14                          7032m          DS      0
0000AC14                          7033m          DS.B    (*-X)&2
0000AC16                          7034m          ENDM
0000AC16                          7035  FORM7    DS      0              EXG
0000AC16  EF5C                    7036           ROL.W   #7,D4
0000AC18  61F4                    7037           BSR     FORMREGD
0000AC1A                          7038  
0000AC1A  1CC5                    7039           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AC1C                          7040  
0000AC1C  3814                    7041           MOVE.W  (A4),D4
0000AC1E  61EE                    7042           BSR     FORMREGD
0000AC20  600C                    7043           BRA.S   CS13           COMMON
0000AC22                          7044  
0000AC22                          7045  *  BIT   5432109876543210
0000AC22                          7046  *        ....AAA......AAA       ADDRESS REGISTERS
0000AC22                          7047  *
0000AC22                          7048m          LONG
0000AC22                          7049m          DS      0
0000AC22                          7050m          DS.B    (*-X)&2
0000AC22                          7051m          ENDM
0000AC22                          7052  FORM8    DS      0              EXG
0000AC22  EF5C                    7053           ROL.W   #7,D4
0000AC24  61D8                    7054           BSR     FORMREGA
0000AC26                          7055  
0000AC26  1CFC 002C               7056  FORM815  MOVE.B  #',',(A6)+     COMMA SEPARATOR
0000AC2A                          7057  
0000AC2A  3814                    7058           MOVE.W  (A4),D4
0000AC2C  61D0                    7059           BSR     FORMREGA
0000AC2E  6000 0080               7060  CS13     BRA     CS12           COMMON
0000AC32                          7061  
0000AC32                          7062  *  BIT   5432109876543210
0000AC32                          7063  *        ....DDD.........       DATA REGISTER
0000AC32                          7064  *        .............AAA       ADDRESS REGISTER
0000AC32                          7065  *
0000AC32                          7066m          LONG
0000AC32                          7067m          DS      0
0000AC32                          7068m          DS.B    (*-X)&2
0000AC32                          7069m          ENDM
0000AC32                          7070  FORM9    DS      0              EXG
0000AC32  EF5C                    7071           ROL.W   #7,D4
0000AC34  61D8                    7072           BSR     FORMREGD       DATA REGISTER
0000AC36  60EE                    7073           BRA     FORM815
0000AC38                          7074  
0000AC38  6000 03EA               7075  EEA10    BRA     EEA
0000AC3C                          7076  
0000AC3C                          7077  *  BIT   5432109876543210
0000AC3C                          7078  *        ..........AAAAAA         EFFECTIVE ADDRESS
0000AC3C                          7079  *        .......MMM......         OP-MODE
0000AC3C                          7080  *        ....RRR.........         D-REGISTER
0000AC3C                          7081  *        .......011......         WORD  EA,A@
0000AC3C                          7082  *        .......111......         LONG  EA,A@
0000AC3C                          7083  *        .......000......         EA,D@ BYTE (ADDRESS REGISTER DIRECT NOT ALLOWED)
0000AC3C                          7084  *        .......0........         EA,D@
0000AC3C                          7085  *        .......1........         D@,EA
0000AC3C                          7086  *        ........00......         BYTE
0000AC3C                          7087  *        ........01......         WORD
0000AC3C                          7088  *        ........10......         LONG
0000AC3C                          7089  *
0000AC3C                          7090m          LONG
0000AC3C                          7091m          DS      0
0000AC3C                          7092m          DS.B    (*-X)&2
0000AC3E                          7093m          ENDM
0000AC3E                          7094  *                               ADD <EA>,A@   CMP <EA>,A@   SUB <EA>,A@
0000AC3E                          7095  FORM10EX DS      0              ADD  CMP  SUB
0000AC3E  3E3C 0FFF               7096           MOVE.W  #$FFF,D7       ALL MODES ALLOWED
0000AC42  2004                    7097           MOVE.L  D4,D0
0000AC44  0240 01C0               7098           ANDI.W  #$01C0,D0
0000AC48  673A                    7099           BEQ.S   FORM103        .......000......
0000AC4A  0C40 01C0               7100           CMPI.W  #$01C0,D0
0000AC4E  6710                    7101           BEQ.S   FORM10E3       .......111......
0000AC50  0C40 00C0               7102           CMPI.W  #$00C0,D0
0000AC54  661E                    7103           BNE.S   FORM10E6
0000AC56                          7104  
0000AC56  1AFC 002E               7105           MOVE.B  #'.',(A5)+     .......011......       STORE PERIOD
0000AC5A  1AFC 0057               7106           MOVE.B  #'W',(A5)+
0000AC5E  6008                    7107           BRA.S   FORM10E4
0000AC60                          7108  
0000AC60  1AFC 002E               7109  FORM10E3 MOVE.B  #'.',(A5)+
0000AC64  1AFC 004C               7110           MOVE.B  #'L',(A5)+
0000AC68                          7111  
0000AC68  61CE                    7112  FORM10E4 BSR     EEA10
0000AC6A                          7113  
0000AC6A  1CC5                    7114           MOVE.B  D5,(A6)+       STORE COMMA SEPARATOR
0000AC6C                          7115  
0000AC6C  3814                    7116           MOVE.W  (A4),D4
0000AC6E  EF5C                    7117           ROL.W   #7,D4
0000AC70  618C                    7118           BSR     FORMREGA       <EA>,A@
0000AC72  603C                    7119           BRA.S   CS12           COMMON
0000AC74                          7120  
0000AC74  0814 0000               7121  FORM10E6 BTST.B  #0,(A4)
0000AC78  6620                    7122           BNE.S   FORM105        .......1........    D@,<EA>
0000AC7A  600C                    7123           BRA.S   FORM104        .......0........    <EA>,D@
0000AC7C                          7124  
0000AC7C                          7125  *  BIT   5432109876543210
0000AC7C                          7126  *        ..........AAAAAA       EFFECTIVE ADDRESS
0000AC7C                          7127  *        .......MMM......       OP-MODE
0000AC7C                          7128  *        ....RRR.........       D-REGISTER
0000AC7C                          7129  *        .......0........       EA,D@
0000AC7C                          7130  *        .......1........       D@,EA
0000AC7C                          7131  *        ........00......       BYTE
0000AC7C                          7132  *        ........01......       WORD
0000AC7C                          7133  *        ........10......       LONG
0000AC7C                          7134m          LONG
0000AC7C                          7135m          DS      0
0000AC7C                          7136m          DS.B    (*-X)&2
0000AC7E                          7137m          ENDM
0000AC7E                          7138  FORM10   DS      0              AND  EOR  OR
0000AC7E  0814 0000               7139           BTST.B  #0,(A4)
0000AC82  6616                    7140           BNE.S   FORM105
0000AC84                          7141  
0000AC84  3E3C 0FFD               7142  FORM103  MOVE.W  #$FFD,D7       DATA ADDRESSING
0000AC88  6100 0310               7143  FORM104  BSR     FORMSIZE
0000AC8C  61AA                    7144           BSR     EEA10          <EA>,D@
0000AC8E                          7145  
0000AC8E  1CC5                    7146           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AC90                          7147  
0000AC90  1814                    7148           MOVE.B  (A4),D4
0000AC92  E20C                    7149           LSR.B   #1,D4
0000AC94  6100 FF78               7150           BSR     FORMREGD
0000AC98  6016                    7151           BRA.S   CS12           COMMON
0000AC9A                          7152  
0000AC9A  6100 02FE               7153  FORM105  BSR     FORMSIZE       D@,<EA>
0000AC9E  1814                    7154           MOVE.B  (A4),D4
0000ACA0  E20C                    7155           LSR.B   #1,D4
0000ACA2  6100 FF6A               7156           BSR     FORMREGD
0000ACA6                          7157  
0000ACA6  1CC5                    7158           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000ACA8                          7159  
0000ACA8  3814                    7160           MOVE.W  (A4),D4
0000ACAA  3E3C 01FD               7161           MOVE.W  #$1FD,D7       ALTERABLE MEMORY ADDRESSING
0000ACAE  6188                    7162           BSR     EEA10
0000ACB0  6000 0662               7163  CS12     BRA     COMMON
0000ACB4                          7164  
0000ACB4                          7165m          LONG
0000ACB4                          7166m          DS      0
0000ACB4                          7167m          DS.B    (*-X)&2
0000ACB6                          7168m          ENDM
0000ACB6                          7169  *                               PEA     (JMP  JSR)
0000ACB6  3E3C 07E4               7170  FORM11   MOVE.W  #$7E4,D7       CONTROL ADDERSSING
0000ACBA  6100 FF7C               7171           BSR     EEA10
0000ACBE  60F0                    7172           BRA     CS12           COMMON
0000ACC0                          7173  
0000ACC0                          7174m          LONG
0000ACC0                          7175m          DS      0
0000ACC0                          7176m          DS.B    (*-X)&2
0000ACC2                          7177m          ENDM
0000ACC2                          7178  *                               JMP  JSR
0000ACC2  2004                    7179  FORM11SL MOVE.L  D4,D0          LOOK FOR .S  OR  .L
0000ACC4  0240 003F               7180           ANDI.W  #$3F,D0
0000ACC8  0C40 0038               7181           CMPI.W  #$38,D0
0000ACCC  6608                    7182           BNE.S   FORM112        NOT .S
0000ACCE  1AFC 002E               7183           MOVE.B  #'.',(A5)+     PERIOD
0000ACD2  1AFC 0053               7184           MOVE.B  #'S',(A5)+     S
0000ACD6  0C40 0039               7185  FORM112  CMPI.W  #$39,D0
0000ACDA  6608                    7186           BNE.S   FORM114
0000ACDC  1AFC 002E               7187           MOVE.B  #'.',(A5)+     PERIOD
0000ACE0  1AFC 004C               7188           MOVE.B  #'L',(A5)+     L
0000ACE4  60D0                    7189  FORM114  BRA     FORM11
0000ACE6                          7190  
0000ACE6                          7191  *  BIT   5432109876543210
0000ACE6                          7192  *        ....XXX.....0...       DATA DESTINATION REGISTER
0000ACE6                          7193  *        ....XXX.....1...       ADDRESS REGISTER
0000ACE6                          7194  *        ....XXX.00......       BYTE
0000ACE6                          7195  *        ........01......       WORD
0000ACE6                          7196  *        ........10......       LONG
0000ACE6                          7197  *        ............0...       DATA REGISTER TO DATA REGISTER
0000ACE6                          7198  *        ............1...       MEMORY TO MEMORY
0000ACE6                          7199  *        ............0XXX       DATA SOURCE REGISTER
0000ACE6                          7200  *        ............1XXX       ADDRESS SOURCE REGISTER
0000ACE6                          7201  *
0000ACE6                          7202m          LONG
0000ACE6                          7203m          DS      0
0000ACE6                          7204m          DS.B    (*-X)&2
0000ACE6                          7205m          ENDM
0000ACE6                          7206  FORM12   DS      0              ABCD  ADDX  SBCD  SUBX
0000ACE6  6100 02B2               7207           BSR     FORMSIZE
0000ACEA                          7208  
0000ACEA  0804 0003               7209           BTST    #3,D4
0000ACEE  6610                    7210           BNE.S   FORM125
0000ACF0                          7211  
0000ACF0  6100 FF1C               7212           BSR     FORMREGD       D@,D@;   FORMAT SOURCE
0000ACF4                          7213  
0000ACF4  1CC5                    7214           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000ACF6                          7215  
0000ACF6  1814                    7216           MOVE.B  (A4),D4
0000ACF8  E20C                    7217           LSR.B   #1,D4
0000ACFA  6100 FF12               7218           BSR     FORMREGD       FORMAT DESTINATION
0000ACFE  6046                    7219           BRA.S   CS11           COMMON
0000AD00                          7220  
0000AD00  1CFC 002D               7221  FORM125  MOVE.B  #'-',(A6)+     -
0000AD04  1CFC 0028               7222           MOVE.B  #'(',(A6)+     (
0000AD08  6100 FEF4               7223           BSR     FORMREGA       A@    SOURCE
0000AD0C                          7224  
0000AD0C  203C 282D2C29           7225           MOVE.L  #'(-,)',D0     ),-(
0000AD12  6152                    7226           BSR.S   SCHR           STORE CHARS
0000AD14                          7227  
0000AD14  1814                    7228           MOVE.B  (A4),D4
0000AD16  E20C                    7229           LSR.B   #1,D4
0000AD18  6100 FEE4               7230           BSR     FORMREGA       A@   DESTINATION
0000AD1C  1CFC 0029               7231           MOVE.B  #')',(A6)+
0000AD20  6024                    7232           BRA.S   CS11           COMMON
0000AD22                          7233  
0000AD22                          7234  *  BIT   5432109876543210
0000AD22                          7235  *        ....XXX.....1...       ADDRESS REGISTER    DESTINATION
0000AD22                          7236  *        ....XXX.00......       BYTE
0000AD22                          7237  *        ........01......       WORD
0000AD22                          7238  *        ........10......       LONG
0000AD22                          7239  *        ............1...       MEMORY TO MEMORY
0000AD22                          7240  *        ............1XXX       ADDRESS SOURCE REGISTER
0000AD22                          7241  *
0000AD22                          7242m          LONG
0000AD22                          7243m          DS      0
0000AD22                          7244m          DS.B    (*-X)&2
0000AD22                          7245m          ENDM
0000AD22                          7246  FORM12A  DS      0              CMPM
0000AD22  6100 0276               7247           BSR     FORMSIZE
0000AD26                          7248  
0000AD26  1CFC 0028               7249           MOVE.B  #'(',(A6)+     (
0000AD2A  6100 FED2               7250           BSR     FORMREGA       A@
0000AD2E                          7251  
0000AD2E  203C 282C2B29           7252           MOVE.L  #'(,+)',D0     )+,(
0000AD34  6130                    7253           BSR.S   SCHR           STORE CHARS
0000AD36                          7254  
0000AD36  1814                    7255           MOVE.B  (A4),D4
0000AD38  E20C                    7256           LSR.B   #1,D4
0000AD3A  6100 FEC2               7257           BSR     FORMREGA       A@
0000AD3E  1CFC 0029               7258           MOVE.B  #')',(A6)+
0000AD42  1CFC 002B               7259           MOVE.B  #'+',(A6)+
0000AD46  6000 05CC               7260  CS11     BRA     COMMON
0000AD4A                          7261  
0000AD4A                          7262m          LONG
0000AD4A                          7263m          DS      0
0000AD4A                          7264m          DS.B    (*-X)&2
0000AD4A                          7265m          ENDM
0000AD4A  6000 021E               7266  IQUICK   BRA     IQUICKA        ADDQ  SUBQ
0000AD4E                          7267  
0000AD4E                          7268  *  BIT   5432109876543210
0000AD4E                          7269  *        0111...0........       FIXED
0000AD4E                          7270  *        ....RRR.........       DATA REGISTER
0000AD4E                          7271  *        ........DDDDDDDD       SIGN EXTENDED DATA
0000AD4E                          7272  *
0000AD4E                          7273m          LONG
0000AD4E                          7274m          DS      0
0000AD4E                          7275m          DS.B    (*-X)&2
0000AD4E                          7276m          ENDM
0000AD4E                          7277  IMOVEQ   DS      0
0000AD4E  1CFC 0023               7278           MOVE.B  #'#',(A6)+     IMMEDIATE
0000AD52                          7279  
0000AD52  3014                    7280           MOVE.W  (A4),D0
0000AD54  4880                    7281           EXT.W   D0
0000AD56  48C0                    7282           EXT.L   D0
0000AD58  6100 E174               7283           BSR     HEX2DEC        DECIMAL
0000AD5C                          7284  
0000AD5C  1CC5                    7285           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AD5E                          7286  
0000AD5E  EF5C                    7287           ROL.W   #7,D4
0000AD60  6100 FEAC               7288           BSR     FORMREGD
0000AD64  60E0                    7289           BRA     CS11           COMMON
0000AD66                          7290  
0000AD66  1CC0                    7291  SCHR     MOVE.B  D0,(A6)+       OUTPUT STRING
0000AD68  E088                    7292           LSR.L   #8,D0
0000AD6A  66FA                    7293           BNE     SCHR           MORE TO OUTPUT
0000AD6C  4E75                    7294           RTS
0000AD6E                          7295  
0000AD6E                          7296  * MOVE FROM SR  (STATUS REGISTER)
0000AD6E                          7297  *
0000AD6E                          7298m          LONG
0000AD6E                          7299m          DS      0
0000AD6E                          7300m          DS.B    (*-X)&2
0000AD6E                          7301m          ENDM
0000AD6E  203C 2C525300           7302  IMVFSR   MOVE.L  #',RS'+0,D0   SR,
0000AD74                          7303  
0000AD74  61F0                    7304           BSR     SCHR
0000AD76  6100 02AC               7305           BSR     EEA            DATA ALTERABLE
0000AD7A  60CA                    7306           BRA     CS11           COMMON
0000AD7C                          7307  
0000AD7C                          7308  * MOVE FROM USP (USER STACK POINTER)
0000AD7C                          7309  *
0000AD7C                          7310m          LONG
0000AD7C                          7311m          DS      0
0000AD7C                          7312m          DS.B    (*-X)&2
0000AD7E                          7313m          ENDM
0000AD7E  203C 2C505355           7314  IMVFUSP  MOVE.L  #',PSU',D0     USP,
0000AD84  61E0                    7315           BSR     SCHR
0000AD86  6100 FE76               7316           BSR     FORMREGA
0000AD8A  60BA                    7317           BRA     CS11           COMMON
0000AD8C                          7318  
0000AD8C                          7319  * MOVE TO SR (STATUS REGISTER)
0000AD8C                          7320  *
0000AD8C                          7321m          LONG
0000AD8C                          7322m          DS      0
0000AD8C                          7323m          DS.B    (*-X)&2
0000AD8E                          7324m          ENDM
0000AD8E  3E3C 0FFD               7325  IMVTSR   MOVE.W  #$FFD,D7       DATA ADDRESSING
0000AD92  6100 0290               7326           BSR     EEA
0000AD96  203C 52532C00           7327           MOVE.L  #'RS,'+0,D0   ,SR
0000AD9C  61C8                    7328  IMVT44   BSR     SCHR
0000AD9E  60A6                    7329           BRA     CS11           COMMON
0000ADA0                          7330  
0000ADA0                          7331  * MOVE TO USP (USER STACK POINTER)
0000ADA0                          7332  *
0000ADA0                          7333m          LONG
0000ADA0                          7334m          DS      0
0000ADA0                          7335m          DS.B    (*-X)&2
0000ADA2                          7336m          ENDM
0000ADA2  6100 FE5A               7337  IMVTUSP  BSR     FORMREGA
0000ADA6  203C 5053552C           7338           MOVE.L  #'PSU,',D0     ,USP
0000ADAC  60EE                    7339           BRA     IMVT44
0000ADAE                          7340  
0000ADAE                          7341  *  MOVE TO CCR (CONDITION CODE REGISTER)
0000ADAE                          7342  *
0000ADAE                          7343m          LONG
0000ADAE                          7344m          DS      0
0000ADAE                          7345m          DS.B    (*-X)&2
0000ADAE                          7346m          ENDM
0000ADAE  3E3C 0FFD               7347  IMVTCCR  MOVE.W  #$FFD,D7       DATA ADDRESSING
0000ADB2  6100 0270               7348           BSR     EEA
0000ADB6  203C 5243432C           7349           MOVE.L  #'RCC,',D0     ,CCR
0000ADBC  60DE                    7350           BRA     IMVT44
0000ADBE                          7351  
0000ADBE                          7352  *  BIT   5432109876543210
0000ADBE                          7353  *        0000...1..001...       FIXED
0000ADBE                          7354  *        ....XXX.........       DATA REGISTER
0000ADBE                          7355  *        ........0.......       MEMORY TO REGISTER
0000ADBE                          7356  *        ........1.......       REGISTER TO MEMORY
0000ADBE                          7357  *        .........0......       WORD
0000ADBE                          7358  *        .........1......       LONG
0000ADBE                          7359  *        .............XXX       ADDRESS REGISTER
0000ADBE                          7360  *
0000ADBE                          7361m          LONG
0000ADBE                          7362m          DS      0
0000ADBE                          7363m          DS.B    (*-X)&2
0000ADBE                          7364m          ENDM
0000ADBE                          7365  IMOVEP   DS      0
0000ADBE  1AFC 002E               7366           MOVE.B  #'.',(A5)+     D@,#(A@)
0000ADC2  303C 4C57               7367           MOVE.W  #'LW',D0
0000ADC6  0804 0006               7368           BTST    #6,D4
0000ADCA  6702                    7369           BEQ.S   IMOVEP11       USE "W"
0000ADCC  E048                    7370           LSR.W   #8,D0          USE "L"
0000ADCE  1AC0                    7371  IMOVEP11 MOVE.B  D0,(A5)+       LENGTH
0000ADD0                          7372  
0000ADD0  1814                    7373           MOVE.B  (A4),D4
0000ADD2  E20C                    7374           LSR.B   #1,D4
0000ADD4                          7375  
0000ADD4  082C 0007 0001          7376           BTST.B  #7,1(A4)
0000ADDA  670E                    7377           BEQ.S   IMOVEP35
0000ADDC                          7378  
0000ADDC  6100 FE30               7379           BSR     FORMREGD       D@,$HHHH(A@)
0000ADE0                          7380  
0000ADE0  1CC5                    7381           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000ADE2                          7382  
0000ADE2  3814                    7383           MOVE.W  (A4),D4
0000ADE4  6112                    7384           BSR.S   IMOVEP66
0000ADE6  6000 052A               7385  CS20     BRA     COMMON4
0000ADEA                          7386  
0000ADEA  610C                    7387  IMOVEP35 BSR.S   IMOVEP66       $HHHH(A@),D@
0000ADEC                          7388  
0000ADEC  1CC5                    7389           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000ADEE                          7390  
0000ADEE  1814                    7391           MOVE.B  (A4),D4
0000ADF0  E20C                    7392           LSR.B   #1,D4
0000ADF2  6100 FE1A               7393           BSR     FORMREGD
0000ADF6  60EE                    7394           BRA     CS20           COMMON4
0000ADF8                          7395  
0000ADF8  1CFC 0024               7396  IMOVEP66 MOVE.B  #'$',(A6)+     FORMAT DISPLACEMENT
0000ADFC  302C 0002               7397           MOVE.W  2(A4),D0
0000AE00  6100 E7E0               7398           BSR     PNT4HX
0000AE04                          7399  
0000AE04  1CFC 0028               7400           MOVE.B  #'(',(A6)+
0000AE08                          7401  
0000AE08  3814                    7402           MOVE.W  (A4),D4
0000AE0A  6100 FDF2               7403           BSR     FORMREGA
0000AE0E  1CFC 0029               7404           MOVE.B  #')',(A6)+
0000AE12  4E75                    7405           RTS
0000AE14                          7406  
0000AE14                          7407m          LONG
0000AE14                          7408m          DS      0
0000AE14                          7409m          DS.B    (*-X)&2
0000AE16                          7410m          ENDM
0000AE16  6000 04FC               7411  SCOMMON  BRA     COMMON         NOP RESET RTE RTR RTS TRAPV
0000AE1A                          7412  
0000AE1A                          7413m          LONG
0000AE1A                          7414m          DS      0
0000AE1A                          7415m          DS.B    (*-X)&2
0000AE1A                          7416m          ENDM
0000AE1A  6100 00EA               7417  ISCC     BSR     ICCCC          GET REST OF OP-CODE
0000AE1E  6100 0204               7418           BSR     EEA            DATA ALTERABLE
0000AE22  60F2                    7419           BRA     SCOMMON
0000AE24                          7420  
0000AE24                          7421  
0000AE24                          7422m          LONG
0000AE24                          7423m          DS      0
0000AE24                          7424m          DS.B    (*-X)&2
0000AE26                          7425m          ENDM
0000AE26                          7426  IDBCC    DS      0              DB--
0000AE26  3814                    7427           MOVE.W  (A4),D4
0000AE28  6100 FDE4               7428           BSR     FORMREGD
0000AE2C                          7429  
0000AE2C  1CC5                    7430           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AE2E  1CFC 0024               7431           MOVE.B  #'$',(A6)+     HEX FIELD TO FOLLOW
0000AE32                          7432  
0000AE32  6100 00D2               7433           BSR     ICCCC
0000AE36  602E                    7434           BRA.S   ICC55
0000AE38                          7435  
0000AE38                          7436  *  BIT   5432109876543210
0000AE38                          7437  *        0110............       FIXED
0000AE38                          7438  *        ....CCCC........       CONDITION
0000AE38                          7439  *        ........DDDDDDD0       DISPLACEMENT
0000AE38                          7440  *        ...............1       ERROR (ODD BOUNDRY DISPLACEMENT)
0000AE38                          7441  *
0000AE38                          7442m          LONG
0000AE38                          7443m          DS      0
0000AE38                          7444m          DS.B    (*-X)&2
0000AE3A                          7445m          ENDM
0000AE3A                          7446  ICC      DS      0              B--
0000AE3A  6100 00CA               7447           BSR     ICCCC
0000AE3E                          7448  
0000AE3E  1CFC 0024               7449  IBSR     MOVE.B  #'$',(A6)+     BSR   BRA
0000AE42                          7450  
0000AE42  4A04                    7451           TST.B   D4
0000AE44  6720                    7452           BEQ.S   ICC55          16 BIT DISPLACEMENT
0000AE46                          7453  
0000AE46  1AFC 002E               7454           MOVE.B  #'.',(A5)+
0000AE4A  1AFC 0053               7455           MOVE.B  #'S',(A5)+
0000AE4E  4884                    7456           EXT.W   D4             8 BIT DISPLACEMENT
0000AE50                          7457  
0000AE50  48C4                    7458  ICC35    EXT.L   D4             SIGN-EXTENDED DISPLACEMENT
0000AE52  D8A9 FFFC               7459           ADD.L   HISPC(A1),D4   + PROGRAM COUNTER
0000AE56  5484                    7460           ADDQ.L  #2,D4          + TWO
0000AE58  2004                    7461           MOVE.L  D4,D0
0000AE5A                          7462  
0000AE5A  E284                    7463           ASR.L   #1,D4
0000AE5C  6500 04DE               7464           BCS     FERROR         ODD BOUNDRY DISPLACEMENT
0000AE60                          7465  
0000AE60  6100 E77A               7466           BSR     PNT6HX
0000AE64  60B0                    7467           BRA     SCOMMON
0000AE66                          7468  
0000AE66  5483                    7469  ICC55    ADDQ.L  #2,D3          SIZE
0000AE68  382C 0002               7470           MOVE.W  2(A4),D4
0000AE6C  1AFC 002E               7471           MOVE.B  #'.',(A5)+
0000AE70  1AFC 004C               7472           MOVE.B  #'L',(A5)+     .L FOR 16 BIT DISPLACEMENT
0000AE74  60DA                    7473           BRA     ICC35
0000AE76                          7474  
0000AE76                          7475m          LONG
0000AE76                          7476m          DS      0
0000AE76                          7477m          DS.B    (*-X)&2
0000AE76                          7478m          ENDM
0000AE76                          7479  *                               BCHG  BCLR  BSET  BTST
0000AE76                          7480  ISETD    DS      0              DYNAMIC BIT
0000AE76  EF5C                    7481           ROL.W   #7,D4
0000AE78  6100 FD94               7482           BSR     FORMREGD       DATA REGISTER
0000AE7C                          7483  
0000AE7C  1CC5                    7484  ISETD12  MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AE7E                          7485  
0000AE7E  3814                    7486           MOVE.W  (A4),D4
0000AE80  6100 01A2               7487           BSR     EEA            DATA ALTERABLE
0000AE84  6090                    7488  CS18     BRA     SCOMMON
0000AE86                          7489  
0000AE86                          7490m          LONG
0000AE86                          7491m          DS      0
0000AE86                          7492m          DS.B    (*-X)&2
0000AE86                          7493m          ENDM
0000AE86                          7494  *                            BCHG  BCLR  BSET  BTST
0000AE86                          7495  *  1ST WORD     .... .... ..XX XXXX    EA   DATA ALTERABLE ONLY
0000AE86                          7496  *  2ND WORD     0000 0000 000Y YYYY    BIT NUMBER
0000AE86                          7497  *
0000AE86                          7498  ISETS    DS      0              STATIC BIT
0000AE86  5483                    7499           ADDQ.L  #2,D3     SIZE
0000AE88  1CFC 0023               7500           MOVE.B  #'#',(A6)+     IMMEDIATE
0000AE8C                          7501  
0000AE8C  4280                    7502           CLR.L   D0
0000AE8E  302C 0002               7503           MOVE.W  2(A4),D0       GET BIT POSITION FROM 2ND WORD
0000AE92  2200                    7504           MOVE.L  D0,D1
0000AE94  EA89                    7505           LSR.L   #5,D1
0000AE96  6600 04A4               7506           BNE     FERROR
0000AE9A  6100 E032               7507           BSR     HEX2DEC        DECIMAL
0000AE9E                          7508  
0000AE9E  60DC                    7509           BRA     ISETD12
0000AEA0                          7510  
0000AEA0                          7511  *   BIT  5432109876543210
0000AEA0                          7512  *        ....XXX.........       IMMEDIATE COUNT/REGISTER
0000AEA0                          7513  *        .......0........       RIGHT SHIFT
0000AEA0                          7514  *        .......1........       LEFT SHIFT
0000AEA0                          7515  *        ........00......       BYTE
0000AEA0                          7516  *        ........01......       WORD
0000AEA0                          7517  *        ........10......       LONG
0000AEA0                          7518  *        ....0...11......       WORD (MEMORY)
0000AEA0                          7519  *        ....0...11AAAAAA       EFFECTIVE ADDRESS
0000AEA0                          7520  *        ..........0.....       SHIFT IMMEDIATE COUNT
0000AEA0                          7521  *        ..........1.....       SHIFT COUNT (MODULO 64) IN DATA REGISTER
0000AEA0                          7522  *
0000AEA0                          7523m          LONG
0000AEA0                          7524m          DS      0
0000AEA0                          7525m          DS.B    (*-X)&2
0000AEA2                          7526m          ENDM
0000AEA2                          7527  ISHIFT   DS      0              AS-  LS-  RO-  ROX-
0000AEA2  303C 4C52               7528           MOVE.W  #'LR',D0
0000AEA6  0804 0008               7529           BTST    #8,D4          DIRECTION BIT
0000AEAA  6702                    7530           BEQ.S   ISHIFT13       RIGHT
0000AEAC  E048                    7531           LSR.W   #8,D0          LEFT
0000AEAE  1AC0                    7532  ISHIFT13 MOVE.B  D0,(A5)+       DIRECTION; "L" OR "R"
0000AEB0                          7533  
0000AEB0  3014                    7534           MOVE.W  (A4),D0
0000AEB2  0240 00C0               7535           ANDI.W  #$00C0,D0
0000AEB6  0C40 00C0               7536           CMPI.W  #$00C0,D0
0000AEBA  6730                    7537           BEQ.S   ISHIFTM1       MEMORY SHIFT
0000AEBC                          7538  
0000AEBC  6100 00DC               7539           BSR     FORMSIZE
0000AEC0                          7540  
0000AEC0  EF5C                    7541           ROL.W   #7,D4
0000AEC2  0804 000C               7542           BTST    #12,D4         I/R BIT
0000AEC6  6616                    7543           BNE.S   ISHIFT33       COUNT IN REGISTER
0000AEC8                          7544  
0000AEC8  0204 0007               7545           ANDI.B  #$07,D4        IMMEDIATE COUNT
0000AECC  6604                    7546           BNE.S   ISHIFT23
0000AECE  0004 0008               7547           ORI.B   #$08,D4        CHANGE ZERO TO EIGHT
0000AED2  0004 0030               7548  ISHIFT23 ORI.B   #'0',D4
0000AED6  1CFC 0023               7549           MOVE.B  #'#',(A6)+
0000AEDA  1CC4                    7550           MOVE.B  D4,(A6)+
0000AEDC  6004                    7551           BRA.S   ISHIFT44
0000AEDE                          7552  
0000AEDE  6100 FD2E               7553  ISHIFT33 BSR     FORMREGD
0000AEE2                          7554  
0000AEE2  1CC5                    7555  ISHIFT44 MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AEE4                          7556  
0000AEE4  3814                    7557           MOVE.W  (A4),D4
0000AEE6  6100 FD26               7558           BSR     FORMREGD
0000AEEA  6098                    7559  CS17     BRA     CS18           COMMON
0000AEEC                          7560  
0000AEEC  1AFC 002E               7561  ISHIFTM1 MOVE.B  #'.',(A5)+     PERIOD
0000AEF0  1AFC 0057               7562           MOVE.B  #'W',(A5)+     .WORD
0000AEF4                          7563  
0000AEF4  0804 000B               7564           BTST    #11,D4
0000AEF8  6600 0442               7565           BNE     FERROR         BIT 11 MUST BE ZERO
0000AEFC                          7566  
0000AEFC  3E3C 01FC               7567           MOVE.W  #$1FC,D7       MEMORY ALTERABLE ADDRESSING
0000AF00  6100 0122               7568           BSR     EEA
0000AF04  60E4                    7569           BRA     CS17           COMMON
0000AF06                          7570  
0000AF06  700F                    7571  ICCCC    MOVEQ   #$0F,D0        APPEND CONDITION CODE
0000AF08  C014                    7572           AND.B   (A4),D0        D0 = CCC
0000AF0A  E388                    7573           LSL.L   #1,D0          D0 = CCC*2
0000AF0C                          7574  
0000AF0C  323B 0010               7575           MOVE.W  BRTBL(PC,D0.W),D1  GET BRANCH MNEMONIC
0000AF10  1AC1                    7576           MOVE.B  D1,(A5)+           (REVERSED) FROM THE TABLE
0000AF12  E049                    7577           LSR.W   #8,D1              AND ADD THE NONBLANK PORTION
0000AF14  0C01 0020               7578           CMPI.B  #BLANK,D1          TO THE BUFFER.
0000AF18  6702                    7579           BEQ.S   ICCCC9
0000AF1A  1AC1                    7580           MOVE.B  D1,(A5)+
0000AF1C  4E75                    7581  ICCCC9   RTS
0000AF1E                          7582  
0000AF1E= 20 54                   7583  BRTBL    DC.B    ' T'      'T '  BRA ACCEPTED
0000AF20= 20 46                   7584           DC.B    ' F'      'F '
0000AF22= 49 48                   7585           DC.B    'IH'      'HI'
0000AF24= 53 4C                   7586           DC.B    'SL'      'LS'
0000AF26= 43 43                   7587           DC.B    'CC'      'CC'
0000AF28= 53 43                   7588           DC.B    'SC'      'CS'
0000AF2A= 45 4E                   7589           DC.B    'EN'      'NE'
0000AF2C= 51 45                   7590           DC.B    'QE'      'EQ'
0000AF2E= 43 56                   7591           DC.B    'CV'      'VC'
0000AF30= 53 56                   7592           DC.B    'SV'      'VS'
0000AF32= 4C 50                   7593           DC.B    'LP'      'PL'
0000AF34= 49 4D                   7594           DC.B    'IM'      'MI'
0000AF36= 45 47                   7595           DC.B    'EG'      'GE'
0000AF38= 54 4C                   7596           DC.B    'TL'      'LT'
0000AF3A= 54 47                   7597           DC.B    'TG'      'GT'
0000AF3C= 45 4C                   7598           DC.B    'EL'      'LE'
0000AF3E                          7599  
0000AF3E                          7600  *   BIT  5432109876543210
0000AF3E                          7601  *        ....RRRMMM......    DESTINATION REGISTER MODE
0000AF3E                          7602  *        ..........MMMRRR    SOURCE MODE REGISTER
0000AF3E                          7603  *
0000AF3E                          7604  * IF BYTE SIZE; ADDRESS DIRECT NOT ALLOWED AS SOURCE
0000AF3E                          7605  *
0000AF3E                          7606  IMOVEA1  DS      0
0000AF3E  3E3C 0FFF               7607           MOVE.W  #$FFF,D7       ALL MODES
0000AF42  6100 00E0               7608           BSR     EEA
0000AF46                          7609  
0000AF46  1CC5                    7610           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AF48                          7611  
0000AF48  3814                    7612           MOVE.W  (A4),D4        ....RRRMMM......
0000AF4A  E24C                    7613           LSR.W   #1,D4          .....RRRMMM.....
0000AF4C  EA0C                    7614           LSR.B   #5,D4          .....RRR.....MMM
0000AF4E  E05C                    7615           ROR.W   #8,D4          .....MMM.....RRR
0000AF50  EB0C                    7616           LSL.B   #5,D4          .....MMMRRR.....
0000AF52  EA4C                    7617           LSR.W   #5,D4          ..........MMMRRR
0000AF54                          7618  
0000AF54                          7619  * IF .BYTE DESTINATION A@ NOT ALLOWED
0000AF54  3E3C 01FF               7620           MOVE.W  #$1FF,D7       DATA ALTERABLE + A@
0000AF58  1014                    7621           MOVE.B  (A4),D0
0000AF5A  0C00 0001               7622           CMPI.B  #$01,D0
0000AF5E  6604                    7623           BNE.S   IMOVE19        NOT BYTE SIZE
0000AF60                          7624  
0000AF60  3E3C 01FD               7625           MOVE.W  #$1FD,D7       DATA ALTERABLE
0000AF64                          7626  IMOVE19
0000AF64                          7627  
0000AF64  6100 00BE               7628           BSR     EEA
0000AF68  602C                    7629           BRA.S   CS19           COMMON
0000AF6A                          7630  
0000AF6A                          7631  *  IF BYTE; ADDRESS REGISTER DIRECT NOT ALLOWED
0000AF6A                          7632  IQUICKA  DS      0              ADDQ  SUBQ
0000AF6A  612E                    7633           BSR.S   FORMSIZE
0000AF6C                          7634  
0000AF6C  1CFC 0023               7635           MOVE.B  #'#',(A6)+
0000AF70  EF5C                    7636           ROL.W   #7,D4
0000AF72  0204 0007               7637           ANDI.B  #7,D4
0000AF76  6604                    7638           BNE.S   IQUICK21
0000AF78  0004 0008               7639           ORI.B   #8,D4          MAKE ZERO INTO EIGHT
0000AF7C  0004 0030               7640  IQUICK21 ORI.B   #'0',D4        MAKE ASCII
0000AF80  1CC4                    7641           MOVE.B  D4,(A6)+
0000AF82                          7642  
0000AF82  1CC5                    7643           MOVE.B  D5,(A6)+       COMMA SEPARATOR
0000AF84                          7644  
0000AF84  3814                    7645           MOVE.W  (A4),D4
0000AF86                          7646  
0000AF86  3014                    7647           MOVE.W  (A4),D0
0000AF88  0240 00C0               7648           ANDI.W  #$00C0,D0
0000AF8C  6704                    7649           BEQ.S   IQUICK31       DATA ALTERABLE
0000AF8E  3E3C 01FF               7650           MOVE.W  #$1FF,D7       ALTERABLE ADDRESSING
0000AF92  6100 0090               7651  IQUICK31 BSR     EEA
0000AF96  6000 037C               7652  CS19     BRA     COMMON
0000AF9A                          7653  
0000AF9A                          7654  *  BIT   5432109876543210
0000AF9A                          7655  *        ........00......       BYTE
0000AF9A                          7656  *        ........01......       WORD
0000AF9A                          7657  *        ........10......       LONG
0000AF9A                          7658  *        ........11......       ERROR
0000AF9A                          7659  *
0000AF9A                          7660  FORMSIZE DS      0
0000AF9A  3414                    7661           MOVE.W  (A4),D2
0000AF9C  1AFC 002E               7662           MOVE.B  #'.',(A5)+     STORE PERIOD
0000AFA0  EC4A                    7663           LSR.W   #6,D2
0000AFA2  0242 0003               7664           ANDI.W  #$03,D2
0000AFA6  6606                    7665           BNE.S   FORM91
0000AFA8  1AFC 0042               7666           MOVE.B  #'B',(A5)+     STORE "B"
0000AFAC  6016                    7667           BRA.S   FORM95
0000AFAE                          7668  
0000AFAE  103C 0057               7669  FORM91   MOVE.B  #'W',D0
0000AFB2  0C02 0001               7670           CMPI.B  #1,D2
0000AFB6  670A                    7671           BEQ.S   FORM93
0000AFB8  103C 004C               7672           MOVE.B  #'L',D0
0000AFBC  0C02 0002               7673           CMPI.B  #2,D2
0000AFC0  665E                    7674           BNE.S   FE10           FERROR
0000AFC2  1AC0                    7675  FORM93   MOVE.B  D0,(A5)+       STORE "W" OR "L"
0000AFC4  4E75                    7676  FORM95   RTS
0000AFC6                          7677  
0000AFC6  6100 FC46               7678  EA000    BSR     FORMREGD
0000AFCA  0807 0000               7679           BTST    #0,D7
0000AFCE  6750                    7680           BEQ.S   FE10           FERROR
0000AFD0  4E75                    7681           RTS
0000AFD2                          7682  
0000AFD2  6100 FC2A               7683  EA001    BSR     FORMREGA
0000AFD6  0807 0001               7684           BTST    #1,D7
0000AFDA  6744                    7685           BEQ.S   FE10           FERROR  THIS MODE NOT ALLOWED
0000AFDC  4E75                    7686           RTS
0000AFDE                          7687  
0000AFDE  1CFC 0028               7688  EA010    MOVE.B  #'(',(A6)+
0000AFE2  6100 FC1A               7689           BSR     FORMREGA
0000AFE6  1CFC 0029               7690           MOVE.B  #')',(A6)+
0000AFEA  0807 0002               7691           BTST    #2,D7
0000AFEE  6730                    7692           BEQ.S   FE10           FERROR  THIS MODE NOT ALLOWED
0000AFF0  4E75                    7693           RTS
0000AFF2                          7694  
0000AFF2  1CFC 0028               7695  EA011    MOVE.B  #'(',(A6)+
0000AFF6  6100 FC06               7696           BSR     FORMREGA
0000AFFA  1CFC 0029               7697           MOVE.B  #')',(A6)+
0000AFFE  1CFC 002B               7698           MOVE.B  #'+',(A6)+
0000B002  0807 0003               7699           BTST    #3,D7
0000B006  6718                    7700           BEQ.S   FE10           FERROR  THIS MODE NOT ALLOWED
0000B008  4E75                    7701  EA011RTS RTS
0000B00A                          7702  
0000B00A  1CFC 002D               7703  EA100    MOVE.B  #'-',(A6)+
0000B00E  1CFC 0028               7704           MOVE.B  #'(',(A6)+
0000B012  6100 FBEA               7705           BSR     FORMREGA
0000B016  1CFC 0029               7706           MOVE.B  #')',(A6)+
0000B01A  0807 0004               7707           BTST    #4,D7
0000B01E  66E8                    7708           BNE     EA011RTS
0000B020  6000 031A               7709  FE10     BRA     FERROR         THIS MODE NOT ALLOWED
0000B024                          7710  
0000B024                          7711  *  ENTER       A4 = POINTER TO FIRST WORD
0000B024                          7712  *              D3 = OFFSET TO EXTENSION
0000B024                          7713  *              D4 = VALUE TO PROCESS
0000B024                          7714  *              D7 = MODES ALLOWED MASK
0000B024                          7715  *
0000B024                          7716  EEA      DS      0
0000B024  2004                    7717           MOVE.L  D4,D0
0000B026  E648                    7718           LSR.W   #3,D0
0000B028  0240 0007               7719           ANDI.W  #$7,D0
0000B02C  6798                    7720           BEQ     EA000
0000B02E                          7721  
0000B02E  0C00 0001               7722           CMPI.B  #1,D0
0000B032  679E                    7723           BEQ     EA001
0000B034                          7724  
0000B034  0C00 0002               7725           CMPI.B  #2,D0
0000B038  67A4                    7726           BEQ     EA010
0000B03A                          7727  
0000B03A  0C00 0003               7728           CMPI.B  #3,D0
0000B03E  67B2                    7729           BEQ     EA011
0000B040                          7730  
0000B040  0C00 0004               7731           CMPI.B  #4,D0
0000B044  67C4                    7732           BEQ     EA100
0000B046                          7733  
0000B046  0C00 0005               7734           CMPI.B  #5,D0
0000B04A  6760                    7735           BEQ.S   EA101
0000B04C                          7736  
0000B04C  0C00 0007               7737           CMPI.B  #7,D0
0000B050  6770                    7738           BEQ.S   EA111
0000B052                          7739  
0000B052                          7740  *    EXTENSION WORD
0000B052                          7741  *   BIT  5432109876543210
0000B052                          7742  *        0...............    DATA REGISTER
0000B052                          7743  *        1...............    ADDRESS REGISTER
0000B052                          7744  *        .RRR............    REGISTER
0000B052                          7745  *        ....0...........    SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REG
0000B052                          7746  *        ....1...........    LONG VALUE IN INDEX REGISTER
0000B052                          7747  *        .....000........
0000B052                          7748  *        ........DDDDDDDD    DISPLACEMENT INTEGER
0000B052                          7749  *
0000B052                          7750  * EA110            ADDRESS REGISTER INDIRECT WITH INDEX
0000B052                          7751  
0000B052  0807 0006               7752           BTST    #6,D7
0000B056  67C8                    7753           BEQ     FE10           FERROR  THIS MODE NOT ALLOWED
0000B058                          7754  
0000B058  3234 3000               7755           MOVE.W  (A4,D3),D1
0000B05C  0241 0700               7756           ANDI.W  #$0700,D1
0000B060  66BE                    7757           BNE     FE10           FERROR  BITS 10-8 MUST BE ZERO
0000B062                          7758  
0000B062  3034 3000               7759           MOVE.W  (A4,D3),D0     D0 = DISPLACEMENT
0000B066  4880                    7760           EXT.W   D0
0000B068  48C0                    7761           EXT.L   D0
0000B06A  6100 DE62               7762           BSR     HEX2DEC        DECIMAL
0000B06E  1CFC 0028               7763           MOVE.B  #'(',(A6)+     (
0000B072                          7764  
0000B072  6100 FB8A               7765           BSR     FORMREGA       XX(A@
0000B076                          7766  
0000B076  1CFC 002C               7767           MOVE.B  #',',(A6)+     XX(A@,
0000B07A                          7768  
0000B07A  1834 3000               7769           MOVE.B  (A4,D3),D4
0000B07E  E804                    7770           ASR.B   #4,D4
0000B080  6A06                    7771           BPL.S   EA1105
0000B082  6100 FB7A               7772           BSR     FORMREGA
0000B086  6004                    7773           BRA.S   EA1107
0000B088                          7774  
0000B088  6100 FB84               7775  EA1105   BSR     FORMREGD
0000B08C  1CFC 002E               7776  EA1107   MOVE.B  #'.',(A6)+     XX(A@,X@.
0000B090                          7777  
0000B090  3834 3000               7778           MOVE.W  (A4,D3),D4     D4 = R@
0000B094  103C 0057               7779           MOVE.B  #'W',D0        ..........W
0000B098  0804 000B               7780           BTST    #11,D4
0000B09C  6704                    7781           BEQ.S   EA1109
0000B09E  103C 004C               7782           MOVE.B  #'L',D0        ..........L
0000B0A2  1CC0                    7783  EA1109   MOVE.B  D0,(A6)+
0000B0A4  1CFC 0029               7784           MOVE.B  #')',(A6)+     ...........)
0000B0A8  5483                    7785           ADDQ.L  #2,D3
0000B0AA  4E75                    7786           RTS
0000B0AC                          7787  
0000B0AC                          7788  * ADDRESS REGISTER INDIRECT WITH DISPLACEMENT
0000B0AC                          7789  *
0000B0AC  0807 0005               7790  EA101    BTST    #5,D7          101000;   DIS(A@)
0000B0B0  6756                    7791           BEQ.S   FE11           FERROR;  THIS MODE NOT ALLOWED
0000B0B2                          7792  
0000B0B2  3034 3000               7793           MOVE.W  (A4,D3),D0
0000B0B6  48C0                    7794           EXT.L   D0
0000B0B8  6100 DE14               7795           BSR     HEX2DEC        DECIMAL
0000B0BC  5483                    7796           ADDQ.L  #2,D3          SIZE
0000B0BE  6000 FF1E               7797           BRA     EA010
0000B0C2                          7798  
0000B0C2                          7799  *  111000        ABSOLUTE SHORT
0000B0C2                          7800  *  111001        ABSOLUTE LONG
0000B0C2                          7801  *  111010        PROGRAM COUNTER WITH DISPLACEMENT
0000B0C2                          7802  *  111011        PROGRAM COUNTER WITH INDEX
0000B0C2                          7803  *  111100        IMMEDIATE OR STATUS REG
0000B0C2                          7804  *
0000B0C2                          7805  EA111
0000B0C2  0244 0007               7806           ANDI.W  #7,D4
0000B0C6  6618                    7807           BNE.S   EA1112
0000B0C8                          7808  
0000B0C8  0807 0007               7809           BTST    #7,D7
0000B0CC  673A                    7810           BEQ.S   FE11           FERROR;  THIS MODE NOT ALLOWED
0000B0CE                          7811  
0000B0CE  3034 3000               7812           MOVE.W  (A4,D3),D0     111000;   ABSOLUTE SHORT
0000B0D2  48C0                    7813           EXT.L   D0
0000B0D4  1CFC 0024               7814           MOVE.B  #'$',(A6)+
0000B0D8  6100 E4FA               7815           BSR     PNT8HX         SIGN EXTENDED VALUE
0000B0DC  5483                    7816           ADDQ.L  #2,D3          SIZE + 2
0000B0DE  4E75                    7817           RTS
0000B0E0                          7818  
0000B0E0  0C04 0001               7819  EA1112   CMPI.B  #1,D4
0000B0E4  6616                    7820           BNE.S   EA1113
0000B0E6                          7821  
0000B0E6  0807 0008               7822           BTST    #8,D7
0000B0EA  671C                    7823           BEQ.S   FE11           FERROR;  THIS MODE NOT ALLOWED
0000B0EC                          7824  
0000B0EC  1CFC 0024               7825           MOVE.B  #'$',(A6)+     HEX
0000B0F0  2034 3000               7826           MOVE.L  (A4,D3),D0     111001;     ABSOLUTE LONG
0000B0F4  6100 E4DE               7827           BSR     PNT8HX
0000B0F8                          7828  *-       MOVE.B  #'.',(A6)+     FORCE LONG FORMAT
0000B0F8                          7829  *-       MOVE.B  #'L',(A6)+     IE   .L
0000B0F8  5883                    7830           ADDQ.L  #4,D3
0000B0FA  4E75                    7831           RTS
0000B0FC                          7832  
0000B0FC  0C04 0002               7833  EA1113   CMPI.B  #2,D4
0000B100  662C                    7834           BNE.S   EA1114
0000B102                          7835  
0000B102  0807 0009               7836           BTST    #9,D7
0000B106  6604                    7837           BNE.S   EA1113A
0000B108  6000 0232               7838  FE11     BRA     FERROR         THIS MODE NOT ALLOWED
0000B10C                          7839  EA1113A
0000B10C                          7840  
0000B10C  3034 3000               7841           MOVE.W  (A4,D3),D0     111010;  PC + DISPLACEMENT  DESTINATION(PC)
0000B110  48C0                    7842           EXT.L   D0
0000B112  D0A9 FFFC               7843           ADD.L   HISPC(A1),D0
0000B116  5480                    7844           ADDQ.L  #2,D0
0000B118  1CFC 0024               7845           MOVE.B  #'$',(A6)+     HEX "$"
0000B11C  6100 E4B6               7846           BSR     PNT8HX         DESTINATION
0000B120  203C 29435028           7847           MOVE.L  #')CP(',D0     (PC)
0000B126  6100 FC3E               7848           BSR     SCHR           STORE WORD
0000B12A  5483                    7849           ADDQ.L  #2,D3          SIZE
0000B12C  4E75                    7850           RTS
0000B12E                          7851  
0000B12E  0C04 0003               7852  EA1114   CMPI.B  #3,D4
0000B132  6664                    7853           BNE.S   EA1115
0000B134                          7854  
0000B134                          7855  * PROGRAM COUNTER WITH INDEX    DESTINATION(PC,R@.X)
0000B134                          7856  *
0000B134                          7857  *        5432109876543210       SECOND WORD
0000B134                          7858  *        0...............       DATA REGISTER
0000B134                          7859  *        1...............       ADDRESS REGISTER
0000B134                          7860  *        .XXX............       REGISTER
0000B134                          7861  *        ....0...........       SIGN-EXTENDED, LOW ORDER WORD INTEGER
0000B134                          7862  *                               ..IN INDEX REGISTER
0000B134                          7863  *        ....1...........       LONG VALUE IN INDEX REGISTER
0000B134                          7864  *        .....000........
0000B134                          7865  *        ........XXXXXXXX       DISPLACEMENT INTEGER
0000B134                          7866  *
0000B134  0807 000A               7867           BTST    #10,D7
0000B138  67CE                    7868           BEQ     FE11           FERROR  THIS MODE NOT ASLLOWED
0000B13A                          7869  
0000B13A  3234 3000               7870           MOVE.W  (A4,D3),D1
0000B13E  0241 0700               7871           ANDI.W  #$0700,D1
0000B142  66C4                    7872           BNE     FE11           FERROR;  BITS 10-8 MUST BE ZERO
0000B144                          7873  
0000B144  1034 3001               7874           MOVE.B  1(A4,D3),D0    111100;   DESTINATION(PC,R@.X)
0000B148  4880                    7875           EXT.W   D0
0000B14A  48C0                    7876           EXT.L   D0
0000B14C  D0A9 FFFC               7877           ADD.L   HISPC(A1),D0
0000B150  5480                    7878           ADDQ.L  #2,D0
0000B152  1CFC 0024               7879           MOVE.B  #'$',(A6)+     HEX "$"
0000B156  6100 E47C               7880           BSR     PNT8HX         DESTINATION
0000B15A                          7881  
0000B15A  203C 2C435028           7882           MOVE.L  #',CP(',D0
0000B160  6100 FC04               7883           BSR     SCHR           DES(PC,
0000B164                          7884  
0000B164  3834 3000               7885           MOVE.W  (A4,D3),D4
0000B168  E95C                    7886           ROL.W   #4,D4
0000B16A  0804 0003               7887           BTST    #3,D4
0000B16E  6706                    7888           BEQ.S   EAF25
0000B170  6100 FA8C               7889           BSR     FORMREGA
0000B174  6004                    7890           BRA.S   EAF27
0000B176  6100 FA96               7891  EAF25    BSR     FORMREGD       DES(PC,R@
0000B17A                          7892  EAF27
0000B17A                          7893  
0000B17A  1CFC 002E               7894           MOVE.B  #'.',(A6)+     DES(PC,R@.
0000B17E                          7895  
0000B17E  3834 3000               7896           MOVE.W  (A4,D3),D4
0000B182  303C 4C57               7897           MOVE.W  #'LW',D0
0000B186  0804 000B               7898           BTST    #11,D4
0000B18A  6702                    7899           BEQ.S   EAF35
0000B18C  E048                    7900           LSR.W   #8,D0
0000B18E  1CC0                    7901  EAF35    MOVE.B  D0,(A6)+       DES(PC,R@.X
0000B190                          7902  
0000B190  1CFC 0029               7903           MOVE.B  #')',(A6)+     DES(PC,R@.X)
0000B194  5483                    7904           ADDQ.L  #2,D3
0000B196  4E75                    7905           RTS
0000B198                          7906  
0000B198                          7907  *   BIT  5432109876543210
0000B198                          7908  *        ..........111100       FIRST WORD;  #<IMMEDIATE>
0000B198                          7909  *
0000B198  0C04 0004               7910  EA1115   CMPI.B  #4,D4
0000B19C  6600 FF6A               7911           BNE     FE11           FERROR
0000B1A0                          7912  
0000B1A0  0807 000B               7913           BTST    #11,D7
0000B1A4  6700 FF62               7914           BEQ     FE11           FERROR;  THIS MODE NOT ALLOWED
0000B1A8                          7915  
0000B1A8  1CFC 0023               7916           MOVE.B  #'#',(A6)+     IMMEDIATE
0000B1AC                          7917  
0000B1AC  122D FFFF               7918           MOVE.B  -1(A5),D1
0000B1B0  0C01 004C               7919           CMPI.B  #'L',D1
0000B1B4  6724                    7920           BEQ.S   EA11155        LONG
0000B1B6                          7921  
0000B1B6  3034 3000               7922           MOVE.W  (A4,D3),D0
0000B1BA                          7923  
0000B1BA  0C01 0042               7924           CMPI.B  #'B',D1
0000B1BE  6610                    7925           BNE.S   EA11153        .WORD
0000B1C0                          7926  
0000B1C0                          7927  * BYTE SIZE; DATA ALLOWED
0000B1C0                          7928  *  0000 0000 XXXX XXXX
0000B1C0                          7929  *  1111 1111 1XXX XXXX
0000B1C0  2200                    7930           MOVE.L  D0,D1
0000B1C2  E049                    7931           LSR.W   #8,D1
0000B1C4  670A                    7932           BEQ.S   EA11153
0000B1C6  2200                    7933           MOVE.L  D0,D1
0000B1C8  EE41                    7934           ASR.W   #7,D1
0000B1CA  5241                    7935           ADDQ.W  #1,D1
0000B1CC  6600 FF3A               7936           BNE     FE11           FERROR
0000B1D0                          7937  
0000B1D0  48C0                    7938  EA11153  EXT.L   D0
0000B1D2  6100 DCFA               7939           BSR     HEX2DEC
0000B1D6  5483                    7940           ADDQ.L  #2,D3
0000B1D8  4E75                    7941           RTS
0000B1DA                          7942  
0000B1DA  2034 3000               7943  EA11155  MOVE.L  (A4,D3),D0
0000B1DE  6100 DCEE               7944           BSR     HEX2DEC
0000B1E2  5883                    7945           ADDQ.L  #4,D3          SIZE
0000B1E4  4E75                    7946           RTS
0000B1E6                          7947  
0000B1E6  1AFC 002E               7948  MOVEMS   MOVE.B  #'.',(A5)+     PERIOD
0000B1EA  303C 4C57               7949           MOVE.W  #'LW',D0
0000B1EE  0804 0006               7950           BTST    #6,D4
0000B1F2  6702                    7951           BEQ.S   MOVEMS2
0000B1F4  E048                    7952           LSR.W   #8,D0
0000B1F6  1AC0                    7953  MOVEMS2  MOVE.B  D0,(A5)+       SIZE
0000B1F8  4E75                    7954           RTS
0000B1FA                          7955  
0000B1FA                          7956  * MOVEM - REGISTER EXPANSION
0000B1FA                          7957  *
0000B1FA                          7958  MOVEMR   DS      0
0000B1FA  342C 0002               7959           MOVE.W  2(A4),D2       D2 = SECOND WORD
0000B1FE  7020                    7960           MOVEQ   #$20,D0        D0 = SPACE
0000B200  7E2F                    7961           MOVEQ   #$2F,D7        D7 = /
0000B202  538E                    7962           SUBQ.L  #1,A6          ADJUST STORE POINTER
0000B204  7A30                    7963           MOVEQ   #$30,D5        D5 = REGISTER #
0000B206  383C 4144               7964           MOVE.W  #'AD',D4       D4 = REG CLASS
0000B20A                          7965  
0000B20A  0302                    7966  MOVEMR11 BTST    D1,D2
0000B20C  6730                    7967           BEQ.S   MOVEMR77       BIT RESET
0000B20E                          7968  
0000B20E  B016                    7969           CMP.B   (A6),D0        BIT SET
0000B210  6612                    7970           BNE.S   MOVEMR44       NOT SPACE
0000B212                          7971  
0000B212  1D44 0001               7972  MOVEMR33 MOVE.B  D4,1(A6)       REG TYPE
0000B216  1D45 0002               7973           MOVE.B  D5,2(A6)       REG #
0000B21A  1D7C 002D 0003          7974           MOVE.B  #'-',3(A6)     -
0000B220  568E                    7975           ADDQ.L  #3,A6
0000B222  602E                    7976           BRA.S   MOVEMR88
0000B224                          7977  
0000B224  0C16 002C               7978  MOVEMR44 CMPI.B  #',',(A6)
0000B228  67E8                    7979           BEQ     MOVEMR33       COMMA SEPARATOR
0000B22A                          7980  
0000B22A  BE16                    7981           CMP.B   (A6),D7        / SEPARATOR
0000B22C  67E4                    7982           BEQ     MOVEMR33
0000B22E                          7983  
0000B22E  1D44 0001               7984           MOVE.B  D4,1(A6)       REG TYPE
0000B232  1D45 0002               7985           MOVE.B  D5,2(A6)       REG #
0000B236  1D7C 002D 0003          7986           MOVE.B  #'-',3(A6)     - SEPARATOR
0000B23C  6014                    7987           BRA.S   MOVEMR88
0000B23E                          7988  
0000B23E  0C16 002C               7989  MOVEMR77 CMPI.B  #',',(A6)
0000B242  670E                    7990           BEQ.S   MOVEMR88       COMMA
0000B244                          7991  
0000B244  B016                    7992           CMP.B   (A6),D0
0000B246  670A                    7993           BEQ.S   MOVEMR88       SPACE
0000B248  B02E 0001               7994           CMP.B   1(A6),D0
0000B24C  6702                    7995           BEQ.S   MOVEMR79       SPACE
0000B24E  568E                    7996           ADDQ.L  #3,A6
0000B250  1C87                    7997  MOVEMR79 MOVE.B  D7,(A6)        / SEPARATOR
0000B252                          7998  
0000B252  5285                    7999  MOVEMR88 ADDQ.L  #1,D5
0000B254  D286                    8000           ADD.L   D6,D1          D1 = BIT POSITION
0000B256  0C05 0038               8001           CMPI.B  #'8',D5
0000B25A  66AE                    8002           BNE     MOVEMR11
0000B25C                          8003  
0000B25C  B016                    8004           CMP.B   (A6),D0        SPACE
0000B25E  670A                    8005           BEQ.S   MOVEMR94
0000B260                          8006  
0000B260  B02E 0001               8007           CMP.B   1(A6),D0       SPACE
0000B264  6704                    8008           BEQ.S   MOVEMR94
0000B266  568E                    8009           ADDQ.L  #3,A6
0000B268  1C87                    8010           MOVE.B  D7,(A6)        /   SEPARATOR
0000B26A                          8011  
0000B26A  1A3C 0030               8012  MOVEMR94 MOVE.B  #'0',D5        RESET REG TO ZERO
0000B26E  E04C                    8013           LSR.W   #8,D4          CHANGE REG TYPE
0000B270  6698                    8014           BNE     MOVEMR11       MORE
0000B272                          8015  
0000B272  1C80                    8016           MOVE.B  D0,(A6)        SPACE
0000B274  4E75                    8017           RTS
0000B276                          8018  
0000B276                          8019  DCODE68K DS      0
0000B276  4E51 FFF0               8020           LINK    A1,#-LOCVARSZ       CREATE A FRAME FOR THE
0000B27A  48E9 1007 FFF0          8021           MOVEM.L D0-D2/A4,DDATA(A1)  CODE AND ITS PC.  A4
0000B280  49E9 FFF0               8022           LEA     DDATA(A1),A4        POINTS TO THE CODE.
0000B284                          8023  
0000B284  264D                    8024           MOVE.L  A5,A3          A3 = START OF OUTPUT BUFFER
0000B286  7050                    8025           MOVEQ   #BUFSIZE,D0
0000B288  2C4B                    8026           MOVE.L  A3,A6
0000B28A  1CFC 0020               8027  DEC311   MOVE.B  #BLANK,(A6)+   SPACE FILL BUFFER
0000B28E  5380                    8028           SUBQ.L  #1,D0
0000B290  66F8                    8029           BNE     DEC311
0000B292                          8030  
0000B292  2C4B                    8031           MOVE.L  A3,A6          FORMAT ADDRESS
0000B294  2029 FFFC               8032           MOVE.L  HISPC(A1),D0
0000B298  6100 E36C               8033           BSR     FRELADDR
0000B29C                          8034  
0000B29C                          8035  * CHECK FOR KNOWN ILLEGAL CODES
0000B29C  3014                    8036           MOVE.W  (A4),D0
0000B29E                          8037  
0000B29E  4BFA 00C6               8038           LEA     KI(PC),A5
0000B2A2  2C4D                    8039           MOVE.L  A5,A6
0000B2A4  DDFC 00000002           8040           ADD.L   #KIEND-KI,A6
0000B2AA  B05D                    8041  DEC404   CMP.W   (A5)+,D0
0000B2AC  671A                    8042           BEQ.S   FE12           FERROR;  ILLEGAL CODE
0000B2AE  BBCE                    8043           CMP.L   A6,A5
0000B2B0  66F8                    8044           BNE     DEC404
0000B2B2                          8045  
0000B2B2                          8046  * LOOK FOR MATCH OF OP-CODE
0000B2B2                          8047  *
0000B2B2  4BFA 00B4               8048           LEA     TBL(PC),A5     A5 = POINTER TO DECODE TABLE
0000B2B6  4DFA 02BA               8049           LEA     TBLE(PC),A6    A6 = POINTER TO END OF TABLE
0000B2BA  3014                    8050  DEC411   MOVE.W  (A4),D0        FIRST WORD
0000B2BC  C05D                    8051           AND.W   (A5)+,D0       MASK
0000B2BE  B05D                    8052           CMP.W   (A5)+,D0
0000B2C0  6708                    8053           BEQ.S   DEC425         FOUND MATCH
0000B2C2  548D                    8054           ADDQ.L  #2,A5          UPDATE POINTER
0000B2C4  BBCE                    8055           CMP.L   A6,A5
0000B2C6  66F2                    8056           BNE     DEC411         MORE TABLE
0000B2C8  6072                    8057  FE12     BRA.S   FERROR         ILLEGAL INSTRUCTION
0000B2CA                          8058  
0000B2CA  4286                    8059  DEC425   CLR.L   D6
0000B2CC  1C1D                    8060           MOVE.B  (A5)+,D6       D6 = (GOTO OFFSET)/4
0000B2CE  E58E                    8061           LSL.L   #2,D6
0000B2D0                          8062  
0000B2D0  4287                    8063           CLR.L   D7
0000B2D2  1E1D                    8064           MOVE.B  (A5)+,D7       D7 = INDEX TO OP-CODE
0000B2D4                          8065  
0000B2D4                          8066  * MOVE OP-CODE TO BUFFER
0000B2D4                          8067  *
0000B2D4  41FA 029C               8068           LEA     OPCTBL(PC),A0
0000B2D8  4A47                    8069  DEC510   TST     D7
0000B2DA  6708                    8070           BEQ.S   DEC530         AT INDEX
0000B2DC  4A18                    8071  DEC515   TST.B   (A0)+
0000B2DE  6AFC                    8072           BPL     DEC515         MOVE THROUGH FIELD
0000B2E0  5387                    8073           SUBQ.L  #1,D7
0000B2E2  60F4                    8074           BRA     DEC510
0000B2E4                          8075  
0000B2E4  701F                    8076  DEC530   MOVEQ   #FOC,D0
0000B2E6  4BF3 0000               8077           LEA.L   (A3,D0),A5     A5 = STORE POINTER  OP-CODE
0000B2EA  1018                    8078  DEC535   MOVE.B  (A0)+,D0
0000B2EC  0880 0007               8079           BCLR    #7,D0
0000B2F0  6604                    8080           BNE.S   DEC537         END OF MOVE
0000B2F2  1AC0                    8081           MOVE.B  D0,(A5)+
0000B2F4  60F4                    8082           BRA     DEC535
0000B2F6  1AC0                    8083  DEC537   MOVE.B  D0,(A5)+
0000B2F8                          8084  
0000B2F8                          8085  * CALCULATE GOTO AND GO
0000B2F8                          8086  *
0000B2F8  7602                    8087           MOVEQ   #2,D3          D3= SIZE
0000B2FA  41FA F7CA               8088           LEA     X(PC),A0
0000B2FE  D1C6                    8089           ADD.L   D6,A0
0000B300                          8090  
0000B300  7027                    8091           MOVEQ   #FOP,D0
0000B302  4DF3 0000               8092           LEA.L   (A3,D0),A6     A6 = POINTER FOR OPERAND
0000B306                          8093  
0000B306  3814                    8094           MOVE.W  (A4),D4        D4 = FIRST WORD
0000B308                          8095  
0000B308  1A3C 002C               8096           MOVE.B  #',',D5        D5 = CONTAINS ASCII COMMA
0000B30C                          8097  
0000B30C  3E3C 01FD               8098           MOVE.W  #$1FD,D7       D7 = DATA ALTERABLE MODES ALLOWED
0000B310                          8099  
0000B310  4ED0                    8100           JMP     (A0)
0000B312                          8101  *
0000B312                          8102  *  A4 = POINTER TO DATA IN FRAME CREATED BY 'LINK A1,...'
0000B312                          8103  *  A5 = POINTER STORE OP-CODE
0000B312                          8104  *  A6 = POINTER STORE OPERAND
0000B312                          8105  *  D3 = SIZE = 2 BYTES
0000B312                          8106  *  D4 = FIRST WORD
0000B312                          8107  *  D7 = ADDRESS MODES ALLOWED ($1FD) DATA ALTERABLE
0000B312                          8108  
0000B312  5483                    8109  COMMON4  ADDQ.L  #2,D3          SIZE = 4
0000B314                          8110  
0000B314  2C03                    8111  COMMON   MOVE.L  D3,D6          D6 = SIZE
0000B316  1CFC 0020               8112           MOVE.B  #BLANK,(A6)+   SPACE AS LAST CHAR
0000B31A                          8113  
0000B31A  2A4E                    8114           MOVE.L  A6,A5          SAVE END OF BUFFER POINTER
0000B31C  700A                    8115           MOVEQ   #FDATA,D0
0000B31E  4DF3 0000               8116           LEA.L   (A3,D0),A6
0000B322                          8117  
0000B322  301C                    8118  COMMON35 MOVE.W  (A4)+,D0       GET NEXT WORD OF DATA.
0000B324  54A9 FFFC               8119           ADDQ.L  #2,HISPC(A1)   ADJUST PROG COUNTER.
0000B328  6100 E2B8               8120           BSR     PNT4HX         FORMAT DATA. (A6)+
0000B32C  5503                    8121           SUBQ.B  #2,D3
0000B32E  66F2                    8122           BNE     COMMON35
0000B330                          8123  
0000B330  2C4D                    8124           MOVE.L  A5,A6          A6 = RESTORE END POINTER
0000B332                          8125  
0000B332  2A4B                    8126           MOVE.L  A3,A5          A5 =  BEGINNING OF BUFFER
0000B334                          8127  
0000B334  2869 FFFC               8128           MOVE.L  HISPC(A1),A4   MOVE THE UPDATED PC
0000B338  4E59                    8129           UNLK    A1               TO A4 AND UNDO FRAME.
0000B33A                          8130  
0000B33A  4E75                    8131           RTS
0000B33C                          8132  
0000B33C                          8133  
0000B33C                          8134  FERROR   DS      0
0000B33C                          8135  * ILLEGAL INSTRUCTION
0000B33C                          8136  *
0000B33C  701F                    8137           MOVEQ   #FOC,D0
0000B33E  4DF3 0000               8138           LEA.L   (A3,D0),A6
0000B342  4BFA 0018               8139           LEA     MSG111(PC),A5
0000B346  101D                    8140  FERROR35 MOVE.B  (A5)+,D0
0000B348  0C00 0004               8141           CMPI.B  #EOT,D0
0000B34C  6704                    8142           BEQ.S   FERROR39
0000B34E  1CC0                    8143           MOVE.B  D0,(A6)+
0000B350  60F4                    8144           BRA     FERROR35
0000B352                          8145  FERROR39 DS      0
0000B352                          8146  
0000B352  3014                    8147           MOVE.W  (A4),D0
0000B354  6100 E28C               8148           BSR     PNT4HX
0000B358                          8149  
0000B358  7602                    8150           MOVEQ   #2,D3          SIZE
0000B35A                          8151  
0000B35A  60B8                    8152           BRA     COMMON
0000B35C                          8153  
0000B35C= 44 43 2E 57 20 20 20    8154  MSG111   DC.B    'DC.W    $',EOT
          20 24 04              
0000B366                          8156  
0000B366                          8157  
0000B366                          8158  
0000B366= 4AFB                    8159  KI       DC.W    $4AFB          KNOWN ILLEGAL CODES
0000B368                          8160  KIEND    DS      0
0000B368                          8161  
0000B368                          8162  
0000B368                          8163  *  \1   MASK
0000B368                          8164  *  \2   OP-CODE PATTERN
0000B368                          8165  *  \3   GOTO OFFSET
0000B368                          8166  *  \4   INDEX TO OP-CODE
0000B368                          8167  C68      MACRO
0000B368                          8168           DC.W    $\1
0000B368                          8169           DC.W    $\2
0000B368                          8170           DC.B    (\3-X)>>2
0000B368                          8171           DC.B    \4
0000B368                          8172           ENDM
0000B368                          8173  
0000B368                          8174  TBL      DS      0
0000B368                          8175m          C68     FEC0,E6C0,ISHIFT,56           RO
0000B368= FEC0                    8176m          DC.W    $FEC0
0000B36A= E6C0                    8177m          DC.W    $E6C0
0000B36C= F7                      8178m          DC.B    (ISHIFT-X)>>2
0000B36D= 38                      8179m          DC.B    56
0000B36E                          8180m          ENDM
0000B36E                          8181m          C68     FEC0,E4C0,ISHIFT,57           ROX
0000B36E= FEC0                    8182m          DC.W    $FEC0
0000B370= E4C0                    8183m          DC.W    $E4C0
0000B372= F7                      8184m          DC.B    (ISHIFT-X)>>2
0000B373= 39                      8185m          DC.B    57
0000B374                          8186m          ENDM
0000B374                          8187m          C68     FEC0,E2C0,ISHIFT,55           LS
0000B374= FEC0                    8188m          DC.W    $FEC0
0000B376= E2C0                    8189m          DC.W    $E2C0
0000B378= F7                      8190m          DC.B    (ISHIFT-X)>>2
0000B379= 37                      8191m          DC.B    55
0000B37A                          8192m          ENDM
0000B37A                          8193m          C68     FEC0,E0C0,ISHIFT,54           AS
0000B37A= FEC0                    8194m          DC.W    $FEC0
0000B37C= E0C0                    8195m          DC.W    $E0C0
0000B37E= F7                      8196m          DC.B    (ISHIFT-X)>>2
0000B37F= 36                      8197m          DC.B    54
0000B380                          8198m          ENDM
0000B380                          8199m          C68     F018,E018,ISHIFT,56           RO
0000B380= F018                    8200m          DC.W    $F018
0000B382= E018                    8201m          DC.W    $E018
0000B384= F7                      8202m          DC.B    (ISHIFT-X)>>2
0000B385= 38                      8203m          DC.B    56
0000B386                          8204m          ENDM
0000B386                          8205m          C68     F018,E010,ISHIFT,57           ROX
0000B386= F018                    8206m          DC.W    $F018
0000B388= E010                    8207m          DC.W    $E010
0000B38A= F7                      8208m          DC.B    (ISHIFT-X)>>2
0000B38B= 39                      8209m          DC.B    57
0000B38C                          8210m          ENDM
0000B38C                          8211m          C68     F018,E008,ISHIFT,55           LS
0000B38C= F018                    8212m          DC.W    $F018
0000B38E= E008                    8213m          DC.W    $E008
0000B390= F7                      8214m          DC.B    (ISHIFT-X)>>2
0000B391= 37                      8215m          DC.B    55
0000B392                          8216m          ENDM
0000B392                          8217m          C68     F018,E000,ISHIFT,54           AS
0000B392= F018                    8218m          DC.W    $F018
0000B394= E000                    8219m          DC.W    $E000
0000B396= F7                      8220m          DC.B    (ISHIFT-X)>>2
0000B397= 36                      8221m          DC.B    54
0000B398                          8222m          ENDM
0000B398                          8223m          C68     F0C0,D0C0,FORM10EX,4          ADD       <EA>,A@
0000B398= F0C0                    8224m          DC.W    $F0C0
0000B39A= D0C0                    8225m          DC.W    $D0C0
0000B39C= 5E                      8226m          DC.B    (FORM10EX-X)>>2
0000B39D= 04                      8227m          DC.B    4
0000B39E                          8228m          ENDM
0000B39E                          8229m          C68     F130,D100,FORM12,53           ADDX
0000B39E= F130                    8230m          DC.W    $F130
0000B3A0= D100                    8231m          DC.W    $D100
0000B3A2= 88                      8232m          DC.B    (FORM12-X)>>2
0000B3A3= 35                      8233m          DC.B    53
0000B3A4                          8234m          ENDM
0000B3A4                          8235m          C68     F000,D000,FORM10EX,4            ADD
0000B3A4= F000                    8236m          DC.W    $F000
0000B3A6= D000                    8237m          DC.W    $D000
0000B3A8= 5E                      8238m          DC.B    (FORM10EX-X)>>2
0000B3A9= 04                      8239m          DC.B    4
0000B3AA                          8240m          ENDM
0000B3AA                          8241m          C68     F1F8,C188,FORM9,50            EXG
0000B3AA= F1F8                    8242m          DC.W    $F1F8
0000B3AC= C188                    8243m          DC.W    $C188
0000B3AE= 5B                      8244m          DC.B    (FORM9-X)>>2
0000B3AF= 32                      8245m          DC.B    50
0000B3B0                          8246m          ENDM
0000B3B0                          8247m          C68     F1F8,C148,FORM8,50            EXG
0000B3B0= F1F8                    8248m          DC.W    $F1F8
0000B3B2= C148                    8249m          DC.W    $C148
0000B3B4= 57                      8250m          DC.B    (FORM8-X)>>2
0000B3B5= 32                      8251m          DC.B    50
0000B3B6                          8252m          ENDM
0000B3B6                          8253m          C68     F1F8,C140,FORM7,50            EXG
0000B3B6= F1F8                    8254m          DC.W    $F1F8
0000B3B8= C140                    8255m          DC.W    $C140
0000B3BA= 54                      8256m          DC.B    (FORM7-X)>>2
0000B3BB= 32                      8257m          DC.B    50
0000B3BC                          8258m          ENDM
0000B3BC                          8259m          C68     F1F0,C100,FORM12,49           ABCD
0000B3BC= F1F0                    8260m          DC.W    $F1F0
0000B3BE= C100                    8261m          DC.W    $C100
0000B3C0= 88                      8262m          DC.B    (FORM12-X)>>2
0000B3C1= 31                      8263m          DC.B    49
0000B3C2                          8264m          ENDM
0000B3C2                          8265m          C68     F1C0,C1C0,FORM6D,48           MULS
0000B3C2= F1C0                    8266m          DC.W    $F1C0
0000B3C4= C1C0                    8267m          DC.W    $C1C0
0000B3C6= 4A                      8268m          DC.B    (FORM6D-X)>>2
0000B3C7= 30                      8269m          DC.B    48
0000B3C8                          8270m          ENDM
0000B3C8                          8271m          C68     F1C0,C0C0,FORM6D,47           MULU
0000B3C8= F1C0                    8272m          DC.W    $F1C0
0000B3CA= C0C0                    8273m          DC.W    $C0C0
0000B3CC= 4A                      8274m          DC.B    (FORM6D-X)>>2
0000B3CD= 2F                      8275m          DC.B    47
0000B3CE                          8276m          ENDM
0000B3CE                          8277m          C68     F000,C000,FORM10,2            AND
0000B3CE= F000                    8278m          DC.W    $F000
0000B3D0= C000                    8279m          DC.W    $C000
0000B3D2= 6E                      8280m          DC.B    (FORM10-X)>>2
0000B3D3= 02                      8281m          DC.B    2
0000B3D4                          8282m          ENDM
0000B3D4                          8283m          C68     F0C0,B0C0,FORM10EX,6          CMP     <EA>,A@
0000B3D4= F0C0                    8284m          DC.W    $F0C0
0000B3D6= B0C0                    8285m          DC.W    $B0C0
0000B3D8= 5E                      8286m          DC.B    (FORM10EX-X)>>2
0000B3D9= 06                      8287m          DC.B    6
0000B3DA                          8288m          ENDM
0000B3DA                          8289m          C68     F138,B108,FORM12A,46           CMPM
0000B3DA= F138                    8290m          DC.W    $F138
0000B3DC= B108                    8291m          DC.W    $B108
0000B3DE= 97                      8292m          DC.B    (FORM12A-X)>>2
0000B3DF= 2E                      8293m          DC.B    46
0000B3E0                          8294m          ENDM
0000B3E0                          8295m          C68     F100,B100,FORM10,5            EOR
0000B3E0= F100                    8296m          DC.W    $F100
0000B3E2= B100                    8297m          DC.W    $B100
0000B3E4= 6E                      8298m          DC.B    (FORM10-X)>>2
0000B3E5= 05                      8299m          DC.B    5
0000B3E6                          8300m          ENDM
0000B3E6                          8301m          C68     F000,B000,FORM10EX,6            CMP
0000B3E6= F000                    8302m          DC.W    $F000
0000B3E8= B000                    8303m          DC.W    $B000
0000B3EA= 5E                      8304m          DC.B    (FORM10EX-X)>>2
0000B3EB= 06                      8305m          DC.B    6
0000B3EC                          8306m          ENDM
0000B3EC                          8307m          C68     F0C0,90C0,FORM10EX,44         SUB       <EA>,A@
0000B3EC= F0C0                    8308m          DC.W    $F0C0
0000B3EE= 90C0                    8309m          DC.W    $90C0
0000B3F0= 5E                      8310m          DC.B    (FORM10EX-X)>>2
0000B3F1= 2C                      8311m          DC.B    44
0000B3F2                          8312m          ENDM
0000B3F2                          8313m          C68     F130,9100,FORM12,45           SUBX
0000B3F2= F130                    8314m          DC.W    $F130
0000B3F4= 9100                    8315m          DC.W    $9100
0000B3F6= 88                      8316m          DC.B    (FORM12-X)>>2
0000B3F7= 2D                      8317m          DC.B    45
0000B3F8                          8318m          ENDM
0000B3F8                          8319m          C68     F000,9000,FORM10EX,44           SUB
0000B3F8= F000                    8320m          DC.W    $F000
0000B3FA= 9000                    8321m          DC.W    $9000
0000B3FC= 5E                      8322m          DC.B    (FORM10EX-X)>>2
0000B3FD= 2C                      8323m          DC.B    44
0000B3FE                          8324m          ENDM
0000B3FE                          8325m          C68     F1F0,8100,FORM12,43           SBCD
0000B3FE= F1F0                    8326m          DC.W    $F1F0
0000B400= 8100                    8327m          DC.W    $8100
0000B402= 88                      8328m          DC.B    (FORM12-X)>>2
0000B403= 2B                      8329m          DC.B    43
0000B404                          8330m          ENDM
0000B404                          8331m          C68     F1C0,81C0,FORM6D,42           DIVS
0000B404= F1C0                    8332m          DC.W    $F1C0
0000B406= 81C0                    8333m          DC.W    $81C0
0000B408= 4A                      8334m          DC.B    (FORM6D-X)>>2
0000B409= 2A                      8335m          DC.B    42
0000B40A                          8336m          ENDM
0000B40A                          8337m          C68     F1C0,80C0,FORM6D,41           DIVU
0000B40A= F1C0                    8338m          DC.W    $F1C0
0000B40C= 80C0                    8339m          DC.W    $80C0
0000B40E= 4A                      8340m          DC.B    (FORM6D-X)>>2
0000B40F= 29                      8341m          DC.B    41
0000B410                          8342m          ENDM
0000B410                          8343m          C68     F000,8000,FORM10,40           OR
0000B410= F000                    8344m          DC.W    $F000
0000B412= 8000                    8345m          DC.W    $8000
0000B414= 6E                      8346m          DC.B    (FORM10-X)>>2
0000B415= 28                      8347m          DC.B    40
0000B416                          8348m          ENDM
0000B416                          8349m          C68     F100,7000,IMOVEQ,39           MOVEQ
0000B416= F100                    8350m          DC.W    $F100
0000B418= 7000                    8351m          DC.W    $7000
0000B41A= A2                      8352m          DC.B    (IMOVEQ-X)>>2
0000B41B= 27                      8353m          DC.B    39
0000B41C                          8354m          ENDM
0000B41C                          8355m          C68     FF00,6100,IBSR,51             BSR
0000B41C= FF00                    8356m          DC.W    $FF00
0000B41E= 6100                    8357m          DC.W    $6100
0000B420= DE                      8358m          DC.B    (IBSR-X)>>2
0000B421= 33                      8359m          DC.B    51
0000B422                          8360m          ENDM
0000B422                          8361m          C68     FF00,6000,IBSR,65             BRA
0000B422= FF00                    8362m          DC.W    $FF00
0000B424= 6000                    8363m          DC.W    $6000
0000B426= DE                      8364m          DC.B    (IBSR-X)>>2
0000B427= 41                      8365m          DC.B    65
0000B428                          8366m          ENDM
0000B428                          8367m          C68     F000,6000,ICC,38              B
0000B428= F000                    8368m          DC.W    $F000
0000B42A= 6000                    8369m          DC.W    $6000
0000B42C= DD                      8370m          DC.B    (ICC-X)>>2
0000B42D= 26                      8371m          DC.B    38
0000B42E                          8372m          ENDM
0000B42E                          8373m          C68     F0F8,50C8,IDBCC,37              DB
0000B42E= F0F8                    8374m          DC.W    $F0F8
0000B430= 50C8                    8375m          DC.W    $50C8
0000B432= D8                      8376m          DC.B    (IDBCC-X)>>2
0000B433= 25                      8377m          DC.B    37
0000B434                          8378m          ENDM
0000B434                          8379m          C68     F0C0,50C0,ISCC,36             S
0000B434= F0C0                    8380m          DC.W    $F0C0
0000B436= 50C0                    8381m          DC.W    $50C0
0000B438= D5                      8382m          DC.B    (ISCC-X)>>2
0000B439= 24                      8383m          DC.B    36
0000B43A                          8384m          ENDM
0000B43A                          8385m          C68     F100,5100,IQUICK,35           SUBQ
0000B43A= F100                    8386m          DC.W    $F100
0000B43C= 5100                    8387m          DC.W    $5100
0000B43E= A1                      8388m          DC.B    (IQUICK-X)>>2
0000B43F= 23                      8389m          DC.B    35
0000B440                          8390m          ENDM
0000B440                          8391m          C68     F100,5000,IQUICK,34           ADDQ
0000B440= F100                    8392m          DC.W    $F100
0000B442= 5000                    8393m          DC.W    $5000
0000B444= A1                      8394m          DC.B    (IQUICK-X)>>2
0000B445= 22                      8395m          DC.B    34
0000B446                          8396m          ENDM
0000B446                          8397m          C68     F1C0,41C0,FORM6A,33           LEA
0000B446= F1C0                    8398m          DC.W    $F1C0
0000B448= 41C0                    8399m          DC.W    $41C0
0000B44A= 46                      8400m          DC.B    (FORM6A-X)>>2
0000B44B= 21                      8401m          DC.B    33
0000B44C                          8402m          ENDM
0000B44C                          8403m          C68     F1C0,4180,FORM6D,32           CHK
0000B44C= F1C0                    8404m          DC.W    $F1C0
0000B44E= 4180                    8405m          DC.W    $4180
0000B450= 4A                      8406m          DC.B    (FORM6D-X)>>2
0000B451= 20                      8407m          DC.B    32
0000B452                          8408m          ENDM
0000B452                          8409m          C68     FFC0,4EC0,FORM11SL,31         JMP
0000B452= FFC0                    8410m          DC.W    $FFC0
0000B454= 4EC0                    8411m          DC.W    $4EC0
0000B456= 7F                      8412m          DC.B    (FORM11SL-X)>>2
0000B457= 1F                      8413m          DC.B    31
0000B458                          8414m          ENDM
0000B458                          8415m          C68     FFC0,4E80,FORM11SL,30         JSR
0000B458= FFC0                    8416m          DC.W    $FFC0
0000B45A= 4E80                    8417m          DC.W    $4E80
0000B45C= 7F                      8418m          DC.B    (FORM11SL-X)>>2
0000B45D= 1E                      8419m          DC.B    30
0000B45E                          8420m          ENDM
0000B45E                          8421m          C68     FFFF,4E77,SCOMMON,29           RTR
0000B45E= FFFF                    8422m          DC.W    $FFFF
0000B460= 4E77                    8423m          DC.W    $4E77
0000B462= D4                      8424m          DC.B    (SCOMMON-X)>>2
0000B463= 1D                      8425m          DC.B    29
0000B464                          8426m          ENDM
0000B464                          8427m          C68     FFFF,4E76,SCOMMON,28           TRAPV
0000B464= FFFF                    8428m          DC.W    $FFFF
0000B466= 4E76                    8429m          DC.W    $4E76
0000B468= D4                      8430m          DC.B    (SCOMMON-X)>>2
0000B469= 1C                      8431m          DC.B    28
0000B46A                          8432m          ENDM
0000B46A                          8433m          C68     FFFF,4E75,SCOMMON,27           RTS
0000B46A= FFFF                    8434m          DC.W    $FFFF
0000B46C= 4E75                    8435m          DC.W    $4E75
0000B46E= D4                      8436m          DC.B    (SCOMMON-X)>>2
0000B46F= 1B                      8437m          DC.B    27
0000B470                          8438m          ENDM
0000B470                          8439m          C68     FFFF,4E73,SCOMMON,26           RTE
0000B470= FFFF                    8440m          DC.W    $FFFF
0000B472= 4E73                    8441m          DC.W    $4E73
0000B474= D4                      8442m          DC.B    (SCOMMON-X)>>2
0000B475= 1A                      8443m          DC.B    26
0000B476                          8444m          ENDM
0000B476                          8445m          C68     FFFF,4E72,ISTOP,25             STOP
0000B476= FFFF                    8446m          DC.W    $FFFF
0000B478= 4E72                    8447m          DC.W    $4E72
0000B47A= 13                      8448m          DC.B    (ISTOP-X)>>2
0000B47B= 19                      8449m          DC.B    25
0000B47C                          8450m          ENDM
0000B47C                          8451m          C68     FFFF,4E71,SCOMMON,24           NOP
0000B47C= FFFF                    8452m          DC.W    $FFFF
0000B47E= 4E71                    8453m          DC.W    $4E71
0000B480= D4                      8454m          DC.B    (SCOMMON-X)>>2
0000B481= 18                      8455m          DC.B    24
0000B482                          8456m          ENDM
0000B482                          8457m          C68     FFFF,4E70,SCOMMON,23           RESET
0000B482= FFFF                    8458m          DC.W    $FFFF
0000B484= 4E70                    8459m          DC.W    $4E70
0000B486= D4                      8460m          DC.B    (SCOMMON-X)>>2
0000B487= 17                      8461m          DC.B    23
0000B488                          8462m          ENDM
0000B488                          8463m          C68     FFF8,4E68,IMVFUSP,60          MOVE FROM USP
0000B488= FFF8                    8464m          DC.W    $FFF8
0000B48A= 4E68                    8465m          DC.W    $4E68
0000B48C= AE                      8466m          DC.B    (IMVFUSP-X)>>2
0000B48D= 3C                      8467m          DC.B    60
0000B48E                          8468m          ENDM
0000B48E                          8469m          C68     FFF8,4E60,IMVTUSP,60          MOVE TO USP
0000B48E= FFF8                    8470m          DC.W    $FFF8
0000B490= 4E60                    8471m          DC.W    $4E60
0000B492= B7                      8472m          DC.B    (IMVTUSP-X)>>2
0000B493= 3C                      8473m          DC.B    60
0000B494                          8474m          ENDM
0000B494                          8475m          C68     FFF8,4E58,FORM5,22            UNLINK
0000B494= FFF8                    8476m          DC.W    $FFF8
0000B496= 4E58                    8477m          DC.W    $4E58
0000B498= 45                      8478m          DC.B    (FORM5-X)>>2
0000B499= 16                      8479m          DC.B    22
0000B49A                          8480m          ENDM
0000B49A                          8481m          C68     FFF8,4E50,ILINK,21            LINK
0000B49A= FFF8                    8482m          DC.W    $FFF8
0000B49C= 4E50                    8483m          DC.W    $4E50
0000B49E= 36                      8484m          DC.B    (ILINK-X)>>2
0000B49F= 15                      8485m          DC.B    21
0000B4A0                          8486m          ENDM
0000B4A0                          8487m          C68     FFF0,4E40,FORM4,20            TRAP
0000B4A0= FFF0                    8488m          DC.W    $FFF0
0000B4A2= 4E40                    8489m          DC.W    $4E40
0000B4A4= 40                      8490m          DC.B    (FORM4-X)>>2
0000B4A5= 14                      8491m          DC.B    20
0000B4A6                          8492m          ENDM
0000B4A6                          8493m          C68     FF80,4C80,IMOVEMTR,15         MOVEM FROM REGISTERS
0000B4A6= FF80                    8494m          DC.W    $FF80
0000B4A8= 4C80                    8495m          DC.W    $4C80
0000B4AA= 0C                      8496m          DC.B    (IMOVEMTR-X)>>2
0000B4AB= 0F                      8497m          DC.B    15
0000B4AC                          8498m          ENDM
0000B4AC                          8499m          C68     FFC0,4AC0,FORM1A,19           TAS
0000B4AC= FFC0                    8500m          DC.W    $FFC0
0000B4AE= 4AC0                    8501m          DC.W    $4AC0
0000B4B0= 3D                      8502m          DC.B    (FORM1A-X)>>2
0000B4B1= 13                      8503m          DC.B    19
0000B4B2                          8504m          ENDM
0000B4B2                          8505m          C68     FF00,4A00,FORM1,18            TST
0000B4B2= FF00                    8506m          DC.W    $FF00
0000B4B4= 4A00                    8507m          DC.W    $4A00
0000B4B6= 3C                      8508m          DC.B    (FORM1-X)>>2
0000B4B7= 12                      8509m          DC.B    18
0000B4B8                          8510m          ENDM
0000B4B8                          8511m          C68     FFF8,48C0,FORM3,17            EXT.L
0000B4B8= FFF8                    8512m          DC.W    $FFF8
0000B4BA= 48C0                    8513m          DC.W    $48C0
0000B4BC= 3F                      8514m          DC.B    (FORM3-X)>>2
0000B4BD= 11                      8515m          DC.B    17
0000B4BE                          8516m          ENDM
0000B4BE                          8517m          C68     FFF8,4880,FORM3,16            EXT.W
0000B4BE= FFF8                    8518m          DC.W    $FFF8
0000B4C0= 4880                    8519m          DC.W    $4880
0000B4C2= 3F                      8520m          DC.B    (FORM3-X)>>2
0000B4C3= 10                      8521m          DC.B    16
0000B4C4                          8522m          ENDM
0000B4C4                          8523m          C68     FF80,4880,IMOVEMFR,15         MOVEA TO REGISTERS
0000B4C4= FF80                    8524m          DC.W    $FF80
0000B4C6= 4880                    8525m          DC.W    $4880
0000B4C8= 00                      8526m          DC.B    (IMOVEMFR-X)>>2
0000B4C9= 0F                      8527m          DC.B    15
0000B4CA                          8528m          ENDM
0000B4CA                          8529m          C68     FFF8,4840,FORM3,14            SWAP
0000B4CA= FFF8                    8530m          DC.W    $FFF8
0000B4CC= 4840                    8531m          DC.W    $4840
0000B4CE= 3F                      8532m          DC.B    (FORM3-X)>>2
0000B4CF= 0E                      8533m          DC.B    14
0000B4D0                          8534m          ENDM
0000B4D0                          8535m          C68     FFC0,4840,FORM11,13           PEA
0000B4D0= FFC0                    8536m          DC.W    $FFC0
0000B4D2= 4840                    8537m          DC.W    $4840
0000B4D4= 7C                      8538m          DC.B    (FORM11-X)>>2
0000B4D5= 0D                      8539m          DC.B    13
0000B4D6                          8540m          ENDM
0000B4D6                          8541m          C68     FFC0,4800,FORM1A,12           NBCD
0000B4D6= FFC0                    8542m          DC.W    $FFC0
0000B4D8= 4800                    8543m          DC.W    $4800
0000B4DA= 3D                      8544m          DC.B    (FORM1A-X)>>2
0000B4DB= 0C                      8545m          DC.B    12
0000B4DC                          8546m          ENDM
0000B4DC                          8547m          C68     FFC0,46C0,IMVTSR,59           MOVE TO SR
0000B4DC= FFC0                    8548m          DC.W    $FFC0
0000B4DE= 46C0                    8549m          DC.W    $46C0
0000B4E0= B2                      8550m          DC.B    (IMVTSR-X)>>2
0000B4E1= 3B                      8551m          DC.B    59
0000B4E2                          8552m          ENDM
0000B4E2                          8553m          C68     FF00,4600,FORM1,11            NOT
0000B4E2= FF00                    8554m          DC.W    $FF00
0000B4E4= 4600                    8555m          DC.W    $4600
0000B4E6= 3C                      8556m          DC.B    (FORM1-X)>>2
0000B4E7= 0B                      8557m          DC.B    11
0000B4E8                          8558m          ENDM
0000B4E8                          8559m          C68     FFC0,44C0,IMVTCCR,59          MOVE TO CCR
0000B4E8= FFC0                    8560m          DC.W    $FFC0
0000B4EA= 44C0                    8561m          DC.W    $44C0
0000B4EC= BA                      8562m          DC.B    (IMVTCCR-X)>>2
0000B4ED= 3B                      8563m          DC.B    59
0000B4EE                          8564m          ENDM
0000B4EE                          8565m          C68     FF00,4400,FORM1,10            NEG
0000B4EE= FF00                    8566m          DC.W    $FF00
0000B4F0= 4400                    8567m          DC.W    $4400
0000B4F2= 3C                      8568m          DC.B    (FORM1-X)>>2
0000B4F3= 0A                      8569m          DC.B    10
0000B4F4                          8570m          ENDM
0000B4F4                          8571m          C68     FF00,4200,FORM1,9             CLR
0000B4F4= FF00                    8572m          DC.W    $FF00
0000B4F6= 4200                    8573m          DC.W    $4200
0000B4F8= 3C                      8574m          DC.B    (FORM1-X)>>2
0000B4F9= 09                      8575m          DC.B    9
0000B4FA                          8576m          ENDM
0000B4FA                          8577m          C68     FFC0,40C0,IMVFSR,59           MOVE.W  FROM  SR
0000B4FA= FFC0                    8578m          DC.W    $FFC0
0000B4FC= 40C0                    8579m          DC.W    $40C0
0000B4FE= AA                      8580m          DC.B    (IMVFSR-X)>>2
0000B4FF= 3B                      8581m          DC.B    59
0000B500                          8582m          ENDM
0000B500                          8583m          C68     FF00,4000,FORM1,8             NEGX
0000B500= FF00                    8584m          DC.W    $FF00
0000B502= 4000                    8585m          DC.W    $4000
0000B504= 3C                      8586m          DC.B    (FORM1-X)>>2
0000B505= 08                      8587m          DC.B    8
0000B506                          8588m          ENDM
0000B506                          8589m          C68     F000,3000,IMOVE,59            MOVE.W
0000B506= F000                    8590m          DC.W    $F000
0000B508= 3000                    8591m          DC.W    $3000
0000B50A= 35                      8592m          DC.B    (IMOVE-X)>>2
0000B50B= 3B                      8593m          DC.B    59
0000B50C                          8594m          ENDM
0000B50C                          8595m          C68     F000,2000,IMOVE,60            MOVE.L
0000B50C= F000                    8596m          DC.W    $F000
0000B50E= 2000                    8597m          DC.W    $2000
0000B510= 35                      8598m          DC.B    (IMOVE-X)>>2
0000B511= 3C                      8599m          DC.B    60
0000B512                          8600m          ENDM
0000B512                          8601m          C68     F000,1000,IMOVE,58            MOVE.B
0000B512= F000                    8602m          DC.W    $F000
0000B514= 1000                    8603m          DC.W    $1000
0000B516= 35                      8604m          DC.B    (IMOVE-X)>>2
0000B517= 3A                      8605m          DC.B    58
0000B518                          8606m          ENDM
0000B518                          8607m          C68     FF00,0C00,IMMED,6             CMP       #
0000B518= FF00                    8608m          DC.W    $FF00
0000B51A= 0C00                    8609m          DC.W    $0C00
0000B51C= 18                      8610m          DC.B    (IMMED-X)>>2
0000B51D= 06                      8611m          DC.B    6
0000B51E                          8612m          ENDM
0000B51E                          8613m          C68     FF00,0A00,IMMED,5             EOR       #
0000B51E= FF00                    8614m          DC.W    $FF00
0000B520= 0A00                    8615m          DC.W    $0A00
0000B522= 18                      8616m          DC.B    (IMMED-X)>>2
0000B523= 05                      8617m          DC.B    5
0000B524                          8618m          ENDM
0000B524                          8619m          C68     FF00,0600,IMMED,4             ADD       #
0000B524= FF00                    8620m          DC.W    $FF00
0000B526= 0600                    8621m          DC.W    $0600
0000B528= 18                      8622m          DC.B    (IMMED-X)>>2
0000B529= 04                      8623m          DC.B    4
0000B52A                          8624m          ENDM
0000B52A                          8625m          C68     FF00,0400,IMMED,3             SUB       #
0000B52A= FF00                    8626m          DC.W    $FF00
0000B52C= 0400                    8627m          DC.W    $0400
0000B52E= 18                      8628m          DC.B    (IMMED-X)>>2
0000B52F= 03                      8629m          DC.B    3
0000B530                          8630m          ENDM
0000B530                          8631m          C68     FF00,0200,IMMED,2             AND       #
0000B530= FF00                    8632m          DC.W    $FF00
0000B532= 0200                    8633m          DC.W    $0200
0000B534= 18                      8634m          DC.B    (IMMED-X)>>2
0000B535= 02                      8635m          DC.B    2
0000B536                          8636m          ENDM
0000B536                          8637m          C68     FF00,0000,IMMED,1             OR        #
0000B536= FF00                    8638m          DC.W    $FF00
0000B538= 0000                    8639m          DC.W    $0000
0000B53A= 18                      8640m          DC.B    (IMMED-X)>>2
0000B53B= 01                      8641m          DC.B    1
0000B53C                          8642m          ENDM
0000B53C                          8643m          C68     F138,0108,IMOVEP,0            MOVEP
0000B53C= F138                    8644m          DC.W    $F138
0000B53E= 0108                    8645m          DC.W    $0108
0000B540= BE                      8646m          DC.B    (IMOVEP-X)>>2
0000B541= 00                      8647m          DC.B    0
0000B542                          8648m          ENDM
0000B542                          8649m          C68     FFC0,08C0,ISETS,64            BSET
0000B542= FFC0                    8650m          DC.W    $FFC0
0000B544= 08C0                    8651m          DC.W    $08C0
0000B546= F0                      8652m          DC.B    (ISETS-X)>>2
0000B547= 40                      8653m          DC.B    64
0000B548                          8654m          ENDM
0000B548                          8655m          C68     FFC0,0880,ISETS,63            BCLR
0000B548= FFC0                    8656m          DC.W    $FFC0
0000B54A= 0880                    8657m          DC.W    $0880
0000B54C= F0                      8658m          DC.B    (ISETS-X)>>2
0000B54D= 3F                      8659m          DC.B    63
0000B54E                          8660m          ENDM
0000B54E                          8661m          C68     FFC0,0840,ISETS,62            BCHG
0000B54E= FFC0                    8662m          DC.W    $FFC0
0000B550= 0840                    8663m          DC.W    $0840
0000B552= F0                      8664m          DC.B    (ISETS-X)>>2
0000B553= 3E                      8665m          DC.B    62
0000B554                          8666m          ENDM
0000B554                          8667m          C68     FFC0,0800,ISETS,61            BTST
0000B554= FFC0                    8668m          DC.W    $FFC0
0000B556= 0800                    8669m          DC.W    $0800
0000B558= F0                      8670m          DC.B    (ISETS-X)>>2
0000B559= 3D                      8671m          DC.B    61
0000B55A                          8672m          ENDM
0000B55A                          8673m          C68     F1C0,01C0,ISETD,64            BSET
0000B55A= F1C0                    8674m          DC.W    $F1C0
0000B55C= 01C0                    8675m          DC.W    $01C0
0000B55E= EC                      8676m          DC.B    (ISETD-X)>>2
0000B55F= 40                      8677m          DC.B    64
0000B560                          8678m          ENDM
0000B560                          8679m          C68     F1C0,0180,ISETD,63            BCLR
0000B560= F1C0                    8680m          DC.W    $F1C0
0000B562= 0180                    8681m          DC.W    $0180
0000B564= EC                      8682m          DC.B    (ISETD-X)>>2
0000B565= 3F                      8683m          DC.B    63
0000B566                          8684m          ENDM
0000B566                          8685m          C68     F1C0,0140,ISETD,62            BCHG
0000B566= F1C0                    8686m          DC.W    $F1C0
0000B568= 0140                    8687m          DC.W    $0140
0000B56A= EC                      8688m          DC.B    (ISETD-X)>>2
0000B56B= 3E                      8689m          DC.B    62
0000B56C                          8690m          ENDM
0000B56C                          8691m          C68     F1C0,0100,ISETD,61            BTST
0000B56C= F1C0                    8692m          DC.W    $F1C0
0000B56E= 0100                    8693m          DC.W    $0100
0000B570= EC                      8694m          DC.B    (ISETD-X)>>2
0000B571= 3D                      8695m          DC.B    61
0000B572                          8696m          ENDM
0000B572                          8697  TBLE     DS      0
0000B572                          8698  
0000B572                          8699  N68      MACRO
0000B572                          8700           DC.B    '\1',128+'\2'        \1\2
0000B572                          8701           ENDM
0000B572                          8702  
0000B572                          8703  OPCTBL   DS      0
0000B572                          8704m          N68     MOVE,P    0
0000B572= 4D 4F 56 45 D0          8705m          DC.B    'MOVE',128+'P'        MOVEP
0000B577                          8706m          ENDM
0000B577                          8707m          N68     O,R       1
0000B577= 4F D2                   8708m          DC.B    'O',128+'R'        OR
0000B579                          8709m          ENDM
0000B579                          8710m          N68     AN,D      2
0000B579= 41 4E C4                8711m          DC.B    'AN',128+'D'        AND
0000B57C                          8712m          ENDM
0000B57C                          8713m          N68     SU,B      3
0000B57C= 53 55 C2                8714m          DC.B    'SU',128+'B'        SUB
0000B57F                          8715m          ENDM
0000B57F                          8716m          N68     AD,D      4
0000B57F= 41 44 C4                8717m          DC.B    'AD',128+'D'        ADD
0000B582                          8718m          ENDM
0000B582                          8719m          N68     EO,R      5
0000B582= 45 4F D2                8720m          DC.B    'EO',128+'R'        EOR
0000B585                          8721m          ENDM
0000B585                          8722m          N68     CM,P      6
0000B585= 43 4D D0                8723m          DC.B    'CM',128+'P'        CMP
0000B588                          8724m          ENDM
0000B588                          8725m          N68     MOV,E     7
0000B588= 4D 4F 56 C5             8726m          DC.B    'MOV',128+'E'        MOVE
0000B58C                          8727m          ENDM
0000B58C                          8728m          N68     NEG,X     8
0000B58C= 4E 45 47 D8             8729m          DC.B    'NEG',128+'X'        NEGX
0000B590                          8730m          ENDM
0000B590                          8731m          N68     CL,R      9
0000B590= 43 4C D2                8732m          DC.B    'CL',128+'R'        CLR
0000B593                          8733m          ENDM
0000B593                          8734m          N68     NE,G      10
0000B593= 4E 45 C7                8735m          DC.B    'NE',128+'G'        NEG
0000B596                          8736m          ENDM
0000B596                          8737m          N68     NO,T      11
0000B596= 4E 4F D4                8738m          DC.B    'NO',128+'T'        NOT
0000B599                          8739m          ENDM
0000B599                          8740m          N68     NBC,D     12
0000B599= 4E 42 43 C4             8741m          DC.B    'NBC',128+'D'        NBCD
0000B59D                          8742m          ENDM
0000B59D                          8743m          N68     PEA.,L    13
0000B59D= 50 45 41 2E CC          8744m          DC.B    'PEA.',128+'L'        PEA.L
0000B5A2                          8745m          ENDM
0000B5A2                          8746m          N68     SWAP.,W   14
0000B5A2= 53 57 41 50 2E D7       8747m          DC.B    'SWAP.',128+'W'        SWAP.W
0000B5A8                          8748m          ENDM
0000B5A8                          8749m          N68     MOVE,M    15
0000B5A8= 4D 4F 56 45 CD          8750m          DC.B    'MOVE',128+'M'        MOVEM
0000B5AD                          8751m          ENDM
0000B5AD                          8752m          N68     EXT.,W    16
0000B5AD= 45 58 54 2E D7          8753m          DC.B    'EXT.',128+'W'        EXT.W
0000B5B2                          8754m          ENDM
0000B5B2                          8755m          N68     EXT.,L    17
0000B5B2= 45 58 54 2E CC          8756m          DC.B    'EXT.',128+'L'        EXT.L
0000B5B7                          8757m          ENDM
0000B5B7                          8758m          N68     TS,T      18
0000B5B7= 54 53 D4                8759m          DC.B    'TS',128+'T'        TST
0000B5BA                          8760m          ENDM
0000B5BA                          8761m          N68     TAS.,B    19
0000B5BA= 54 41 53 2E C2          8762m          DC.B    'TAS.',128+'B'        TAS.B
0000B5BF                          8763m          ENDM
0000B5BF                          8764m          N68     TRA,P     20
0000B5BF= 54 52 41 D0             8765m          DC.B    'TRA',128+'P'        TRAP
0000B5C3                          8766m          ENDM
0000B5C3                          8767m          N68     LIN,K     21
0000B5C3= 4C 49 4E CB             8768m          DC.B    'LIN',128+'K'        LINK
0000B5C7                          8769m          ENDM
0000B5C7                          8770m          N68     UNL,K     22
0000B5C7= 55 4E 4C CB             8771m          DC.B    'UNL',128+'K'        UNLK
0000B5CB                          8772m          ENDM
0000B5CB                          8773m          N68     RESE,T    23
0000B5CB= 52 45 53 45 D4          8774m          DC.B    'RESE',128+'T'        RESET
0000B5D0                          8775m          ENDM
0000B5D0                          8776m          N68     NO,P      24
0000B5D0= 4E 4F D0                8777m          DC.B    'NO',128+'P'        NOP
0000B5D3                          8778m          ENDM
0000B5D3                          8779m          N68     STO,P     25
0000B5D3= 53 54 4F D0             8780m          DC.B    'STO',128+'P'        STOP
0000B5D7                          8781m          ENDM
0000B5D7                          8782m          N68     RT,E      26
0000B5D7= 52 54 C5                8783m          DC.B    'RT',128+'E'        RTE
0000B5DA                          8784m          ENDM
0000B5DA                          8785m          N68     RT,S      27
0000B5DA= 52 54 D3                8786m          DC.B    'RT',128+'S'        RTS
0000B5DD                          8787m          ENDM
0000B5DD                          8788m          N68     TRAP,V    28
0000B5DD= 54 52 41 50 D6          8789m          DC.B    'TRAP',128+'V'        TRAPV
0000B5E2                          8790m          ENDM
0000B5E2                          8791m          N68     RT,R      29
0000B5E2= 52 54 D2                8792m          DC.B    'RT',128+'R'        RTR
0000B5E5                          8793m          ENDM
0000B5E5                          8794m          N68     JS,R      30
0000B5E5= 4A 53 D2                8795m          DC.B    'JS',128+'R'        JSR
0000B5E8                          8796m          ENDM
0000B5E8                          8797m          N68     JM,P      31
0000B5E8= 4A 4D D0                8798m          DC.B    'JM',128+'P'        JMP
0000B5EB                          8799m          ENDM
0000B5EB                          8800m          N68     CHK.,W    32
0000B5EB= 43 48 4B 2E D7          8801m          DC.B    'CHK.',128+'W'        CHK.W
0000B5F0                          8802m          ENDM
0000B5F0                          8803m          N68     LEA.,L    33
0000B5F0= 4C 45 41 2E CC          8804m          DC.B    'LEA.',128+'L'        LEA.L
0000B5F5                          8805m          ENDM
0000B5F5                          8806m          N68     ADD,Q     34
0000B5F5= 41 44 44 D1             8807m          DC.B    'ADD',128+'Q'        ADDQ
0000B5F9                          8808m          ENDM
0000B5F9                          8809m          N68     SUB,Q     35
0000B5F9= 53 55 42 D1             8810m          DC.B    'SUB',128+'Q'        SUBQ
0000B5FD                          8811m          ENDM
0000B5FD= D3                      8812           DC.B    128+'S'   36
0000B5FE                          8813m          N68     D,B       37
0000B5FE= 44 C2                   8814m          DC.B    'D',128+'B'        DB
0000B600                          8815m          ENDM
0000B600= C2                      8816           DC.B    128+'B'   38
0000B601                          8817m          N68     MOVEQ.,L  .....39
0000B601= 4D 4F 56 45 51 2E CC    8818m          DC.B    'MOVEQ.',128+'L'        MOVEQ.L
0000B608                          8819m          ENDM
0000B608                          8820m          N68     O,R       40
0000B608= 4F D2                   8821m          DC.B    'O',128+'R'        OR
0000B60A                          8822m          ENDM
0000B60A                          8823m          N68     DIVU.,W   41
0000B60A= 44 49 56 55 2E D7       8824m          DC.B    'DIVU.',128+'W'        DIVU.W
0000B610                          8825m          ENDM
0000B610                          8826m          N68     DIVS.,W   42
0000B610= 44 49 56 53 2E D7       8827m          DC.B    'DIVS.',128+'W'        DIVS.W
0000B616                          8828m          ENDM
0000B616                          8829m          N68     SBC,D     43
0000B616= 53 42 43 C4             8830m          DC.B    'SBC',128+'D'        SBCD
0000B61A                          8831m          ENDM
0000B61A                          8832m          N68     SU,B      44
0000B61A= 53 55 C2                8833m          DC.B    'SU',128+'B'        SUB
0000B61D                          8834m          ENDM
0000B61D                          8835m          N68     SUB,X     45
0000B61D= 53 55 42 D8             8836m          DC.B    'SUB',128+'X'        SUBX
0000B621                          8837m          ENDM
0000B621                          8838m          N68     CMP,M     46
0000B621= 43 4D 50 CD             8839m          DC.B    'CMP',128+'M'        CMPM
0000B625                          8840m          ENDM
0000B625                          8841m          N68     MULU.,W   47
0000B625= 4D 55 4C 55 2E D7       8842m          DC.B    'MULU.',128+'W'        MULU.W
0000B62B                          8843m          ENDM
0000B62B                          8844m          N68     MULS.,W   48
0000B62B= 4D 55 4C 53 2E D7       8845m          DC.B    'MULS.',128+'W'        MULS.W
0000B631                          8846m          ENDM
0000B631                          8847m          N68     ABC,D    49
0000B631= 41 42 43 C4             8848m          DC.B    'ABC',128+'D'        ABCD
0000B635                          8849m          ENDM
0000B635                          8850m          N68     EX,G      50
0000B635= 45 58 C7                8851m          DC.B    'EX',128+'G'        EXG
0000B638                          8852m          ENDM
0000B638                          8853m          N68     BS,R      .....51
0000B638= 42 53 D2                8854m          DC.B    'BS',128+'R'        BSR
0000B63B                          8855m          ENDM
0000B63B                          8856m          N68     NUL,L     .....52
0000B63B= 4E 55 4C CC             8857m          DC.B    'NUL',128+'L'        NULL
0000B63F                          8858m          ENDM
0000B63F                          8859m          N68     ADD,X     53
0000B63F= 41 44 44 D8             8860m          DC.B    'ADD',128+'X'        ADDX
0000B643                          8861m          ENDM
0000B643                          8862m          N68     A,S       54
0000B643= 41 D3                   8863m          DC.B    'A',128+'S'        AS
0000B645                          8864m          ENDM
0000B645                          8865m          N68     L,S       55
0000B645= 4C D3                   8866m          DC.B    'L',128+'S'        LS
0000B647                          8867m          ENDM
0000B647                          8868m          N68     R,O       56
0000B647= 52 CF                   8869m          DC.B    'R',128+'O'        RO
0000B649                          8870m          ENDM
0000B649                          8871m          N68     RO,X      57
0000B649= 52 4F D8                8872m          DC.B    'RO',128+'X'        ROX
0000B64C                          8873m          ENDM
0000B64C                          8874m          N68     MOVE.,B   58
0000B64C= 4D 4F 56 45 2E C2       8875m          DC.B    'MOVE.',128+'B'        MOVE.B
0000B652                          8876m          ENDM
0000B652                          8877m          N68     MOVE.,W   59
0000B652= 4D 4F 56 45 2E D7       8878m          DC.B    'MOVE.',128+'W'        MOVE.W
0000B658                          8879m          ENDM
0000B658                          8880m          N68     MOVE.,L   60
0000B658= 4D 4F 56 45 2E CC       8881m          DC.B    'MOVE.',128+'L'        MOVE.L
0000B65E                          8882m          ENDM
0000B65E                          8883m          N68     BTS,T     61
0000B65E= 42 54 53 D4             8884m          DC.B    'BTS',128+'T'        BTST
0000B662                          8885m          ENDM
0000B662                          8886m          N68     BCH,G     62
0000B662= 42 43 48 C7             8887m          DC.B    'BCH',128+'G'        BCHG
0000B666                          8888m          ENDM
0000B666                          8889m          N68     BCL,R     63
0000B666= 42 43 4C D2             8890m          DC.B    'BCL',128+'R'        BCLR
0000B66A                          8891m          ENDM
0000B66A                          8892m          N68     BSE,T     64
0000B66A= 42 53 45 D4             8893m          DC.B    'BSE',128+'T'        BSET
0000B66E                          8894m          ENDM
0000B66E                          8895m          N68     BR,A      65
0000B66E= 42 52 C1                8896m          DC.B    'BR',128+'A'        BRA
0000B671                          8897m          ENDM
0000B671                          8898  
0000B671= 00                      8899           DC.B    0              PAD BYTE
0000B672                          8900  
0000B672                          8901  
0000B672                          8902  
0000B672                          8903  *-------------------------------------------------------------------------
0000B672                          8904  * File TRAP14    Trap 14 handler of "TUTOR"                       06/25/82
0000B672                          8905  
0000B672                          8906  *        CALLING SEQUENCE
0000B672                          8907  *                  D7 = XXXXXXFF   WHERE "FF" IF FUNCTION NUMBER
0000B672                          8908  *                  TRAP      #14
0000B672                          8909  
0000B672                          8910  TRAP14
0000B672  48E7 4160               8911           MOVEM.L D1/D7/A1-A2,-(A7)
0000B676                          8912  
0000B676  2278 064C               8913           MOVE.L  CTLINK,A1
0000B67A  1211                    8914  T100     MOVE.B  (A1),D1        D1 = FUNCTION FROM TABLE
0000B67C  0C01 00FF               8915           CMPI.B  #$FF,D1
0000B680  6740                    8916           BEQ.S   T500           END OF TABLE
0000B682                          8917  
0000B682  0C01 00FE               8918           CMPI.B  #$FE,D1
0000B686  6774                    8919           BEQ.S   T600           LINK IN LIST
0000B688                          8920  
0000B688  B207                    8921           CMP.B   D7,D1
0000B68A  6704                    8922           BEQ.S   T400           FOUND MATCH
0000B68C                          8923  
0000B68C  5889                    8924           ADDQ.L  #4,A1
0000B68E  60EA                    8925           BRA     T100
0000B690                          8926  
0000B690  2211                    8927  T400     MOVE.L  (A1),D1        FFAAAAAA
0000B692  E181                    8928           ASL.L   #8,D1          AAAAAA..
0000B694  E089                    8929           LSR.L   #8,D1          00AAAAAA  GO TO ADDRESS
0000B696                          8930  
0000B696  082F 0005 0010          8931           BTST.B  #5,16(A7)
0000B69C  6710                    8932           BEQ.S   T450           CALL FROM USER MODE
0000B69E                          8933  
0000B69E                          8934  *  CALL FROM SUPERVISOR MODE
0000B69E                          8935  * STACK (WORDS)
0000B69E                          8936  *   +0   D1 HIGH
0000B69E                          8937  *   +2   D1 LOW
0000B69E                          8938  *   +4   D7 HIGH
0000B69E                          8939  *   +6   D7 LOW
0000B69E                          8940  *   +8   A1 HIGH
0000B69E                          8941  *   +10  A1 LOW
0000B69E                          8942  *   +12  A2 HIGH              STATUS REG
0000B69E                          8943  *   +14  A2 LOW               GOTO HIGH
0000B69E                          8944  *   +16  STATUS REG           GOTO LOW
0000B69E                          8945  *   +18  RETURN HIGH        RETURN HIGH
0000B69E                          8946  *   +20  RETURN LOW         RETURN LOW
0000B69E                          8947  *
0000B69E  2F6F 0010 000C          8948           MOVE.L  16(A7),12(A7)  SR
0000B6A4  2F41 000E               8949           MOVE.L  D1,14(A7)      GOTO ADDRESS
0000B6A8  4CDF 0282               8950           MOVEM.L (A7)+,D1/D7/A1 RESTORE REGISTERS
0000B6AC  4E73                    8951           RTE                    GOTO (AND TRIM STACK)
0000B6AE                          8952  
0000B6AE                          8953  * STACK (WORDS)
0000B6AE                          8954  *   +0   D1 HIGH
0000B6AE                          8955  *   +2   D1 LOW
0000B6AE                          8956  *   +4   D7 HIGH
0000B6AE                          8957  *   +6   D7 LOW
0000B6AE                          8958  *   +8   A1 HIGH
0000B6AE                          8959  *   +10  A1 LOW
0000B6AE                          8960  *   +12  A2 HIGH                                 (USER STACK)
0000B6AE                          8961  *   +14  A2 LOW
0000B6AE                          8962  *   +16  STATUS REG         STATUS REG
0000B6AE                          8963  *   +18  RETURN HIGH        GOTO HIGH            RETURN HIGH
0000B6AE                          8964  *   +20  RETURN LOW         GOTO LOW             RETURN LOW
0000B6AE                          8965  *
0000B6AE                          8966  * CALL FROM USER MODE
0000B6AE  2E2F 0012               8967  T450     MOVE.L  18(A7),D7      RETURN PC
0000B6B2  2F41 0012               8968           MOVE.L  D1,18(A7)      GOTO ADDRESS
0000B6B6  4E69                    8969           MOVE.L  USP,A1         POINTER TO USER STACK
0000B6B8  2307                    8970           MOVE.L  D7,-(A1)       RETURN PC TO USER STACK
0000B6BA  4E61                    8971           MOVE.L  A1,USP         UPDATED USER STACK POINTER
0000B6BC  4CDF 0682               8972           MOVEM.L (A7)+,D1/D7/A1/A2
0000B6C0  4E73                    8973           RTE
0000B6C2                          8974  
0000B6C2  4CDF 0682               8975  T500     MOVEM.L (A7)+,D1/D7/A1/A2
0000B6C6                          8976m          SAVEREGS
0000B6C6  21CF 0444               8977m       MOVE.L  A7,REGA7       SAVE STACK POINTER
0000B6CA  4FFA 000A               8978m       LEA     SV_378(PC),A7    A7 = RETURN ADDRESS (FOR CALL TO SAVE)
0000B6CE  21CF 04D6               8979m       MOVE.L  A7,TEMP        TEMP = RETURN ADDRESS
0000B6D2  6000 D52A               8980m       BRA     SAVE           BSR WITHOUT USING STACK
0000B6D6                          8981m SV_378  DS      0
0000B6D6                          8982m       ENDM
0000B6D6  4BFA 0012               8983           LEA     MSGT14(PC),A5
0000B6DA  6100 CA16               8984           BSR     FIXDATA
0000B6DE  6100 E142               8985           BSR     OUT1CR
0000B6E2  6100 D192               8986           BSR     TDISPLY
0000B6E6  6000 CADC               8987           BRA     MACSBUG
0000B6EA                          8988  
0000B6EA= 55 4E 44 45 46 49 4E    8989  MSGT14   DC.B    'UNDEFINED TRAP 14',EOT
          45 44 20 54 52 41 50  
          20 31 34 04           
0000B6FC                          8992  
0000B6FC                          8993  
0000B6FC                          8994  
0000B6FC                          8995  
0000B6FC                          8996  
0000B6FC  2251                    8997  T600     MOVE.L  (A1),A1
0000B6FE  6000 FF7A               8998           BRA     T100
0000B702                          8999  
0000B702                          9000  T700     DS      0              253 APPEND NEW TABLE
0000B702  2208                    9001           MOVE.L  A0,D1          ..AAAAAA
0000B704  2078 064C               9002           MOVE.L  CTLINK,A0      A0 = LINK TO BE RETURNED
0000B708  E199                    9003           ROL.L   #8,D1          AAAAAA..
0000B70A  123C 00FE               9004           MOVE.B  #$FE,D1        AAAAAAFE
0000B70E  E099                    9005           ROR.L   #8,D1          FEAAAAAA
0000B710  21C1 064C               9006           MOVE.L  D1,CTLINK
0000B714  4E75                    9007           RTS
0000B716                          9008  
0000B716                          9009  
0000B716                          9010  *  CREATE ENTRY TO FUNCTION/ADDRESS TABLE
0000B716                          9011  *    FFAAAAAA
0000B716                          9012  *    FF......      FUNCTION NUMBER
0000B716                          9013  *    ..AAAAAA      ADDRESS OF FUNCTION
0000B716                          9014  
0000B716                          9015  FADDR    MACRO   \1,\2
0000B716                          9016           DC.L    (\1<<24)+\2
0000B716                          9017           ENDM
0000B716                          9018  
0000B716                          9019  
0000B716                          9020m CT       FADDR   253,T700       APPEND NEW TABLE
0000B716= FD00B702                9021m          DC.L    (253<<24)+T700
0000B71A                          9022m          ENDM
0000B71A                          9023m          FADDR   252,FIXDADD    APPEND DATA (A5) TO BUFFER (A6)+
0000B71A= FC0080F6                9024m          DC.L    (252<<24)+FIXDADD
0000B71E                          9025m          ENDM
0000B71E                          9026m          FADDR   251,FIXBUF     SET A5 & A6 AS POINTERS TO BUFFER
0000B71E= FB0098AA                9027m          DC.L    (251<<24)+FIXBUF
0000B722                          9028m          ENDM
0000B722                          9029m          FADDR   250,FIXDATA    MOVE DATA (A5) TO BUFFER; A5=BUFFER A6
0000B722= FA0080F2                9030m          DC.L    (250<<24)+FIXDATA
0000B726                          9031m          ENDM
0000B726                          9032m          FADDR   249,FIXDCRLF
0000B726= F9008106                9033m          DC.L    (249<<24)+FIXDCRLF
0000B72A                          9034m          ENDM
0000B72A                          9035m          FADDR   248,F100       OUTPUT CHAR PORT1  D0=CHAR
0000B72A= F800B776                9036m          DC.L    (248<<24)+F100
0000B72E                          9037m          ENDM
0000B72E                          9038m          FADDR   247,F110       INPUT CHAR PORT1  D0=CHAR
0000B72E= F700B77E                9039m          DC.L    (247<<24)+F110
0000B732                          9040m          ENDM
0000B732                          9041m          FADDR   243,OUTPUT     OUTPUT STRING PORT1 (A5) (A6)
0000B732= F300983C                9042m          DC.L    (243<<24)+OUTPUT
0000B736                          9043m          ENDM
0000B736                          9044m          FADDR   242,OUTPUT21   OUTPUT STRING PORT2 (A5) (A6)
0000B736= F200985C                9045m          DC.L    (242<<24)+OUTPUT21
0000B73A                          9046m          ENDM
0000B73A                          9047m          FADDR   241,PORTIN1    INPUT STRING PORT1  (A5) (A6)
0000B73A= F10098B2                9048m          DC.L    (241<<24)+PORTIN1
0000B73E                          9049m          ENDM
0000B73E                          9050m          FADDR   236,HEX2DEC    CONVERT HEX D0 TO DECIMAL (A6)+
0000B73E= EC008ECE                9051m          DC.L    (236<<24)+HEX2DEC
0000B742                          9052m          ENDM
0000B742                          9053m          FADDR   235,GETHEX     GET HEX CHAR INTO D0 FROM (A5)+
0000B742= EB0097D8                9054m          DC.L    (235<<24)+GETHEX
0000B746                          9055m          ENDM
0000B746                          9056m          FADDR   234,PUTHEX     FORMAT HEX CHAR FROM D0 TO (A6)+
0000B746= EA0095F2                9057m          DC.L    (234<<24)+PUTHEX
0000B74A                          9058m          ENDM
0000B74A                          9059m          FADDR   233,PNT2HX     FORMAT 2 HEX CHAR FROM D0 TO (A6)+
0000B74A= E90095EA                9060m          DC.L    (233<<24)+PNT2HX
0000B74E                          9061m          ENDM
0000B74E                          9062m          FADDR   232,PNT4HX     FORMAT 4 HEX CHAR FROM D0 TO (A6)+
0000B74E= E80095E2                9063m          DC.L    (232<<24)+PNT4HX
0000B752                          9064m          ENDM
0000B752                          9065m          FADDR   231,PNT6HX     FORMAT 6 HEX CHAR FROM D0 TO (A6)+
0000B752= E70095DC                9066m          DC.L    (231<<24)+PNT6HX
0000B756                          9067m          ENDM
0000B756                          9068m          FADDR   230,PNT8HX     FORMAT 8 HEX CHAR FROM D0 TO (A6)+
0000B756= E60095D4                9069m          DC.L    (230<<24)+PNT8HX
0000B75A                          9070m          ENDM
0000B75A                          9071m          FADDR   229,START      RESTART TUTOR INITIALIZE EVERYTHING
0000B75A= E5008146                9072m          DC.L    (229<<24)+START
0000B75E                          9073m          ENDM
0000B75E                          9074m          FADDR   228,MACSBUG    GOTO TUTOR;   PRINT PROMPT
0000B75E= E40081C4                9075m          DC.L    (228<<24)+MACSBUG
0000B762                          9076m          ENDM
0000B762                          9077m          FADDR   227,F120       OUTPUT STRING,CR,LF PORT1 (A5) (A6)
0000B762= E300B786                9078m          DC.L    (227<<24)+F120
0000B766                          9079m          ENDM
0000B766                          9080m          FADDR   226,GETNUMA    GET HEX NUMBER (A5)+ INTO D0
0000B766= E2009728                9081m          DC.L    (226<<24)+GETNUMA
0000B76A                          9082m          ENDM
0000B76A                          9083m          FADDR   225,GETNUMD    GET DECIMAL NUMBER (A5)+ INTO D0
0000B76A= E1009720                9084m          DC.L    (225<<24)+GETNUMD
0000B76E                          9085m          ENDM
0000B76E                          9086m          FADDR   224,PORTIN1N   INPUT STRING PORT1 (NO AUTO LF)
0000B76E= E00098C4                9087m          DC.L    (224<<24)+PORTIN1N
0000B772                          9088m          ENDM
0000B772                          9089  
0000B772                          9090m          FADDR   255,$FFFFFF    END KEY
0000B772= FFFFFFFF                9091m          DC.L    (255<<24)+$FFFFFF
0000B776                          9092m          ENDM
0000B776                          9093  
0000B776  6100 E12C               9094  F100     BSR     GETSER1        A0 = PORT1 ADDRESS
0000B77A  6000 E1FC               9095           BRA     OUTCH
0000B77E                          9096  
0000B77E  6100 E124               9097  F110     BSR     GETSER1        A0 = PORT1 ADDRESS
0000B782  6000 E224               9098           BRA     INCHNE
0000B786                          9099           
0000B786  6100 E0B4               9100  F120     BSR     OUTPUT         OUTPUT STRING,CR,LF PORT1 (A5) (A6)
0000B78A  700D                    9101           MOVEQ   #CR,D0
0000B78C  61E8                    9102           BSR     F100           OUTPUT CHAR
0000B78E  700A                    9103           MOVEQ   #LF,D0
0000B790  61E4                    9104           BSR     F100           OUTPUT CHAR
0000B792  4E75                    9105           RTS
0000B794                          9106  
0000B794                          9107  
0000B794= 00 00 00 00 00 00 ...   9108           DCB.B   $54,0          PAD BYTES
0000B7E8                          9109  
0000B7E8                          9110  
0000B7E8                          9111  *-------------------------------------------------------------------------
0000B7E8                          9112  * File YROM      Version/checksum/identification                  07/29/82
0000B7E8                          9113  
0000B7E8  =00000004               9114  VERSION  EQU     4         BINARY FOR VERSION 1.3
0000B7E8                          9115  
0000B7E8= 04 04                   9116           DC.B    VERSION,VERSION
0000B7EA                          9117  LAST     DS.W    0              LAST ADDRESS+1
0000B7EA                          9118  
0000B7EA                          9119           END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A3OUT               8A70
A5300               A4E2
A5305               A4EE
A5TODEST            A4E0
ABORT335            957C
ABORTB              955C
ABORTE              9598
ADDR2MEM            0
ADDRESS             FFFFFFC0
ADDRMSG             803A
ADR                 5F2
ALTSER1             624
ALTSER2             628
AV11                2C
AV12                30
AV2                 8
AV24                60
AV3                 C
AV31                7C
AV4                 10
AV46                B8
AV47                BC
AV48                C0
AV8                 20
AV9                 24
BCMD0               85C8
BCMD00              85D6
BCMD01              85AC
BCMD3               85E4
BCMD33              85EA
BCMD5               8602
BCMD55              860A
BCMD6               85FC
BCMD7               8614
BCMD77              861C
BCMD8               8622
BCMD81              8642
BCMD9               8646
BEGHRAM             44C
BELL                7
BERRD               4CA
BERRMSG             8030
BFCMD               8456
BFCMD11             8496
BKPOINT             4AFB
BKSPACE             9912
BLANK               20
BLANKIT             9924
BM112               84E4
BM122               84EC
BM132               84F0
BM142               84F6
BMCMD               84A8
BPADD               470
BPCNT               494
BPDATA              4B8
BPSTATUS            4E0
BPTILL              490
BRCMD               85C4
BREAK               998C
BRTBL               AF1E
BS101               86F4
BS200               8700
BS213               8732
BS215               8736
BS219               873A
BS225               874C
BS311               875E
BS313               8762
BS323               8782
BS325               8788
BS355               87B0
BS365               87BA
BS4CTLH             9920
BS91                86BA
BS97                86E4
BSCMD               868A
BTCMD               87C4
BUFFER              540
BUFFSIZE            80
BUFSIZE             50
C68                 6AC
CC                  FFFFFFBC
CHARSAVE            9952
CHKBP               8D56
CHKBP1              8D84
CHKBP11             8D90
CHKBP2              8D9A
CHKBP3              8DA6
CHKBP4              8DAA
CHKBRK              998A
CHKCR               9962
CHKCTLD             9936
CHKCTLH             9906
CKADDR              96CA
CKADR39             96D2
CKADR99             96E6
CKWADR              96C4
CMD                 187
CMMD2               A20E
CMMD2S10            A28A
CMMD2S11            A2F8
CMMD35              A232
CODE68K             A090
COMMA               A1EC
COMMAS20            A2FA
COMMON              B314
COMMON35            B322
COMMON4             B312
CR                  D
CRPADS              61A
CRTPNT              648
CS11                AD46
CS12                ACB0
CS13                AC2E
CS14                ABBE
CS15                AB7E
CS16                AB10
CS17                AEEA
CS18                AE84
CS19                AF96
CS20                ADE6
CT                  B716
CTLC                3
CTLD                4
CTLH                8
CTLINK              64C
CTLW                17
CTLX                18
DCCMD               8816
DCODE68K            B276
DDATA               FFFFFFF0
DEC311              B28A
DEC404              B2AA
DEC411              B2BA
DEC425              B2CA
DEC510              B2D8
DEC515              B2DC
DEC530              B2E4
DEC535              B2EA
DEC537              B2F6
DECODE1             8216
DECODE10            822C
DECODE2             8236
DECODE21            8240
DECODE3             8266
DECODE4             8244
DECODE41            8252
DECODE6             8206
DEL                 7F
DELAYC1             1000
DFCMD               8874
DUCMD               8992
DUMPTEMP            5C0
EA                  9AA4
EA000               AFC6
EA001               AFD2
EA010               AFDE
EA011               AFF2
EA011RTS            B008
EA0633              9AD2
EA0634              9AD6
EA0635              9AE2
EA0637              9AEA
EA10                9AF6
EA100               B00A
EA101               B0AC
EA11                9B22
EA1105              B088
EA1107              B08C
EA1109              B0A2
EA111               B0C2
EA1112              B0E0
EA1113              B0FC
EA1113A             B10C
EA1114              B12E
EA1115              B198
EA11153             B1D0
EA11155             B1DA
EA16BIT             9D0C
EA16BITC            9D1A
EA16BITS            9D16
EA21                9B3A
EA31                9B4E
EA34                9B84
EA35                9B86
EA41                9B94
EA4102              9BA8
EA4105              9BAE
EA4120              9BEA
EA4127              9BC4
EA4135              9BD4
EA5115              9C30
EA5116              9C34
EA5118              9C74
EA5119              9C7A
EA5119E             9C84
EA61                9C86
EA71                9CB8
EA7113              9CFA
EA7115              9D00
EA8BIT              9D22
EA8BITC             9D2E
EA8BITS             9D2A
EAA                 9A9A
EAALL               9AA0
EAC                 9A82
EADA                9A7C
EADADDR             9A94
EAF25               B176
EAF27               B17A
EAF35               B18E
EAM                 9A88
EAS                 9D30
EASEX               9D3E
EAZ                 9A8E
ECHOPT1             4E2
EEA                 B024
EEA10               AC38
ENDHRAM             650
ENDS0               8A04
EOHLOOP             8E40
EOT                 4
ER                  A206
ER1                 9A78
ER10                A894
ER2                 A5B0
ER3                 9B90
ER4                 9CB4
ERDONE              A20A
ERF                 A204
ERROR               80B0
ESKB                0
ESKE                22
EV                  99CC
EV15                99D4
EV21                99D0
EV39                99EA
EVECT               8452
EVECT2              95B0
EVECT4              9578
EVECT5              836C
EVECT6              83B2
EVECT7              8402
EVECTL              95A0
EVER                A610
EVSR                A634
F100                B776
F110                B77E
F120                B786
FADDR               753
FDATA               A
FE10                B020
FE11                B108
FE12                B2C8
FERROR              B33C
FERROR35            B346
FERROR39            B352
FIRST               8000
FIXBP               85B4
FIXBUF              98AA
FIXD2               8100
FIXDADD             80F6
FIXDATA             80F2
FIXDCRLF            8106
FLAG                0
FNEXTF              96A6
FNEXTF1             96A4
FNEXTF7             96C0
FOC                 1F
FOL                 1F
FOP                 27
FORM1               ABB6
FORM10              AC7E
FORM103             AC84
FORM104             AC88
FORM105             AC9A
FORM10E3            AC60
FORM10E4            AC68
FORM10E6            AC74
FORM10EX            AC3E
FORM11              ACB6
FORM112             ACD6
FORM114             ACE4
FORM11SL            ACC2
FORM12              ACE6
FORM125             AD00
FORM12A             AD22
FORM1A              ABBA
FORM3               ABC2
FORM4               ABC6
FORM5               ABDA
FORM6A              ABDE
FORM6D              ABEE
FORM7               AC16
FORM8               AC22
FORM815             AC26
FORM9               AC32
FORM91              AFAE
FORM93              AFC2
FORM95              AFC4
FORMREG5            AC02
FORMREGA            ABFE
FORMREGD            AC0E
FORMSIZE            AF9A
FPR315              A226
FREL10              9612
FREL15              9624
FREL20              963C
FREL25              964E
FREL30              9658
FRELADDR            9606
FSIZE               9A36
GAE                 8B7C
GAP111              8AC8
GAP111S             8B32
GAP113              8AD0
GAP118              8B2A
GAP119              8B2C
GAP121              8B34
GAP131              8B40
GAP135              8B4C
GAP141              8B54
GAP161              8B80
GAP163              8B96
GAP165              8BA0
GAP171              8BA6
GAP181              8BC2
GAP191              8BC8
GAP197              8BDA
GAP199              8BDC
GASRGN              8BE2
GDCMD               85A4
GET41               9A44
GETA                8AAC
GETCHAR             A1F4
GETCHARF            A1FC
GETDECNU            972C
GETEXP              96FA
GETEXP15            9702
GETEXP21            96FE
GETEXP39            9718
GETF305             99FE
GETF308             9A12
GETF311             9A12
GETF312             9A22
GETF313             9A26
GETF314             9A28
GETF325             9A2E
GETF333             9A34
GETFIELD            99F2
GETHEX              97D8
GETHEXNU            9734
GETIMM              AA56
GETN20              973A
GETN30              9744
GETN40              9750
GETN50              975A
GETN55              9762
GETN57              9766
GETN60              976A
GETN65              9774
GETN70              977E
GETN75              9788
GETN77              97A2
GETN80              97BC
GETN85              97C0
GETN90              97C2
GETN95              97C6
GETNDATA            97CC
GETNUMA             9728
GETNUMD             9720
GETNUMD9            9722
GETREGA             9A56
GETREGAD            9A64
GETREGD             9A3C
GETSER1             98A4
GETSER2             98A8
GOCMD               8596
GOCMD1              8598
GOCMD1A             858C
GOSET1              8578
GT21                8566
GTCMD               854A
GTHX2               97F2
HECMD               8DF4
HELP4               8E0C
HELP6               8E54
HELP81              8E42
HELP85              8E52
HEX2DEC             8ECE
HISPC               FFFFFFFC
HX2DC               8EDE
HX2DC0              8EE2
HX2DC1              8EEA
HX2DC2              8F04
HX2DC22             8F06
HX2DC3              8F10
HX2DC4              8F18
HX2DC5              8F20
HX2DC57             8F28
HX2DC6              8F2C
IBSR                AE3E
ICC                 AE3A
ICC35               AE50
ICC55               AE66
ICCCC               AF06
ICCCC9              AF1C
IDBCC               AE26
ILINK               AB9E
IM7788              AADA
IM7799              AADE
IMMED               AB26
IMMED45             AB4C
IMMED55             AB80
IMMED65             AB86
IMMED75             AB96
IMOVE               AB9A
IMOVE19             AF64
IMOVEA1             AF3E
IMOVEMFR            AAC6
IMOVEMTR            AAF6
IMOVEP              ADBE
IMOVEP11            ADCE
IMOVEP35            ADEA
IMOVEP66            ADF8
IMOVEQ              AD4E
IMVFSR              AD6E
IMVFUSP             AD7E
IMVT44              AD9C
IMVTCCR             ADAE
IMVTSR              AD8E
IMVTUSP             ADA2
INCHNE              99A8
INFROM              620
INIT                8018
INIT0               8118
INITHRAM            800C
INITVECT            8110
INITVMSG            82EC
INPORT1             62C
INPORT2             634
INPORT3             63C
IQUICK              AD4A
IQUICK21            AF7C
IQUICK31            AF92
IQUICKA             AF6A
ISCC                AE1A
ISETD               AE76
ISETD12             AE7C
ISETS               AE86
ISHIFT              AEA2
ISHIFT13            AEAE
ISHIFT23            AED2
ISHIFT33            AEDE
ISHIFT44            AEE2
ISHIFTM1            AEEC
ISTOP               AB12
KI                  B366
KIEND               B368
LAST                B7EA
LDATA               FFFFFFC4
LF                  A
LINK                1E
LOCVARSZ            10
LONG                66F
M300                A0A2
M340                A0EE
M350                A0FA
M352                A12E
M410                A138
M415                A140
M420                A152
M424                A156
M426                A15A
M428                A164
M430                A16A
M432                A178
M4324               A1A6
M4326               A1AC
M435                A1CA
M437                A1D2
M440                A1E0
MABCD               A246
MABCD55             A282
MABCD9              A254
MACSBUG             81C4
MACSBUG1            81F2
MADD                A2FE
MADD46              A330
MADD56              A33C
MADD58              A34C
MADDA               A3A6
MADDA21             A3B0
MADDI               A358
MADDQ               A3CE
MADDQ25             A40C
MADDX               A410
MADDX5              A446
MAND                A452
MAND77              A486
MAND90              A49C
MAND91              A4AA
MAND97              A4AE
MANDI               A36E
MANDI23             A388
MASL                A500
MB100               A57A
MB105               A592
MB145               A5B4
MB185               A5BA
MB200               A5BE
MBCHG               A570
MBCLR               A5D4
MBRA                A5FA
MBRA23              A614
MBRA27              A622
MBSET               A5C8
MBTST               A5E0
MCHK                A652
MCLR                A66C
MCMMD2              A214
MCMP                A28C
MCMP39              A2E2
MCMP56              A2EA
MCMPM               A67A
MDBCC               A5EC
MDC                 AAB6
MDCMD               8F32
MEMSIZE             46C
MEOR                A4B4
MEOR90              A4D4
MEXG                A6A4
MEXG25              A6C6
MEXG35              A6D0
MEXT                A6DE
MJMP                A9EE
MJMP22              AA0A
MJMP32              AA10
MJMP42              AA14
MLEA                AA1A
MLINK               AA64
MM045               9112
MM05                90F4
MM054               9126
MM056               9132
MM058               9140
MM060               914E
MM064               9154
MM065               915A
MM10                915E
MM11                916E
MM12                9192
MM14                919C
MM16                91A6
MM18                91AE
MM22                91FC
MM24                920A
MM26                9218
MM315               A8C0
MM40                9224
MM50                9248
MM508               A906
MM60                924E
MM70                A92C
MM80                A95A
MM804               A972
MM806               A990
MM825               A9A8
MM90                9254
MM905               9260
MM95                9258
MMA225              A9DA
MMCMD               90E2
MMDI                9048
MMDI22              9052
MMDI23              9054
MMDI26              9094
MMDI27              909E
MMDI29              90B4
MMDI30              90C6
MMDI31              9068
MMDI34              907A
MMDI44              90CA
MMM40               A8C8
MMM44               A732
MMM46               A732
MMM48               A758
MMM50               A8EA
MMM60               A918
MMOVE               A8A6
MMOVEA              A9C2
MMOVEA1             A9BA
MMOVEM              A6F8
MMOVEP              A7F8
MMOVEQ              A85A
MMP344              A82A
MMP348              A83A
MMP368              A856
MMQ20               A874
MORES0              89F4
MORESP              8A0A
MOVEMR              B1FA
MOVEMR11            B20A
MOVEMR33            B212
MOVEMR44            B224
MOVEMR77            B23E
MOVEMR79            B250
MOVEMR88            B252
MOVEMR94            B26A
MOVEMS              B1E6
MOVEMS2             B1F6
MPEA                AA34
MSCC                A562
MSCMD               9266
MSG                 80A8
MSG001              828C
MSG002              8E5C
MSG008              808A
MSG008E             8091
MSG009              8DBA
MSG010              95C6
MSG011              980C
MSG012              9584
MSG013              999C
MSG014              8DCE
MSG017              930C
MSG018              96E8
MSG019              80E0
MSG020              8DDC
MSG021              8098
MSG111              B35C
MSGBR               8650
MSGEOT              8097
MSGT14              B6EA
MSL150              A51E
MSL200              A534
MSL300              A546
MSTOP               AA82
MSWAP               AA42
MTBL                A7E8
MTCLR               9534
MTRAP               AA9A
MTSETUP             9322
MTSTOR0             954C
MTSTOR1             953C
MUNLK               AAAC
N68                 718
NOAUTOLF            9972
NOBR0               865C
NOBR1               8660
NOBR3               8676
NOBR4               8682
NOBRCMD             85AA
NOC                 80
NOCMD               8280
NOTCHR              9004
NULLPADS            618
NUMCON0             8816
NUMCON1             883A
NUMCON2             8846
NUMCON3             885E
NW                  40
NXTBP               8FD2
NXTBP3              8FE6
NXTCHR              8FF2
OFCMD               948A
OFFSET              44C
OPC                 61D
OPCTBL              B572
OPTIONS             4E6
OUT1CR              9822
OUT1CR0             983C
OUT1CRX             9836
OUTBSIZE            50
OUTCH               9978
OUTCH1              9874
OUTCH2              9894
OUTCH3              989A
OUTCHRTS            98A2
OUTP2               9864
OUTP3               986E
OUTPORT1            630
OUTPORT2            638
OUTPORT3            640
OUTPUT              983C
OUTPUT2             9846
OUTPUT20            985C
OUTPUT21            985C
OUTPUT2X            9856
OUTTO               61C
P2PHY               80C4
P2PHY2              80D6
PCOUNTER            E
PDIPORT             644
PENDOP              16
PER3                9386
PER4                9364
PERCMD              935A
PNCA3               8A50
PNMSG011            97FA
PNT2HX              95EA
PNT4HX              95E2
PNT6HX              95DC
PNT8HX              95D4
PNTCLS              94AC
PNTCLS1             94B2
PNTCLS2             94C4
PNTCLSA             949E
PNTCLSB             94A6
PNTCLSD             9494
PNTREG              94D0
PNTREG1             94FA
PNTSREC             8A8A
PNTSRECX            8A84
PNTSRTS             8AAA
PNTZ0               9670
PNTZ1               9672
PNTZ2               967A
PNTZ3               9690
PNTZ4               9686
PNTZ8               9696
PNTZ81              969E
PNTZ9               96A2
PNTZHX              9660
PORTIN1             98B2
PORTIN10            98D2
PORTIN1N            98C4
PORTIN1V            98D6
PORTIN1W            98D8
PORTIN1X            98BE
PPHY                80BC
PRINT3              8FB8
PRINT5              8F76
PRINT7              8F92
PRINT8              8F48
PRINT9              901E
PRINTDI             8F66
PRINTDI5            8F96
PRINTMB             8F5A
PRINTR              946A
PRINTR2             9484
PTRBUFE             1A
PTROP               12
PUM11               89C4
PUM13               89CC
PUNCH5              89BE
PUTADR              8FC0
PUTCHR              9008
PUTHEX              95F2
RAMERR              9558
RAMTEST             9508
READBUF             98DC
REGA7               444
REGNAMES            886A
REGPC               400
REGS                408
REGSR               404
REGTBL              9392
REGUS               448
RETURN              98A6
RETURN5             9468
RL111               A75C
RL114               A76C
RL115               A76E
RL30                A7E0
RL333               A77C
RL444               A788
RL555               A7B2
RL666               A7BE
S2REC               8A38
SAVE                8BFE
SAVEAV4             4D2
SAVEREGS            8A
SAVHEX              9602
SCAN                945A
SCAN2               945C
SCANP6              99CA
SCANPORT            99C2
SCHR                AD66
SCOMMON             AE16
SCREEN1             610
SCREEN2             614
SEMACS              941C
SETA                93C2
SETA7               93D4
SETBIT              A7CC
SETD                93BC
SETM1               9278
SETM3               92A0
SETM5               92BA
SETM6               92BC
SETM7               92DE
SETME               92D2
SETO                948A
SETPC               93C8
SETR                93F6
SETR0               93FE
SETR4               9420
SETR5               9426
SETRN               93EA
SETSR               93CE
SETSR1              942A
SETSR15             9458
SETSS               93DE
SETUS               93E4
SI201               A88A
SI222               A8A4
SIZEBYTE            A898
SIZELONG            A87C
SIZEWORD            A88C
SOLIST              829A
SSA7                53C
START               8146
START11             8164
START1S             8124
SV_29               8C3E
SV_3                805A
SV_31               8D6A
SV_32               9570
SV_33               95B0
SV_378              B6D6
SWAP                8D1E
SWAP1               8D2C
SWAP99              8D4C
SWAPEND             8D54
SWAPIN              8CF8
SWAPIN1             8D34
SWAPOUT             8D0E
SWAPOUT1            8D44
SYNTAX              80B6
SYSTACK             77C
T100                B67A
T400                B690
T44                 8912
T448                891E
T449                8926
T450                B6AE
T500                B6C2
T600                B6FC
T700                B702
TAPENULS            64A
TBL                 B368
TBLE                B572
TBLKEYS             9D40
TBLOPC              9D8C
TBLOPCE             A090
TCMD15              8510
TCMDHOT             850E
TD07                8880
TD09                8892
TD1                 889E
TD25                88D2
TD27                88CA
TD39                88F6
TD4                 88F8
TD9                 892A
TDATA               0
TDCC                8932
TDCC9               8982
TDCC91              898E
TDISPLY             8876
TEMP                4D6
TISOK               8C84
TLENGTH             C
TLSPEC              B
TMCHARS             4EA
TNB                 A
TRACE               8C2C
TRACE01             8C8E
TRACE03             8CAA
TRACE08             8CA2
TRACE16             8C58
TRACE2              8538
TRACE39             8CB8
TRACECNT            4DA
TRACEON             4DE
TRAP14              B672
TRCMD               84FA
TTCMD               8516
UNSTACK             8CCE
UNTRACE             8CC0
V2                  8008
VECT                8314
VECTBE              8042
VECTI               82F6
VECTI2              8306
VERSION             4
WALK0               950E
WALK1               951C
WALK3               950C
WHAT                809E
WHAT93              80A2
X                   AAC6
XBASE               9A36
XONOFF              4E6
_00000000           99C0
