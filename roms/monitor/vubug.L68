00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 08/04/2021 10:12:17

00000000                             1  
00000000                             2  ;       NOTES   : PORTED TO PC BY DAVE GOODMAN
00000000                             3  ;               : PORTED TO RAYMATIC 68K BOARD BY RUSSELL G. BROWN
00000000                             4  ;       ASSEMBLE: mas68k -l vubug.68k
00000000                             5  ;               : ASSEMBLER WILL TAKE FILE vubug.68k AND
00000000                             6  ;               : WILL CREATE vubug.o, vubug.l
00000000                             7  ;       VER 3.0 : VUBUG VER 3.0 PORTEd TO PC FOR ASSEMBLE USING a68K 9/84
00000000                             8  ;       VER 3.1 : VUBUG VER 3.1 FIXED FOR VU68K BOARD 10/86
00000000                             9  ;       VER 4.0 : VUBUG VER 4.0 PORTED TO RAYMATIC 68K BOARD 4/88
00000000                            10  ;*******************************************
00000000                            11  ;*                                         *
00000000                            12  ;********         V U B U G         ********
00000000                            13  ;*                                         *
00000000                            14  ;* Copyright (C) 1983, 1988                *
00000000                            15  ;*               Vanderbilt Univ.          *
00000000                            16  ;*               Comp. Sci. dept.          *
00000000                            17  ;*               PO Box 1679               *
00000000                            18  ;*               Station B                 *
00000000                            19  ;*               Nashville, Tenn.          *
00000000                            20  ;*                          37235          *
00000000                            21  ;*                                         *
00000000                            22  ;*       author:                           *
00000000                            23  ;*              Edward M. Carter           *
00000000                            24  ;*                                         *
00000000                            25  ;*******************************************
00000000                            26  ;*                                         *
00000000                            27  ;* This software was prepared for distri-  *
00000000                            28  ;* bution by Russell G. Brown.  Please     *
00000000                            29  ;* note that it is being distributed at    *
00000000                            30  ;* the request of several readers of the   *
00000000                            31  ;* usenet newsgroup comp.sys.m68k.  It has *
00000000                            32  ;* no warranty of any sort, at all.  I     *
00000000                            33  ;* think that the code is fairly self      *
00000000                            34  ;* explanatory.  Good luck in modifying    *
00000000                            35  ;* it to work on whatever application you  *
00000000                            36  ;* may have.                               *
00000000                            37  ;*******************************************
00000000                            38  ;*                                         *
00000000                            39  ;* although the information contained here-*
00000000                            40  ;* in, as well as any information provided *
00000000                            41  ;* relative thereto, has been carefully re-*
00000000                            42  ;* viewed and is believed correct, Vander- *
00000000                            43  ;* bilt University assumes no liability    *
00000000                            44  ;* arising out of its application or use,  *
00000000                            45  ;* neither does it convey any license under*
00000000                            46  ;* its patent rights nor the rights of     *
00000000                            47  ;* others.                                 *
00000000                            48  ;*                                         *
00000000                            49  ;*******************************************
00000000                            50  ;*                                         *
00000000                            51  ;* The commands supported are as follows:  *
00000000                            52  ;*                                         *
00000000                            53  ;*         m - examine/update memory       *
00000000                            54  ;*         l - load program from host      *
00000000                            55  ;*         u - load program from terminal  *
00000000                            56  ;*         d - display blocks of memory    *
00000000                            57  ;*         t - single-step a program       *
00000000                            58  ;*         s - single-step                 *
00000000                            59  ;*         g - start a user mode program   *
00000000                            60  ;*         <cr> - short g command          *
00000000                            61  ;*         b - set/remove breakpoints      *
00000000                            62  ;*         r - examine/update registers    *
00000000                            63  ;*         p - prototype commands          *
00000000                            64  ;*         e - terminal emulator mode      *
00000000                            65  ;*         c - copy memory blocks          *
00000000                            66  ;*         x - print help messages         *
00000000                            67  ;*                                         *
00000000                            68  ;* Sub-command under each of these commands*
00000000                            69  ;* are shown in the source code for each   *
00000000                            70  ;* command.                                *
00000000                            71  ;*                                         *
00000000                            72  ;*******************************************
00000000                            73  ;
00000000                            74  ; Queue structure
00000000                            75  ;
00000000                            76          org     $0
00000000  =00000000                 77  head    EQU       $0000
00000000  =00000002                 78  tail    EQU       $0002
00000000  =00000004                 79  count   EQU       $0004
00000000  =00000006                 80  queue   EQU       $0006
00000000                            81  ;
00000000                            82  ; Breakpoint structure
00000000                            83  ;
00000000                            84          org     $0
00000000  =00000000                 85  instr   EQU       $0000
00000000  =00000002                 86  iloc    EQU       $0002
00000000                            87  ;
00000000                            88  ; The following is the exception vector
00000000                            89  ; table for the monitor. There should be
00000000                            90  ; no further "org"s to address contained
00000000                            91  ; herein as this will destroy the vector
00000000                            92  ; for iterrupts, breakpoints...
00000000                            93  ;
00000000                            94          org     $0                      ;Reset Vector
Line 95 ERROR: Undefined symbol
00000000= 0019F5B8                  95          dc.l    stack                   ;system stack
00000004= 000000D2                  96          dc.l    start                   ;initial pc
00000008= 00000E08                  97          dc.l    abhlr                   ;bus error
0000000C= 00000E08                  98          dc.l    abhlr                   ;address error
00000010= 00000CCA                  99          dc.l    bhlr                    ;illegal instruction vector
00000014= 00000C9C                 100          dc.l    ghlr                    ;zero divide
00000018= 00000C9C                 101          dc.l    ghlr                    ;chk
0000001C= 00000C9C                 102          dc.l    ghlr                    ;trapv
00000020= 00000DE8                 103          dc.l    phlr                    ;privileged instruction trap
00000024= 00000D3C                 104          dc.l    thlr                    ;trace handler
00000028= 00000CCA                 105          dc.l    bhlr                    ;emulator trap 1010
0000002C= 00000CCA                 106          dc.l    bhlr                    ;emulator trap 1111
0000003C                           107          org     $3c
0000003C= 00000C9C                 108          dc.l    ghlr                    ;uninitialized iterrupt
00000060                           109          org     $60
00000060= 00000C9C                 110          dc.l    ghlr                    ;spurious iterrupt
00000064= 00000336                 111          dc.l    lpint                   ;download-line vector
00000068= 00000278                 112          dc.l    inint                   ;terminal vector
0000006C= 00004028                 113          dc.l    uav3                    ;user auto-vectors
00000070= 0000402C                 114          dc.l    uav4
00000074= 00004030                 115          dc.l    uav5
00000078= 00004034                 116          dc.l    uav6
0000007C= 00004038                 117          dc.l    uav7
00000080= 00000E2A                 118          dc.l    texit                   ;exit
00000084= 00000E48                 119          dc.l    tgetb                   ;getb
00000088= 00000E52                 120          dc.l    tgetw                   ;getw
0000008C= 00000E5C                 121          dc.l    tgetl                   ;getl
00000090= 00000E66                 122          dc.l    twrtb                   ;wrtb
00000094= 00000E6C                 123          dc.l    twrtw                   ;wrtw
00000098= 00000E72                 124          dc.l    twrtl                   ;wrtl
0000009C= 00000E78                 125          dc.l    tgetc                   ;getc
000000A0= 00000E7E                 126          dc.l    twrts                   ;wrts
000000A4= 00000E84                 127          dc.l    twrtc                   ;wrtc
000000A8= 00000E8A                 128          dc.l    tcrlf                   ;crlf
000000AC= 00004000                 129  utrpb:  dc.l    utrapb                  ;user trap vectors
000000B0= 00004004                 130  utrpc:  dc.l    utrapc
000000B4= 00004008                 131  utrpd:  dc.l    utrapd
000000B8= 0000400C                 132  utrpe:  dc.l    utrape
000000BC= 00004010                 133  utrpf:  dc.l    utrapf
000000C0                           134  ;
000000C0                           135  ;************************************
000000C0                           136  ;*                                  *
000000C0                           137  ;*       Monitor data area          *
000000C0                           138  ;*                                  *
000000C0                           139  ;************************************
000000C0                           140  ;
00004000                           141          org     $4000
00004000= 00000000                 142  utrapb: dc.l    $00000000
00004004= 00000000                 143  utrapc: dc.l    $00000000
00004008= 00000000                 144  utrapd: dc.l    $00000000
0000400C= 00000000                 145  utrape: dc.l    $00000000
00004010= 00000000                 146  utrapf: dc.l    $00000000
00004014                           147  
00004014= 00000000                 148  userv1: dc.l    $00000000
00004018= 00000000                 149  userv2: dc.l    $00000000
0000401C= 00000000                 150  userv3: dc.l    $00000000
00004020= 00000000                 151  userv4: dc.l    $00000000
00004024= 00000000                 152  userv5: dc.l    $00000000
00004028                           153  
00004028= 00000000                 154  uav3:   dc.l    $00000000
0000402C= 00000000                 155  uav4:   dc.l    $00000000
00004030= 00000000                 156  uav5:   dc.l    $00000000
00004034= 00000000                 157  uav6:   dc.l    $00000000
00004038= 00000000                 158  uav7:   dc.l    $00000000
0000403C                           159  
0000403C= 0000 0000 0000 0...      160  sarea:  dcb.w   $80,$0000               ;system stack
Line 161 ERROR: Undefined symbol
0000413C                           161  stack   EQU       .
0000413C= 0000 0000 0000 0...      162  bktab:  dcb.w   $0a,$0000               ;breakpoint table
00004150= 0000                     163  _sr:    dc.w    $0000                   ;register save area
00004152= 00000000                 164  _pc:    dc.l    $00000000
00004156= 00000000                 165  dr0:    dc.l    $00000000
0000415A= 00000000                 166  dr1:    dc.l    $00000000
0000415E= 00000000                 167  dr2:    dc.l    $00000000
00004162= 00000000                 168  dr3:    dc.l    $00000000
00004166= 00000000                 169  dr4:    dc.l    $00000000
0000416A= 00000000                 170  dr5:    dc.l    $00000000
0000416E= 00000000                 171  dr6:    dc.l    $00000000
00004172= 00000000                 172  dr7:    dc.l    $00000000
00004176= 00000000                 173  ar0:    dc.l    $00000000
0000417A= 00000000                 174  ar1:    dc.l    $00000000
0000417E= 00000000                 175  ar2:    dc.l    $00000000
00004182= 00000000                 176  ar3:    dc.l    $00000000
00004186= 00000000                 177  ar4:    dc.l    $00000000
0000418A= 00000000                 178  ar5:    dc.l    $00000000
0000418E= 00000000                 179  ar6:    dc.l    $00000000
00004192= 00000000                 180  ar7:    dc.l    $00000000
00004196= 0000 0000 0000           181  ptab:   dcb.w   $3,0000                 ;prototype table
0000419C= 0000                     182  rexam:  dc.w    $0000                   ;register examination pointer
0000419E= 0000                     183  exam:   dc.w    $0000                   ;memory examination pointer
000041A0= 0000                     184  t1:     dc.w    $0000                   ;temporary work area
000041A2= 0000                     185  t2:     dc.w    $0000
000041A4= 0000                     186  t3:     dc.w    $0000
000041A6= 0000                     187  t4:     dc.w    $0000
000041A8= 0000                     188  t5:     dc.w    $0000
000041AA= 0000                     189  ctrls:  dc.w    $0000                   ;ctrl-s,ctrl-q flag
Line 190 ERROR: Undefined symbol
000041AC                           190  bkptf   EQU       .-1                     ;breakpoint flag
000041AC= 0000 0000 0000 0...      191  lbuff:  dcb.w   $0b,0000                ;load buffer
000041C2= 0000 0000 0000 0...      192  ibuff:  dcb.w   $0b,0000                ;terminal buffer
000041D8= 0000 0000 0000 0...      193  users:  dcb.w   $80,0000                ;users stack area
Line 194 ERROR: Undefined symbol
000042D8                           194  ustck   EQU       .
000042D8= 0000                     195  aend:   dc.w    $0000
000042DA= 0000                     196  siz:    dc.w    $0000
000042DC= 0000                     197  writm:  dc.w    $0000
000042DE= 0000                     198  echo:   dc.w    $0000                   ;terminal port echo flag
000042E0                           199  ;
000042E0                           200  ;Terminal port
000042E0                           201  ;
000042E0  =0000C000                202  ttyst   EQU       $0000c000
000042E0  =0000C002                203  ttyd    EQU       $0000c002
000042E0                           204  ;
000042E0                           205  ;Load port
000042E0                           206  ;
000042E0  =0000A000                207  lpst    EQU       $0000a000
000042E0  =0000A002                208  lpd     EQU       $0000a002
000042E0                           209  ;+++++++++++++++++++++++++++++++++++++++++
000042E0                           210  ;                                        +
000042E0                           211  ;            Start of monitor            +
000042E0                           212  ;                                        +
000042E0                           213  ;+++++++++++++++++++++++++++++++++++++++++
000000C0                           214          org     $C0
Line 215 ERROR: Invalid opcode
000000C0                           215          csc     EQU       $1b45           ;clear screen (h-19)
Line 216 ERROR: Invalid opcode
000000C0                           216          cr      EQU       $0d
Line 217 ERROR: Invalid opcode
000000C0                           217          lf      EQU       $0a
Line 218 ERROR: Invalid opcode
000000C0                           218          nul     EQU       $00
Line 219 ERROR: Undefined symbol
000000C0= F5B8                     219  howdy:  dc.w    csc
Line 220 ERROR: Invalid opcode
000000C2                           220          .ascii  "M68000 Monitor VUBUG "
Line 221 ERROR: Invalid opcode
000000C2                           221          .ascii  "Version 4.0 11 August, 1988"
Line 222 ERROR: Undefined symbol
000000C2= B8 B8 B8 B8              222  rnn0:   dc.b    cr,lf,lf,nul
Line 223 ERROR: Invalid opcode
000000C6                           223  bcomm:  .ascii  ": Bad Command"
Line 224 ERROR: Undefined symbol
000000C6= B8 B8 B8                 224          dc.b    cr,lf,nul
000000C9                           225  ;
000000C9                           226  ; These are seven user interrupt vectors
000000C9                           227  ; which must remain at address $0100.
000000C9                           228  ; Please ensure that they do
000000C9                           229  ;
Line 230 ERROR: Invalid syntax
000000CA=                          230  vect1:  dc.l    $userv1
Line 231 ERROR: Invalid syntax
000000CA=                          231  vect2:  dc.l    $userv2
Line 232 ERROR: Invalid syntax
000000CA=                          232  vect3:  dc.l    $userv3
Line 233 ERROR: Invalid syntax
000000CA=                          233  vect4:  dc.l    $userv4
Line 234 ERROR: Invalid syntax
000000CA=                          234  vect5:  dc.l    $userv5
000000CA= 2000                     235  ssri:   dc.w    $2000           ;supervisor SR
000000CC= 2700                     236  ssrn:   dc.w    $2700           ;same w/o interrupts
Line 237 ERROR: Undefined symbol
000000CE= B8 B8                    237  prmp:   dc.b    cr,lf
000000D0= 21                       238          dc.b    '!'             ; command promdt
Line 239 ERROR: Undefined symbol
000000D1= B8                       239          dc.b    nul
000000D2  13FC 0003 0000C000       240  start:  move.b  #$03,ttyst              ;setup ports
000000DA  13FC 0003 0000A000       241          move.b  #$03,lpst
000000E2  13FC 0015 0000C000       242          move.b  #$15,ttyst
000000EA  13FC 0015 0000A000       243          move.b  #$15,lpst
000000F2  303C FFFF                244          move.w  #$ffff,d0               ;load $ffff for first memory test
000000F6  307C 4000                245          movea.w #$4000,a0               ;start at $4000
000000FA  343C 1FFF                246          move.w  #$1fff,d2               ;$2000 words of ram
000000FE  3080                     247  mt1:    move.w  d0,(a0)                 ;store value
00000100  3218                     248          move.w  (a0)+,d1                ;load it back
00000102  B240                     249          cmp.w   d0,d1
00000104  6600 0022                250          bne     memerr                  ;if not the same, memory error.
00000108  51CA FFF4                251          dbf     d2,mt1
0000010C  303C 0000                252          move.w  #$0000,d0               ;load $0000 for second mem test
00000110  307C 4000                253          movea.w #$4000,a0
00000114  343C 1FFF                254          move.w  #$1fff,d2
00000118  3080                     255  mt2:    move.w  d0,(a0)
0000011A  3218                     256          move.w  (a0)+,d1
0000011C  6600 000A                257          bne     memerr                  ;if not zero, memory error.
00000120  51CA FFF6                258          dbf     d2,mt2
00000124  6000 0014                259          bra     gwan
Line 260 ERROR: Undefined symbol
00000128  41F9 004DBD16            260  memerr: lea     memnot,a0               ;RAM doesn't work right.
0000012E  6100 00E8                261          bsr     writs
00000132  6000 0006                262          bra     gwan
Line 263 ERROR: Invalid opcode
00000136                           263  memnot: .ascii  "RAM ERROR!!!!"
Line 264 ERROR: Undefined symbol
00000136= B8 B8 B8                 264          dc.b    cr,lf,nul
0000013A  43F8 41C2                265  gwan:   lea     ibuff,a1                ;setup buffers
0000013E  337C 0000 0000           266          move.w  #$0000,head(a1)
00000144  337C FFFF 0002           267          move.w  #$ffff,tail(a1)
0000014A  337C 0000 0004           268          move.w  #$0000,count(a1)
00000150  43F8 41AC                269          lea     lbuff,a1
00000154  337C 0000 0000           270          move.w  #$0,head(a1)            ;set queue for lp
0000015A  337C FFFF 0002           271          move.w  #$ffff,tail(a1)
00000160  337C 0000 0004           272          move.w  #0,count(a1)
00000166  31FC 0000 419E           273          move.w  #0,exam                 ;initialize control variables
0000016C  11FC 0000 41AA           274          move.b  #0,ctrls
Line 275 ERROR: Undefined symbol
00000172  13FC 0000 005455B8       275          move.b  #0,bkptf
0000017A  7004                     276          moveq   #$4,d0                  ;clear breakpoint table
0000017C  43F8 413C                277          lea     bktab,a1
00000180  22FC 00000000            278  slp:    move.l  #0,(a1)+
00000186  51C8 FFF8                279          dbf     d0,slp
0000018A  31FC 0000 4150           280          move.w  #0,_sr                  ;clear register save area
00000190  7010                     281          move.l  #$10,d0
00000192  41F8 4152                282          lea     _pc,a0
00000196  20FC 00000000            283  slp1:   move.l  #0,(a0)+
0000019C  51C8 FFF8                284          dbf     d0,slp1
Line 285 ERROR: Undefined symbol
000001A0  41F9 004DBD16            285          lea     ustck,a0                ;set user stack pointer
000001A6  21C8 4192                286          move.l  a0,ar7
000001AA  41F8 403C                287          lea     sarea,a0                ;clear system stack
000001AE  703F                     288          moveq   #$3f,d0
000001B0  20FC 00000000            289  slp2:   move.l  #0,(a0)+
000001B6  51C8 FFF8                290          dbf     d0,slp2
000001BA  46F8 00CA                291  done:   move.w  ssri,sr                 ;enable interrupts at CPU
000001BE  41F8 00C0                292          lea     howdy,a0                ;say hello
000001C2  6100 0054                293          bsr     writs
000001C6  13FC 0095 0000C000       294          move.b  #$95,ttyst              ;enable interrupts from ports
000001CE  13FC 0095 0000A000       295          move.b  #$95,lpst
000001D6  08F8 0000 42DE           296          bset    #$00,echo               ;turn on terminal echo
000001DC  6000 02C2                297          bra     comm                    ;enter command loop
000001E0                           298  ;
000001E0                           299  ; Generalized write facility writes 1 byte
000001E0                           300  ; passed in d0 to tty.
000001E0                           301  ;
000001E0  0838 0000 41AA           302  writ:   btst    #0,ctrls                ;Is ctrl-s active
000001E6  6700 0008                303          beq     cwrit                   ;no, so write it
000001EA  4E72 2000                304          stop    #$2000                  ;yes, so wait on next character
000001EE  60F0                     305          bra     writ                    ;when awakened try to echo
000001F0  13C0 0000C002            306  cwrit:  move.b  d0,ttyd                 ;write the character to port
000001F6  1039 0000C000            307  writa:  move.b  ttyst,d0                ;sample control register till done
000001FC  0800 0001                308          btst    #$1,d0
00000200  67F4                     309          beq     writa
00000202  4E75                     310          rts
00000204                           311  ;
00000204                           312  ; Generalized write facility writes 1 byte
00000204                           313  ; passed in d0 to serial port.
00000204                           314  ;
00000204  13C0 0000A002            315  writu:  move.b  d0,lpd                  ;write it
0000020A  1039 0000A000            316  writp:  move.b  lpst,d0                 ;wait for completion
00000210  0800 0001                317          btst    #$1,d0
00000214  67F4                     318          beq     writp
00000216  4E75                     319          rts
00000218                           320  ;
00000218                           321  ; Generalized routine to write a string which
00000218                           322  ; must terminate in a null
00000218                           323  ;
00000218  1018                     324  writs:  move.b  (a0)+,d0                ;a0 is address of string
0000021A  6700 0006                325          beq     dwrts
0000021E  61C0                     326          bsr     writ
00000220  60F6                     327          bra     writs
00000222  4E75                     328  dwrts:  rts
00000224                           329  ;
00000224                           330  ;Generalized routine to write
00000224                           331  ;a word, byte or long word.
00000224                           332  ;
00000224  31FC 0001 41A0           333  writb:  move.w  #$1,t1                  ;t1 is the number of bytes
0000022A  6000 0012                334          bra     wr
0000022E  31FC 0003 41A0           335  writw:  move.w  #$3,t1
00000234  6000 0008                336          bra     wr
00000238  31FC 0007 41A0           337  writl:  move.w  #$7,t1
Line 338 ERROR: Invalid addressing mode
0000023E                           338  wr:     movem.l #$6082,-(a7)            ;save registers d1,d2,a0,a6
0000023E  3438 41A0                339          move.w  t1,d2                   ;set count
00000242  11FC 0000 41A9           340          move.b  #$00,t5+1               ;set a null at end
00000248  4DF8 41A9                341          lea     t5+1,a6                 ;use temps as a stack
0000024C  1200                     342  alp:    move.b  d0,d1                   ;make each hex digit a
0000024E  C23C 000F                343          and.b   #$0f,d1                 ;writable ascii byte
00000252  B23C 000A                344          cmp.b   #$0a,d1                 ;check for abcdef
00000256  6D00 000E                345          blt     or3
0000025A  823C 0040                346          or.b    #$40,d1
0000025E  0401 0009                347          sub.b   #$09,d1
00000262  6000 0006                348          bra     m1
00000266  823C 0030                349  or3:    or.b    #$30,d1                 ;set high-order bits
0000026A  1D01                     350  m1:     move.b  d1,-(a6)                ;put on stack
0000026C  E888                     351          lsr.l   #$4,d0                  ;get next hex digit
0000026E  51CA FFDC                352          dbf     d2,alp
00000272  304E                     353          movea.w a6,a0                   ;write the stack with writs
00000274  61A2                     354          bsr     writs
Line 355 ERROR: Invalid syntax
00000276                           355          movem.l (a7)+,#$4106            ;restore registers d1,d2,a0,a6
00000276  4E75                     356          rts
00000278                           357  ;
00000278                           358  ; Interrupt handler for the keyboard
00000278                           359  ; interrupt. It simply stashes the input
00000278                           360  ; character in a buffer pointed to by a1.
00000278                           361  ;
00000278  46F8 00CC                362  inint:  move.w  ssrn,sr                 ;disable interrupts
Line 363 ERROR: Invalid addressing mode
0000027C                           363          movem.l #$e060,-(a7)            ;save registers d0,d1,d2,a1,a2
0000027C  1239 0000C002            364          move.b  ttyd,d1                 ;get the character
00000282  0201 007F                365          andi.b  #$7f,d1                 ;mask out the parity, if any
Line 366 ERROR: Undefined symbol
00000286  0839 0003 005455C8       366          btst    #$3,bkptf               ;In emulator mode ?
0000028E  6700 003A                367          beq     incmp                   ;No, so continue
00000292  B23C 000C                368          cmp.b   #$0c,d1                 ;ctrl-l ?
00000296  6700 000A                369          beq     inld                    ;yes, so load
0000029A  B23C 0018                370          cmp.b   #$18,d1                 ;No, is it a ctrl-x ?
0000029E  6600 0020                371          bne     inwru                   ;No, so write it
Line 372 ERROR: Undefined symbol
000002A2  08B9 0003 005455C4       372  inld:   bclr    #$3,bkptf               ;Exit emulator mode
000002AA  43F9 000008C0            373          lea     emudn,a1                ;set up return
000002B0  2F49 0016                374          move.l  a1,$16(a7)              ;put return deep in stack
000002B4  B23C 000C                375          cmp.b   #$0c,d1                 ;ctrl-l ?
000002B8  6600 007A                376          bne     out                     ;No
000002BC  6000 000C                377          bra     incmp                   ;check for ctrl-s or q
000002C0  1001                     378  inwru:  move.b  d1,d0                   ;write to host
000002C2  6100 FF40                379          bsr     writu
000002C6  6000 006C                380          bra     out
000002CA  B23C 0003                381  incmp:  cmp.b   #$03,d1                 ;check for ctrl-c
000002CE  6700 00F2                382          beq     rstrt
000002D2  B23C 0013                383          cmp.b   #$13,d1                 ;check for ctrl-s
000002D6  6600 000C                384          bne     ctrlq
000002DA  11FC 0001 41AA           385          move.b  #$1,ctrls
000002E0  6000 0052                386          bra     out
000002E4  B23C 0011                387  ctrlq:  cmp.b   #$11,d1                 ;check for ctrl-q
000002E8  6600 000C                388          bne     c1
000002EC  11FC 0000 41AA           389          move.b  #$0,ctrls
000002F2  6000 0040                390          bra     out
000002F6  43F8 41C2                391  c1:     lea     ibuff,a1                ;get buffer address
000002FA  0C29 0010 0004           392          cmpi.b  #$10,count(a1)          ;overflow ?
00000300  6D00 0006                393          blt     cont                    ;No
00000304  6000 002E                394          bra     out                     ;Yes, so ignore character
00000308  5229 0002                395  cont:   addq.b  #$1,tail(a1)            ;add chacter to buffer
0000030C  5229 0004                396          addq.b  #$1,count(a1)           ;add 1 to count
00000310  0229 000F 0002           397          andi.b  #$0f,tail(a1)           ;modulo-16
00000316  3429 0002                398          move.w  tail(a1),d2             ;get offset of new entry
0000031A  E05A                     399          ror.w   #$08,d2                 ;in lower 8 bits of d2
0000031C  0242 00FF                400          andi.w  #$ff,d2                 ;mask off what's left
00000320  43E9 0006                401          lea     queue(a1),a1            ;get address of queue
Line 402 ERROR: Invalid syntax
00000324                           402          move.b  d1,$0(a1,d2:w)          ;move byte into buffer
00000324  0838 0000 42DE           403          btst    #$00,echo               ;is the echo turned on?
0000032A  6700 0008                404          beq     out                     ;if not, skip the echo,
0000032E  1001                     405          move.b  d1,d0                   ;else setup for echo
00000330  6100 FEAE                406          bsr     writ
Line 407 ERROR: Invalid syntax
00000334                           407  out:    movem.l (a7)+,#$0607            ;reset registers d0,d1,a1,a2
00000334  4E73                     408          rte
00000336                           409  ;
00000336                           410  ; Interrupt handler for the load port.
00000336                           411  ; It stashes the character in the buffer
00000336                           412  ; pointed to by a1.
00000336                           413  ;
00000336  46F8 00CC                414  lpint:  move.w  ssrn,sr                 ;same as above but less complex
Line 415 ERROR: Invalid addressing mode
0000033A                           415          movem.l #$e060,-(a7)            ;registers d0,d1,d2,a1,a2
0000033A  1239 0000A002            416          move.b  lpd,d1
00000340  0201 007F                417          andi.b  #$7f,d1
Line 418 ERROR: Undefined symbol
00000344  0839 0003 005455B8       418          btst    #$3,bkptf
0000034C  6700 000C                419          beq     lplea
00000350  1001                     420          move.b  d1,d0                   ;echo for emulator mode
00000352  6100 FE8C                421          bsr     writ
00000356  6000 002E                422          bra     lout
0000035A  43F8 41AC                423  lplea:  lea     lbuff,a1                ;queue a character
0000035E  0C29 0010 0004           424          cmpi.b  #$10,count(a1)
00000364  6D00 0004                425          blt     lcont
00000368  60CA                     426          bra     out
0000036A  5229 0002                427  lcont:  addq.b  #$1,tail(a1)
0000036E  5229 0004                428          addq.b  #$1,count(a1)
00000372  0229 000F 0002           429          andi.b  #$0f,tail(a1)
00000378  3429 0002                430          move.w  tail(a1),d2
0000037C  E05A                     431          ror.w   #$08,d2
0000037E  0242 00FF                432          andi.w  #$ff,d2
00000382  43E9 0006                433          lea     queue(a1),a1
Line 434 ERROR: Invalid syntax
00000386                           434          move.b  d1,$0(a1,d2:w)
Line 435 ERROR: Invalid syntax
00000386                           435  lout:   movem.l (a7)+,#$0607            ;regs d0,d1,d2,a1,a2
00000386  4E73                     436          rte
00000388                           437  ;
00000388                           438  ; Lgch - get a character from the serial port
00000388                           439  ; queue. If none available then wait for one
00000388                           440  ;
00000388                           441  ;
Line 442 ERROR: Invalid addressing mode
00000388                           442  lgch:   movem.l #$2060,-(a7)            ;save registers d2,a1,a2
00000388  007C 0700                443  lagn:   ori.w   #$0700,sr               ;diable interrupts
0000038C  43F8 41AC                444          lea     lbuff,a1                ;point at buffer
00000390  31E9 0004 41A0           445          move.w  count(a1),t1            ;see if there is a cahracter
00000396  6700 0024                446          beq     lwait                   ;No, so wait
0000039A  3429 0000                447          move.w  head(a1),d2             ;Yes, find it and update
0000039E  E05A                     448          ror.w   #$08,d2
000003A0  0242 00FF                449          andi.w  #$00ff,d2
000003A4  5229 0000                450          addq.b  #$1,head(a1)
000003A8  5329 0004                451          subq.b  #$1,count(a1)
000003AC  0229 000F 0000           452          andi.b  #$0f,head(a1)
000003B2  43E9 0006                453          lea     queue(a1),a1            ;Return character
Line 454 ERROR: Invalid syntax
000003B6                           454          move.b  $0(a1,d2:w),d0
000003B6  027C F8FF                455          andi.w  #$f8ff,sr               ;enable interrupts and
Line 456 ERROR: Invalid syntax
000003BA                           456          movem.l (a7)+,#$0604            ;regs d2,a1/a2
000003BA  4E75                     457          rts
000003BC  4E72 2000                458  lwait:  stop    #$2000
000003C0  60C6                     459          bra     lagn
000003C2                           460  ;
000003C2                           461  ; Rstrt - restart from control c
000003C2                           462  ;
Line 463 ERROR: Invalid syntax
000003C2                           463  rstrt:  movem.l (a7)+,#$0603            ;rest regs d0,d1,a1,a2 frm intrpt hndlr
Line 464 ERROR: Invalid addressing mode
000003C2                           464          movem.l #$ffff,dr0              ;save registers d0-a7
000003C2  4E68                     465          move.l  usp,a0                  ;save user stack pointer
000003C4  21C8 4192                466          move.l  a0,ar7
000003C8  31DF 4150                467          move.w  (a7)+,_sr               ;save status register from stack
000003CC  21DF 4152                468          move.l  (a7)+,_pc               ;save program counter from stack
000003D0  4879 000004A0            469          pea     comm                    ;fake a return to command loop
000003D6  3F38 00CA                470          move.w  ssri,-(a7)              ;fake a new status register
000003DA  4E73                     471          rte
000003DC                           472  ;
000003DC                           473  ; Getch - get a character from the input
000003DC                           474  ; queue. If none available then wait for it
000003DC                           475  ;
Line 476 ERROR: Invalid addressing mode
000003DC                           476  getch:  movem.l #$2060,-(a7)            ;same as lgch above d2,a1,a2
000003DC  007C 0700                477  tryag:  ori.w   #$0700,sr
000003E0  43F8 41C2                478          lea     ibuff,a1
000003E4  31E9 0004 41A0           479          move.w  count(a1),t1
000003EA  6700 0022                480          beq     wait
000003EE  7000                     481          moveq   #$0,d0
Line 482 ERROR: Invalid addressing mode
000003F0                           482          movea.w head(a1),d2
000003F0  E05A                     483          ror.w   #$08,d2
000003F2  0242 00FF                484          andi.w  #$00ff,d2
000003F6  5229 0000                485          addq.b  #$1,head(a1)
000003FA  5329 0004                486          subq.b  #$1,count(a1)
000003FE  0229 000F 0000           487          andi.b  #$0f,head(a1)
00000404  43E9 0006                488          lea     queue(a1),a1
Line 489 ERROR: Invalid syntax
00000408                           489          move.b  $0(a1,d2:w),d0
00000408  027C F8FF                490          andi.w  #$f8ff,sr
Line 491 ERROR: Invalid syntax
0000040C                           491          movem.l (a7)+,#$0604            ;regs d2,a1,a2
0000040C  4E75                     492          rts
0000040E  4E72 2000                493  wait:   stop    #$2000
00000412  60C8                     494          bra     tryag
00000414                           495  ;
00000414                           496  ; CRLF - write a carriage return and
00000414                           497  ; line feed.
00000414                           498  ;
Line 499 ERROR: Undefined symbol
00000414= B8 B8 B8 B8              499  cf:     dc.b    cr,lf,nul,nul
00000418  41F8 0414                500  crlf:   lea     cf,a0
0000041C  6100 FDFA                501          bsr     writs
00000420  4E75                     502          rts
00000422                           503  ;
00000422                           504  ; Generalized number fetcher
00000422                           505  ;
00000422  31FC 0001 41A0           506  getb:   move.w  #$1,t1                  ;t1 is byte count
00000428  6000 0012                507          bra     gb
0000042C  31FC 0003 41A0           508  getw:   move.w  #$3,t1
00000432  6000 0008                509          bra     gb
00000436  31FC 0007 41A0           510  getl:   move.w  #$7,t1
Line 511 ERROR: Invalid addressing mode
0000043C                           511  gb:     movem.l #$6000,-(a7)            ;save registers d1,d2
0000043C  3438 41A0                512          move.w  t1,d2
00000440  7200                     513          moveq   #$0,d1
00000442  4E90                     514  blp:    jsr     (a0)                    ;a0 is address of which..
00000444                           515                                          ;routine to use for getting, i.e.
00000444                           516                                          ;serial or terminal port
00000444  B03C 003A                517          cmp.b   #$3a,d0                 ;check for abcdef
00000448  6D00 0006                518          blt     n1
0000044C  0600 0009                519          add.b   #$09,d0
00000450  C03C 000F                520  n1:     and.b   #$0f,d0
00000454  E981                     521          asl.l   #$4,d1                  ;place in next hex didgit
00000456  8200                     522          or.b    d0,d1
00000458  51CA FFE8                523          dbf     d2,blp
0000045C  2001                     524          move.l  d1,d0                   ;setup return in d0
Line 525 ERROR: Invalid syntax
0000045E                           525          movem.l (a7)+,#$0006            ;restore registers d1,d2
0000045E  4E75                     526          rts
00000460                           527  ;
00000460                           528  ; command interpreter
00000460                           529  ;
00000460= 4D00                     530  ctab:   dc.w    $4d00           ;m - memory update
00000462= 0566                     531          dc.w    mem
00000464= 4C00                     532          dc.w    $4c00           ;l - load from host (S-format)
00000466= 0766                     533          dc.w    load
00000468= 0C00                     534          dc.w    $0c00           ;ctrl-l - load from host (S-format)
0000046A= 0782                     535          dc.w    lnoof
0000046C= 5500                     536          dc.w    $5500           ;u - upload program from terminal port
0000046E= 084A                     537          dc.w    uload
00000470= 4400                     538          dc.w    $4400           ;d - dump contents of memory
00000472= 0AB8                     539          dc.w    dump
00000474= 5300                     540          dc.w    $5300           ;s - single step
00000476= 0BDA                     541          dc.w    singl
00000478= 5400                     542          dc.w    $5400           ;t - trace a program's path
0000047A= 0B7A                     543          dc.w    trace
0000047C= 4700                     544          dc.w    $4700           ;g - start user program
0000047E= 0C4C                     545          dc.w    go
00000480= 0D00                     546          dc.w    $0d00           ;<cr> - short g command
00000482= 0C64                     547          dc.w    ggo
00000484= 4500                     548          dc.w    $4500           ;e - enter terminal emulator mode
00000486= 08AA                     549          dc.w    emul
00000488= 4200                     550          dc.w    $4200           ;b - set/remove breakpoints
0000048A= 093A                     551          dc.w    bkpt
0000048C= 4300                     552          dc.w    $4300           ;c - copy memory blocks
0000048E= 04DC                     553          dc.w    copy
00000490= 5200                     554          dc.w    $5200           ;r - display/modify registers
00000492= 0650                     555          dc.w    regs
00000494= 5000                     556          dc.w    $5000           ;p - prototype commands
00000496= 08D2                     557          dc.w    proto
00000498= 4800                     558          dc.w    $4800           ;h - display help messages
0000049A= 0FB6                     559          dc.w    help
0000049C= 4100                     560          dc.w    $4100           ;a - assembly listing
0000049E= 101A                     561          dc.w    assem
000004A0                           562  ;
000004A0                           563  ; Structure of each entry is command
000004A0                           564  ; (com) and address of servicing routine
000004A0                           565  ; (code)
000004A0                           566  ;
000004A0  =00000000                567  com     EQU       $0
000004A0  =00000002                568  code    EQU       $2
000004A0  41F8 00CE                569  comm:   lea     prmp,a0                 ;write prompt
000004A4  6100 FD72                570          bsr     writs
000004A8  6100 FF32                571          bsr     getch                   ;get command from buffer
000004AC  C03C 005F                572          and.b   #$5f,d0                 ;make upper-case
000004B0  45F8 045C                573          lea     ctab-4,a2               ;set-up search of ctab
000004B4  740F                     574          moveq   #$0f,d2                 ;count is one less
000004B6  584A                     575  clp:    addq.w  #4,a2
000004B8  B02A 0000                576          cmp.b   com(a2),d0
000004BC  57CA FFF8                577          dbeq    d2,clp
000004C0  6600 000A                578          bne     bad                     ;search fails
000004C4  346A 0002                579          movea.w code(a2),a2             ;get address for success
000004C8  4E92                     580          jsr     (a2)                    ;go to it
000004CA  60D4                     581          bra     comm                    ;loop back for next command
Line 582 ERROR: Undefined symbol
000004CC  41F9 004DBD16            582  bad:    lea     bcomm,a0                ;say it's bad and return
000004D2  6100 FD44                583          bsr     writs
000004D6  60C8                     584          bra     comm
000004D8                           585  ;
000004D8                           586  ; Copy - Copy memory blocks
000004D8                           587  ;
000004D8                           588  ;***************************************
000004D8                           589  ;*                                     *
000004D8                           590  ;* Copy is invoked as follows:         *
000004D8                           591  ;*                                     *
000004D8                           592  ;*          c xxxxEQUyyyy,zzzz           *
000004D8                           593  ;*                                     *
000004D8                           594  ;* Copy locations yyyy thru zzzz to    *
000004D8                           595  ;* locations xxxx and upward.          *
000004D8                           596  ;*                                     *
000004D8                           597  ;***************************************
000004D8                           598  ;
Line 599 ERROR: Undefined symbol
000004D8= B8 B8                    599  cdmes:  dc.b    lf,cr
Line 600 ERROR: Invalid opcode
000004DA                           600          .asciz  "Copied"
Line 601 ERROR: Invalid opcode
000004DA                           601  ctom:   .asciz  " to "
Line 602 ERROR: Invalid opcode
000004DA                           602  cform:  .asciz  " for "
Line 603 ERROR: Invalid opcode
000004DA                           603  cbyt:   .asciz  " bytes"
Line 604 ERROR: Undefined symbol
000004DA= B8                       604          dc.b    nul
000004DC  6100 FEFE                605  copy:   bsr     getch                   ;get past blank
000004E0  41F8 03DC                606          lea     getch,a0                ;setup for terminal input
000004E4  6100 FF46                607          bsr     getw                    ;get target address
000004E8  2400                     608          move.l  d0,d2                   ;save it
000004EA  3440                     609          movea.w d0,a2
000004EC  6100 FEEE                610          bsr     getch                   ;get past EQU
000004F0  6100 FF3A                611          bsr     getw                    ;get start address
000004F4  2600                     612          move.l  d0,d3                   ;save it
000004F6  3640                     613          movea.w d0,a3                   ;again
000004F8  6100 FEE2                614          bsr     getch                   ;get past ,
000004FC  6100 FF2E                615          bsr     getw                    ;get ending address
00000500  9083                     616          sub.l   d3,d0                   ;calculate byte count
00000502  2800                     617          move.l  d0,d4                   ;save it
00000504  5204                     618          addq.b  #$1,d4
00000506  14DB                     619  colp:   move.b  (a3)+,(a2)+             ;start moving
00000508  51C8 FFFC                620          dbf     d0,colp
0000050C  41F8 04D8                621          lea     cdmes,a0                ;say we're done
00000510  6100 FD06                622          bsr     writs
00000514  2003                     623          move.l  d3,d0
00000516  6100 FD16                624          bsr     writw
Line 625 ERROR: Undefined symbol
0000051A  41F9 004DBD16            625          lea     ctom,a0
00000520  6100 FCF6                626          bsr     writs
00000524  2002                     627          move.l  d2,d0
00000526  6100 FD06                628          bsr     writw
Line 629 ERROR: Undefined symbol
0000052A  41F9 004DBD16            629          lea     cform,a0
00000530  6100 FCE6                630          bsr     writs
00000534  2004                     631          move.l  d4,d0
00000536  6100 FCF6                632          bsr     writw
Line 633 ERROR: Undefined symbol
0000053A  41F9 004DBD16            633          lea     cbyt,a0
00000540  6100 FCD6                634          bsr     writs
00000544  4E75                     635          rts
00000546                           636  ;
00000546                           637  ; Mem - memory update
00000546                           638  ;
00000546                           639  ;*******************************************
00000546                           640  ;*                                         *
00000546                           641  ;* Memory sub-commands are as follows:     *
00000546                           642  ;*                                         *
00000546                           643  ;*          m<cr> - start memory mode      *
00000546                           644  ;*          m xxxx - start m mode at loca- *
00000546                           645  ;*                     tion xxxx          *
00000546                           646  ;*          .xxxx - set pointer to location*
00000546                           647  ;*                  xxxx                   *
00000546                           648  ;*          EQUxx - update current location  *
00000546                           649  ;*                to xx                    *
00000546                           650  ;*          ,xx - increment location and   *
00000546                           651  ;*                update it to xx          *
00000546                           652  ;*          + - increment location         *
00000546                           653  ;*          - - decrement location         *
00000546                           654  ;*          <cr> - print current location  *
00000546                           655  ;*                 and value               *
00000546                           656  ;*                                         *
00000546                           657  ;*******************************************
00000546                           658  ;
00000546= 2E00                     659  mtab:   dc.w    $2e00           ;.
00000548= 05B4                     660          dc.w    mdot
0000054A= 3D00                     661          dc.w    $3d00           ;EQU
0000054C= 05C6                     662          dc.w    mequ
0000054E= 2C00                     663          dc.w    $2c00           ;,
00000550= 05DA                     664          dc.w    mcom
00000552= 2B00                     665          dc.w    $2b00           ;+
00000554= 05E2                     666          dc.w    mplu
00000556= 2D00                     667          dc.w    $2d00           ;-
00000558= 05EC                     668          dc.w    mmin
0000055A= 0D00                     669          dc.w    $0d00           ;<CR>
0000055C= 05F6                     670          dc.w    mloc
Line 671 ERROR: Undefined symbol
0000055E= B8 B8 B8                 671  mmes:   dc.b    lf,lf,cr
Line 672 ERROR: Invalid opcode
00000561                           672          .asciz  "Memory Mode"
Line 673 ERROR: Undefined symbol
00000561= B8 B8 3A 3A              673  mprmp:  dc.b    lf,cr,':',nul
Line 674 ERROR: Invalid opcode
00000565                           674  meqm:   .asciz  " EQUEQU "
00000566  6100 FE74                675  mem:    bsr     getch                   ;get delimiter
0000056A  B03C 000D                676          cmp.b   #$0d,d0                 ;if <cr> then enter m
0000056E  6700 000E                677          beq     mnoad
00000572  41F8 03DC                678          lea     getch,a0                ;else get the address
00000576  6100 FEB4                679          bsr     getw
0000057A  6000 0004                680          bra     mplp                    ;set the address
0000057E  7000                     681  mnoad:  moveq   #$0,d0                  ;start with no address
00000580  31C0 419E                682  mplp:   move.w  d0,exam                 ;set the address
00000584  41F8 055E                683          lea     mmes,a0                 ;load message
00000588  6100 FC8E                684          bsr     writs
0000058C  41F8 0561                685  mlp:    lea     mprmp,a0                ;write memory prompt
00000590  6100 FC86                686          bsr     writs
00000594  6100 FE46                687          bsr     getch                   ;enter memory command loop
00000598  7405                     688          moveq   #$5,d2                  ;set for search
0000059A  41F8 0542                689          lea     mtab-4,a0
0000059E  5848                     690  mmlp:   addq.w  #$4,a0                  ;search loop like comm
000005A0  B010                     691          cmp.b   (a0),d0
000005A2  57CA FFFA                692          dbeq    d2,mmlp
000005A6  6600 000A                693          bne     mexit                   ;exit if not found
000005AA  3068 0002                694          movea.w $2(a0),a0               ;get routine address
000005AE  4E90                     695          jsr     (a0)                    ;go to it
000005B0  60DA                     696          bra     mlp                     ;stay in memory loop
000005B2  4E75                     697  mexit:  rts
000005B4  41F8 03DC                698  mdot:   lea     getch,a0                ;handle setting of address
000005B8  6100 FE72                699          bsr     getw                    ;get address
000005BC  31C0 419E                700          move.w  d0,exam                 ;set in p[ointer
000005C0  6100 0034                701          bsr     mloc                    ;print address and value
000005C4  4E75                     702          rts
000005C6  41F8 03DC                703  mequ:   lea     getch,a0                ;handle new value at pointer
000005CA  6100 FE56                704          bsr     getb                    ;get new value
000005CE  3078 419E                705          movea.w exam,a0                 ;set address
000005D2  1080                     706          move.b  d0,(a0)                 ;move new value
000005D4  6100 0020                707          bsr     mloc                    ;write new value
000005D8  4E75                     708          rts
000005DA  5278 419E                709  mcom:   addq.w  #$1,exam                ;handle pointer increment by ,
000005DE  61E6                     710          bsr     mequ                    ;write new address and value
000005E0  4E75                     711          rts
000005E2  5278 419E                712  mplu:   addq.w  #$1,exam                ;increment pointer
000005E6  6100 000E                713          bsr     mloc                    ;write val
000005EA  4E75                     714          rts
000005EC  5378 419E                715  mmin:   subq.w  #$1,exam                ;decrement pointer
000005F0  6100 0004                716          bsr     mloc
000005F4  4E75                     717          rts
000005F6  6100 FE20                718  mloc:   bsr     crlf                    ;write address and value
000005FA  3038 419E                719          move.w  exam,d0                 ;write address
000005FE  6100 FC2E                720          bsr     writw
Line 721 ERROR: Undefined symbol
00000602  41F9 004DBD16            721          lea     meqm,a0
00000608  6100 FC0E                722          bsr     writs
0000060C  3078 419E                723          movea.w exam,a0
00000610  1010                     724          move.b  (a0),d0                 ;write value
00000612  6100 FC10                725          bsr     writb
00000616  4E75                     726          rts
00000618                           727  ;
00000618                           728  ; Regs - Modify/examine registers
00000618                           729  ;
00000618                           730  ;***************************************
00000618                           731  ;*                                     *
00000618                           732  ;* Register subcommands are as follows:*
00000618                           733  ;*                                     *
00000618                           734  ;*      r<cr> - start register mode    *
00000618                           735  ;*      r xx - start r mode at register*
00000618                           736  ;*        xx. Where xx :               *
00000618                           737  ;*            SR/_sr - status register *
00000618                           738  ;*            PC/_pc - program counter *
00000618                           739  ;*            d0 - d7 - data registers *
00000618                           740  ;*            a0 - a7 - address regs.  *
00000618                           741  ;*     .xx - set pointer to regsister  *
00000618                           742  ;*     EQUxxxxxxxx - update current reg- *
00000618                           743  ;*                 ister to xxxxxxxx   *
00000618                           744  ;*     <cr> - print all registers      *
00000618                           745  ;*                                     *
00000618                           746  ;***************************************
00000618                           747  ;
00000618= 2E00                     748  rtab:   dc.w    $2e00           ;.
0000061A= 06A8                     749          dc.w    rdot
0000061C= 3D00                     750          dc.w    $3d00           ;EQU
0000061E= 06BA                     751          dc.w    requ
00000620= 0D00                     752          dc.w    $0d00           ;<cr>
00000622= 06EA                     753          dc.w    rall
00000624= CB00                     754  rtab1:  dc.w    $cb00           ;internal name/offset
Line 755 ERROR: Invalid opcode
00000626                           755          .ascii  "SR"                    ;print name
00000626= 9C02                     756          dc.w    $9c02
Line 757 ERROR: Invalid opcode
00000628                           757          .ascii  "PC"
00000628= D006                     758          dc.w    $d006
Line 759 ERROR: Invalid opcode
0000062A                           759          .ascii  "d0"
0000062A= D10A                     760          dc.w    $d10a
Line 761 ERROR: Invalid opcode
0000062C                           761          .ascii  "d1"
0000062C= D20E                     762          dc.w    $d20e
Line 763 ERROR: Invalid opcode
0000062E                           763          .ascii  "d2"
0000062E= D312                     764          dc.w    $d312
Line 765 ERROR: Invalid opcode
00000630                           765          .ascii  "d3"
00000630= D416                     766          dc.w    $d416
Line 767 ERROR: Invalid opcode
00000632                           767          .ascii  "d4"
00000632= D51A                     768          dc.w    $d51a
Line 769 ERROR: Invalid opcode
00000634                           769          .ascii  "d5"
00000634= D61E                     770          dc.w    $d61e
Line 771 ERROR: Invalid opcode
00000636                           771          .ascii  "d6"
00000636= D722                     772          dc.w    $d722
Line 773 ERROR: Invalid opcode
00000638                           773          .ascii  "d7"
00000638= A026                     774          dc.w    $a026
Line 775 ERROR: Invalid opcode
0000063A                           775          .ascii  "a0"
0000063A= A12A                     776          dc.w    $a12a
Line 777 ERROR: Invalid opcode
0000063C                           777          .ascii  "a1"
0000063C= A22E                     778          dc.w    $a22e
Line 779 ERROR: Invalid opcode
0000063E                           779          .ascii  "a2"
0000063E= A332                     780          dc.w    $a332
Line 781 ERROR: Invalid opcode
00000640                           781          .ascii  "a3"
00000640= A436                     782          dc.w    $a436
Line 783 ERROR: Invalid opcode
00000642                           783          .ascii  "a4"
00000642= A53A                     784          dc.w    $a53a
Line 785 ERROR: Invalid opcode
00000644                           785          .ascii  "a5"
00000644= A63E                     786          dc.w    $a63e
Line 787 ERROR: Invalid opcode
00000646                           787          .ascii  "a6"
00000646= A742                     788          dc.w    $a742
Line 789 ERROR: Invalid opcode
00000648                           789          .ascii  "a7"
Line 790 ERROR: Undefined symbol
00000648= B8 B8 B8                 790  rmes:   dc.b    lf,lf,cr
Line 791 ERROR: Invalid opcode
0000064B                           791          .asciz  "Register Mode"
Line 792 ERROR: Undefined symbol
0000064B= B8 B8 3A 3A              792  rprmp:  dc.b    lf,cr,':',nul
Line 793 ERROR: Invalid opcode
0000064F                           793  reqm:   .asciz  " EQUEQU "
00000650  6100 FD8A                794  regs:   bsr getch                       ;get delimiter
00000654  B03C 000D                795          cmp.b   #$0d,d0                 ;if <cr> then start at sr
00000658  6700 0012                796          beq     rnoad
0000065C  41F8 03DC                797          lea     getch,a0                ;else set for terminal input
00000660  6100 FDC0                798          bsr     getb                    ;get register name
00000664  6100 009A                799          bsr     raddr                   ;set address
00000668  6000 000A                800          bra     rplp                    ;set register pointer
0000066C  47F8 0624                801  rnoad:  lea     rtab1,a3                ;set default pointer value
00000670  31CB 419C                802          move.w  a3,rexam
00000674  41F8 0648                803  rplp:   lea     rmes,a0                 ;say hello
00000678  6100 FB9E                804          bsr     writs
0000067C  6100 009A                805          bsr     rloc                    ;write starting loc value
00000680  41F8 064B                806  rlp:    lea     rprmp,a0                ;write register prompt
00000684  6100 FB92                807          bsr     writs
00000688  6100 FD52                808          bsr     getch                   ;get command
0000068C  7402                     809          moveq   #$2,d2                  ;set for search
0000068E  41F8 0614                810          lea     rtab-4,a0
00000692  5848                     811  rmlp:   addq.w  #$4,a0                  ;search
00000694  B010                     812          cmp.b   (a0),d0
00000696  57CA FFFA                813          dbeq    d2,rmlp
0000069A  6600 000A                814          bne     rexit                   ;exit if not found
0000069E  3068 0002                815          movea.w $2(a0),a0               ;found it so go to it
000006A2  4E90                     816          jsr     (a0)
000006A4  60DA                     817          bra     rlp                     ;go again
000006A6  4E75                     818  rexit:  rts
000006A8  41F8 03DC                819  rdot:   lea     getch,a0                ;set register pointer
000006AC  6100 FD74                820          bsr     getb
000006B0  6100 004E                821          bsr     raddr                   ;set input address
000006B4  6100 0062                822          bsr     rloc                    ;write register and value
000006B8  4E75                     823          rts
000006BA  41F8 03DC                824  requ:   lea     getch,a0                ;set new value
000006BE  3678 419C                825          movea.w rexam,a3
000006C2  7200                     826          moveq   #$0,d1                  ;clear d1
000006C4  122B 0001                827          move.b  $1(a3),d1               ;get offset
000006C8  6700 0012                828          beq     requs                   ;branch if sr is reg
000006CC  6100 FD68                829          bsr     getl                    ;get new value
000006D0  49F8 4150                830          lea     _sr,a4                  ;find save area offset
000006D4  D9C1                     831          adda.l  d1,a4                   ;add offset
000006D6  2880                     832          move.l  d0,(a4)                 ;move in new value
000006D8  6000 000A                833          bra     requr                   ;print it
000006DC  6100 FD4E                834  requs:  bsr     getw                    ;same as above but for sr (word vs. long
000006E0  31C0 4150                835          move.w  d0,_sr
000006E4  6100 0032                836  requr:  bsr     rloc                    ;write new value
000006E8  4E75                     837          rts
000006EA  47F8 0620                838  rall:   lea     rtab1-4,a3              ;write all registers
000006EE  7411                     839          moveq   #$11,d2                 ;set count
000006F0  584B                     840  ralp:   addq.w  #$4,a3                  ;loop
000006F2  31CB 419C                841          move.w  a3,rexam
000006F6  6100 0020                842          bsr     rloc
000006FA  51CA FFF4                843          dbf     d2,ralp
000006FE  4E75                     844          rts
00000700  383C 0011                845  raddr:  move.w  #$11,d4                 ;find offset in save area
00000704  47F8 0620                846          lea     rtab1-4,a3
00000708  584B                     847  radlp:  addq.w  #$4,a3
0000070A  B013                     848          cmp.b   (a3),d0
0000070C  57CC FFFA                849          dbeq    d4,radlp
00000710  6694                     850          bne     rexit
00000712  31CB 419C                851          move.w  a3,rexam                ;set register pointer
00000716  4E75                     852          rts
00000718  6100 FCFE                853  rloc:   bsr     crlf                    ;print register name and value
0000071C  3878 419C                854          movea.w rexam,a4
00000720  102C 0002                855          move.b  $2(a4),d0               ;write name
00000724  6100 FABA                856          bsr     writ
00000728  102C 0003                857          move.b  $3(a4),d0
0000072C  6100 FAB2                858          bsr     writ
Line 859 ERROR: Undefined symbol
00000730  41F9 004DBD16            859          lea     reqm,a0
00000736  6100 FAE0                860          bsr     writs
0000073A  7000                     861          moveq   #$0,d0
0000073C  102C 0001                862          move.b  $1(a4),d0               ;write value
00000740  6700 0012                863          beq     rpsr                    ;branch if sr
00000744  41F8 4150                864          lea     _sr,a0                  ;find offset
00000748  D1C0                     865          adda.l  d0,a0                   ;add offset
0000074A  2010                     866          move.l  (a0),d0                 ;move in new value
0000074C  6100 FAEA                867          bsr     writl
00000750  6000 000A                868          bra     rrts
00000754  3038 4150                869  rpsr:   move.w  _sr,d0                  ;write sr value
00000758  6100 FAD4                870          bsr     writw
0000075C  4E75                     871  rrts:   rts
0000075E                           872  ;
0000075E                           873  ; Load - Load data from host
0000075E                           874  ;
0000075E                           875  ;****************************************
0000075E                           876  ;*                                      *
0000075E                           877  ;* Load is invoked as follows:          *
0000075E                           878  ;*                                      *
0000075E                           879  ;*       l<cr> - load from host with no *
0000075E                           880  ;*               offset                 *
0000075E                           881  ;*       <ff> - same as l<cr> but used  *
0000075E                           882  ;*              only exiting emulator   *
0000075E                           883  ;*       l xxxx - load with offset xxxx *
0000075E                           884  ;*                                      *
0000075E                           885  ;****************************************
0000075E                           886  ;
Line 887 ERROR: Undefined symbol
0000075E= B8 B8                    887  lmes:   dc.b    lf,cr
Line 888 ERROR: Invalid opcode
00000760                           888          .asciz  "Load..."
Line 889 ERROR: Undefined symbol
00000760= B8 B8                    889  slmes:  dc.b    lf,cr
Line 890 ERROR: Invalid opcode
00000762                           890          .asciz  "User PC EQUEQU "
Line 891 ERROR: Undefined symbol
00000762= B8 B8                    891  elmes:  dc.b    lf,cr
Line 892 ERROR: Invalid opcode
00000764                           892          .asciz  "Load done..."
Line 893 ERROR: Undefined symbol
00000764= B8                       893          dc.b    nul
00000765                           894  
00000766  6100 FC74                895  load:   bsr     getch                   ;get delimiter
0000076A  B03C 000D                896          cmp.b   #$0d,d0                 ;if <cr> then no offset
0000076E  6700 0012                897          beq     lnoof
00000772  41F8 03DC                898          lea     getch,a0                ;get offset
00000776  6100 FCB4                899          bsr     getw
0000077A  21C0 4152                900          move.l  d0,_pc                  ;save load point for go command
0000077E  6000 000A                901          bra     ld1
00000782  21FC 00000000 4152       902  lnoof:  move.l  #$0,_pc
0000078A  43F8 41AC                903  ld1:    lea     lbuff,a1                ;point at lpbuff
0000078E  337C 0000 0000           904          move.w  #$0,head(a1)            ;set queue for lp
00000794  337C FFFF 0002           905          move.w  #$ffff,tail(a1)
0000079A  337C 0000 0004           906          move.w  #$0,count(a1)
000007A0  41F8 075E                907          lea     lmes,a0                 ;print starting message
000007A4  6100 FA72                908          bsr     writs
000007A8  103C 000D                909          move.b  #$0d,d0                 ;load a <cr>
000007AC  6100 FA56                910          bsr     writu                   ;send it to the host
000007B0  41F8 0388                911          lea     lgch,a0                 ;set up for host load routine
000007B4  4E90                     912  llp:    jsr     (a0)                    ;get S
000007B6  B03C 0053                913          cmp.b   #$53,d0
000007BA  66F8                     914          bne     llp                     ;No - start over
000007BC  4E90                     915          jsr     (a0)                    ;get 1 or 9
000007BE  B03C 0039                916          cmp.b   #$39,d0                 ;9 - then done
000007C2  6700 002A                917          beq     ldone
000007C6  B03C 0031                918          cmp.b   #$31,d0                 ;1 - then another record
000007CA  66E8                     919          bne     llp
000007CC  6100 FC54                920          bsr     getb                    ;get byte count
000007D0  2200                     921          move.l  d0,d1
000007D2  5901                     922          subq.b  #$4,d1                  ;remove count for check
000007D4  6100 FC56                923          bsr     getw
000007D8  D0B8 4152                924          add.l   _pc,d0                  ;add offset
000007DC  3240                     925          movea.w d0,a1                   ;save starting address
000007DE  6100 FC42                926  lblp:   bsr     getb                    ;get actual data byte
000007E2  12C0                     927          move.b  d0,(a1)+                ;move to memory
000007E4  51C9 FFF8                928          dbf     d1,lblp                 ;loop for count
000007E8  6100 FC42                929          bsr     getw                    ;gobble up check and crlf
000007EC  60C6                     930          bra     llp                     ;try another record
000007EE  4E90                     931  ldone:  jsr     (a0)                    ;gobble up byte count
000007F0  4E90                     932          jsr     (a0)
000007F2  6100 FC38                933          bsr     getw                    ;get address from end macro
000007F6  D0B8 4152                934          add.l   _pc,d0                  ;add offset
000007FA  2200                     935          move.l  d0,d1                   ;save it
000007FC  21C0 4152                936          move.l  d0,_pc                  ;set starting address for go
00000800  31FC 0000 4150           937          move.w  #$0,_sr                 ;set status register
00000806  7010                     938          move.l  #$10,d0
00000808  43F8 4156                939          lea     dr0,a1
0000080C  22FC 00000000            940  lreg:   move.l  #$0,(a1)+
00000812  51C8 FFF8                941          dbf     d0,lreg
00000816  2448                     942          movea.l a0,a2                   ;save the port location in a2
Line 943 ERROR: Undefined symbol
00000818  41F9 004DBD16            943          lea     ustck,a0
0000081E  21C8 4192                944          move.l  a0,ar7                  ;set user stack
00000822  41F8 0760                945          lea     slmes,a0                ;write message
00000826  6100 F9F0                946          bsr     writs
0000082A  2001                     947          move.l  d1,d0
0000082C  6100 FA00                948          bsr     writw                   ;write starting address
00000830  7203                     949          move.l  #$03,d1                 ;gobble up last four bytes
00000832  204A                     950          movea.l a2,a0                   ;restore the port location to a0
00000834  4E90                     951  ll2:    jsr     (a0)
00000836  51C9 FFFC                952          dbf     d1,ll2
0000083A  41F8 0762                953          lea     elmes,a0                ;send last message
0000083E  6100 F9D8                954          bsr     writs
00000842  08F8 0000 42DE           955          bset    #$00,echo               ;turn terminal echo back on
00000848  4E75                     956          rts
0000084A                           957  ;
0000084A                           958  ; Upload - upload program from terminal port
0000084A                           959  ;
0000084A                           960  ;****************************************
0000084A                           961  ;*                                      *
0000084A                           962  ;* Upload is invoked as follows:        *
0000084A                           963  ;*                                      *
0000084A                           964  ;*       u<cr> - load from terminal     *
0000084A                           965  ;*               with no offset         *
0000084A                           966  ;*       u xxxx - load with offset xxxx *
0000084A                           967  ;*                                      *
0000084A                           968  ;****************************************
0000084A                           969  ;
0000084A  6100 FB90                970  uload:  bsr     getch                   ;same as above, except that it
0000084E  B03C 000D                971          cmp.b   #$0d,d0                 ;uses the terminal port for the
00000852  6700 0012                972          beq     ulnoof                  ;load.
00000856  41F8 03DC                973          lea     getch,a0
0000085A  6100 FBD0                974          bsr     getw
0000085E  21C0 4152                975          move.l  d0,_pc
00000862  6000 000A                976          bra     uld1
00000866  21FC 00000000 4152       977  ulnoof: move.l  #$0,_pc
0000086E  43F8 41C2                978  uld1:   lea     ibuff,a1
00000872  337C 0000 0000           979          move.w  #$0,head(a1)
00000878  337C FFFF 0002           980          move.w  #$ffff,tail(a1)
0000087E  337C 0000 0004           981          move.w  #$0,count(a1)
00000884  41F8 075E                982          lea     lmes,a0
00000888  6100 F98E                983          bsr     writs
0000088C  103C 000D                984          move.b  #$0d,d0
00000890  6100 F972                985          bsr     writu
00000894  41F8 03DC                986          lea     getch,a0
00000898  08B8 0000 42DE           987          bclr    #$00,echo
0000089E  6000 FF14                988          bra     llp                     ;goes to the load routine above
000008A2                           989  ;
000008A2                           990  ; e - Enter terminal emulator mode          *
000008A2                           991  ;
000008A2                           992  ;********************************************
000008A2                           993  ;*                                          *
000008A2                           994  ;* Invoke emulator mode as follows          *
000008A2                           995  ;*                                          *
000008A2                           996  ;*       e                                  *
000008A2                           997  ;*                                          *
000008A2                           998  ;*    NOTE: That in this mode any char-     *
000008A2                           999  ;*    except a ctrl-x may be sent to the    *
000008A2                          1000  ;*    host. Ctrl-x is the escape sequence   *
000008A2                          1001  ;*    for getting out of terminal emulator  *
000008A2                          1002  ;*    mode. Ctrl-l does the same thing      *
000008A2                          1003  ;*    except a load (l) command is put      *
000008A2                          1004  ;*    in the command buffer.                *
000008A2                          1005  ;*                                          *
000008A2                          1006  ;********************************************
000008A2                          1007  ;
Line 1008 ERROR: Undefined symbol
000008A2= B8 B8                   1008  emmes:  dc.b    lf,cr
Line 1009 ERROR: Invalid opcode
000008A4                          1009          .asciz  "Exit terminal mode"
Line 1010 ERROR: Undefined symbol
000008A4= B8 B8                   1010  enmes:  dc.b    lf,cr
Line 1011 ERROR: Invalid opcode
000008A6                          1011          .ascii  "Terminal mode:"
Line 1012 ERROR: Undefined symbol
000008A6= B8 B8 B8                1012          dc.b    lf,cr,nul
000008AA  41F8 08A4               1013  emul:   lea     enmes,a0                ;write message
000008AE  6100 F968               1014          bsr     writs
Line 1015 ERROR: Undefined symbol
000008B2  08F9 0003 005455C4      1015          bset    #$3,bkptf               ;set emulator mode
000008BA  4E72 2000               1016  emu1:   stop    #$2000                  ;wait for interrupt
000008BE                          1017                                          ;if interrupted the handlers
000008BE                          1018                                          ;will buffer and echo input
000008BE  60FA                    1019          bra     emu1
000008C0  41F8 08A2               1020  emudn:  lea     emmes,a0                ;entered from interrupt handler
000008C4  6100 F952               1021          bsr     writs
000008C8  4E75                    1022          rts
000008CA                          1023  ;
000008CA                          1024  ; Proto - Prototype command in ram
000008CA                          1025  ;
000008CA                          1026  ;******************************************
000008CA                          1027  ;*                                        *
000008CA                          1028  ;* Prototype commands are invoked:        *
000008CA                          1029  ;*                                        *
000008CA                          1030  ;*      px xxxx - load address xxxx for   *
000008CA                          1031  ;*                prototype command x.    *
000008CA                          1032  ;*      px<cr> - execute prototype com-   *
000008CA                          1033  ;*               mand x.                  *
000008CA                          1034  ;*                                        *
000008CA                          1035  ;*      NOTE: x must be a 1, 2, or 3      *
000008CA                          1036  ;*                                        *
000008CA                          1037  ;******************************************
000008CA                          1038  ;
Line 1039 ERROR: Undefined symbol
000008CA= B8 B8                   1039  pmess:  dc.b    lf,cr
Line 1040 ERROR: Invalid opcode
000008CC                          1040          .asciz  "Prototype "
Line 1041 ERROR: Invalid opcode
000008CC                          1041  pm1:    .ascii  "running:"
Line 1042 ERROR: Undefined symbol
000008CC= B8 B8 B8                1042          dc.b    lf,cr,nul
Line 1043 ERROR: Invalid opcode
000008CF                          1043  pm2:    .ascii  "installed"
Line 1044 ERROR: Undefined symbol
000008CF= B8 B8 B8                1044          dc.b    cr,nul,nul
000008D2  6100 FB08               1045  proto:  bsr     getch                   ;get prototype number
000008D6  2200                    1046          move.l  d0,d1                   ;save number
000008D8  0201 000F               1047          andi.b  #$0f,d1                 ;strip leading hex digit
000008DC  5301                    1048          subq.b  #$1,d1                  ;normalize to 0
000008DE  E389                    1049          lsl.l   #$1,d1                  ;multiply by 2
000008E0  43F8 4196               1050          lea     ptab,a1                 ;set starting address
000008E4  D3C1                    1051          adda.l  d1,a1                   ;add offset
000008E6  6100 FAF4               1052          bsr     getch                   ;get delimiter
000008EA  B03C 000D               1053          cmp.b   #$0d,d0                 ;if <cr> then do command
000008EE  6700 0022               1054          beq     prun
000008F2  41F8 03DC               1055          lea     getch,a0                ;else install in table
000008F6  6100 FB34               1056          bsr     getw                    ;get address
000008FA  3280                    1057          move.w  d0,(a1)                 ;move in address
000008FC  41F8 08CA               1058          lea     pmess,a0
00000900  6100 F916               1059          bsr     writs
Line 1060 ERROR: Undefined symbol
00000904  41F9 004DBD16           1060          lea     pm2,a0
0000090A  6100 F90C               1061          bsr     writs
0000090E  6000 0018               1062          bra     prts
00000912  3251                    1063  prun:   movea.w (a1),a1                 ;run prototype command
00000914  41F8 08CA               1064          lea     pmess,a0
00000918  6100 F8FE               1065          bsr     writs
Line 1066 ERROR: Undefined symbol
0000091C  41F9 004DBD16           1066          lea     pm1,a0
00000922  6100 F8F4               1067          bsr     writs
00000926  4E91                    1068          jsr     (a1)                    ;go do it
00000928  4E75                    1069  prts:   rts
0000092A                          1070  ;
0000092A                          1071  ; Bkpt - Set/Remove breakpoints
0000092A                          1072  ;
0000092A                          1073  ;
0000092A                          1074  ;**********************************************
0000092A                          1075  ;*                                            *
0000092A                          1076  ;* Breakpoint is invoked as follows:          *
0000092A                          1077  ;*                                            *
0000092A                          1078  ;*         b<cr> - display breakpoints        *
0000092A                          1079  ;*         b+xxxx - add a breakpoint at xxxx  *
0000092A                          1080  ;*         b-xxxx - delete breakpoint at xxxx *
0000092A                          1081  ;*         b# - delete all breakpoints        *
0000092A                          1082  ;*                                            *
0000092A                          1083  ;**********************************************
0000092A                          1084  ;
Line 1085 ERROR: Undefined symbol
0000092A= B8 B8                   1085  brmes:  dc.b    lf,cr
Line 1086 ERROR: Invalid opcode
0000092C                          1086          .asciz  "Bkpts removed"
Line 1087 ERROR: Undefined symbol
0000092C= B8 B8                   1087  bdmes:  dc.b    lf,cr
Line 1088 ERROR: Invalid opcode
0000092E                          1088          .ascii  "Bkpts at:"
Line 1089 ERROR: Undefined symbol
0000092E= B8 B8 B8                1089          dc.b    lf,cr,nul
Line 1090 ERROR: Undefined symbol
00000931= B8 B8                   1090  bpmes:  dc.b    lf,cr
Line 1091 ERROR: Invalid opcode
00000933                          1091          .asciz  "Bkpt added at "
Line 1092 ERROR: Undefined symbol
00000933= B8 B8                   1092  bmmes:  dc.b    lf,cr
Line 1093 ERROR: Invalid opcode
00000935                          1093          .asciz  "Bkpt deleted at "
Line 1094 ERROR: Undefined symbol
00000935= B8 B8                   1094  bbmes:  dc.b    lf,cr
Line 1095 ERROR: Invalid opcode
00000937                          1095          .asciz  "Bkpt error"
Line 1096 ERROR: Undefined symbol
00000937= B8                      1096          dc.b    nul
00000938= FFFF                    1097  bkin:   dc.w    $FFFF                   ;instruction constant
0000093A  6100 FAA0               1098  bkpt:   bsr     getch                   ;get delimiter
0000093E  B03C 000D               1099          cmp.b   #$0d,d0                 ;if <cr> then print all bkpts
00000942  6700 0064               1100          beq     bdis
00000946  B03C 002B               1101          cmp.b   #$2b,d0                 ;if + then add a bkpt
0000094A  6700 0084               1102          beq     bpls
0000094E  B03C 002D               1103          cmp.b   #$2d,d0                 ;if - then delete a bkpt
00000952  6700 00E4               1104          beq     bmin
00000956  B03C 0023               1105          cmp.b   #$23,d0                 ;if # then delete all bkpts
0000095A  6600 0146               1106          bne     bbad                    ;else its a bad message
0000095E  7204                    1107  brem:   moveq   #$4,d1                  ;remove all bkpts
00000960  43F8 4138               1108          lea     bktab-4,a1              ;set for loop
00000964  5849                    1109  blp1:   adda.w  #$4,a1
00000966  3069 0002               1110          movea.w iloc(a1),a0             ;get address from table
0000096A  B0FC 0000               1111          cmpa.w  #$00,a0                 ;if 0 then not an entry
0000096E  6700 000E               1112          beq     bno
00000972  30A9 0000               1113          move.w  instr(a1),(a0)          ;else move instr back
00000976  237C 00000000 0000      1114          move.l  #$0,instr(a1)           ;clear table entry
0000097E  51C9 FFE4               1115  bno:    dbf     d1,blp1                 ;loop
Line 1116 ERROR: Undefined symbol
00000982  08B9 0000 005455CC      1116          bclr    #$0,bkptf               ;clear bkpt if in one
Line 1117 ERROR: Undefined symbol
0000098A  0839 0002 005455C4      1117          btst    #$2,bkptf               ;In trace ?
00000992  6600 0008               1118          bne     brno                    ;Yes.
00000996  0278 7FFF 4150          1119          andi.w  #$7fff,_sr              ;else clear trace bit
0000099C  41F8 092A               1120  brno:   lea     brmes,a0                ;say done
000009A0  6100 F876               1121          bsr     writs
000009A4  6000 0104               1122          bra     brts
000009A8  41F8 092C               1123  bdis:   lea     bdmes,a0                ;handle display all bkpts
000009AC  6100 F86A               1124          bsr     writs
000009B0  43F8 4138               1125          lea     bktab-4,a1              ;set loop
000009B4  7204                    1126          moveq   #$4,d1
000009B6  5849                    1127  bdlp:   adda.w  #$4,a1                  ;loop
000009B8  3029 0002               1128          move.w  iloc(a1),d0             ;get bkpt
000009BC  6700 000A               1129          beq     belp                    ;if 0 then not an entry
000009C0  6100 F86C               1130          bsr     writw
000009C4  6100 FA52               1131          bsr     crlf
000009C8  51C9 FFEC               1132  belp:   dbf     d1,bdlp                 ;loop
000009CC  6000 00DC               1133          bra     brts
000009D0  43F8 4138               1134  bpls:   lea     bktab-4,a1              ;add a bkpt
000009D4  7204                    1135          moveq   #$4,d1                  ;set for loop
000009D6  41F8 03DC               1136          lea     getch,a0                ;setup to get address
000009DA  6100 FA50               1137          bsr     getw
000009DE  5849                    1138  bl2:    adda.w  #$4,a1                  ;loop
000009E0  B069 0002               1139          cmp.w   iloc(a1),d0             ;found entry already in table ?
000009E4  6600 000C               1140          bne     bmo                     ;yes
000009E8  3440                    1141          movea.w d0,a2                   ;reset it for insurance
000009EA  34B8 0938               1142          move.w  bkin,(a2)               ;set instruction
000009EE  6000 001C               1143          bra     bfnd                    ;exit for found
000009F2  3429 0002               1144  bmo:    move.w  iloc(a1),d2             ;move to set condition codes
000009F6  57C9 FFE6               1145          dbeq    d1,bl2                  ;exit if 0 entry found
000009FA  6600 00A6               1146          bne     bbad                    ;if exit is on count and not 0 then error
000009FE  3340 0002               1147          move.w  d0,iloc(a1)             ;move in address
00000A02  3440                    1148          movea.w d0,a2                   ;point at location
00000A04  3352 0000               1149          move.w  (a2),instr(a1)          ;get instruction into table
00000A08  34B8 0938               1150          move.w  bkin,(a2)               ;set bkpt instruction
00000A0C  41F8 0931               1151  bfnd:   lea     bpmes,a0                ;load message
00000A10  6100 F806               1152          bsr     writs
00000A14  200A                    1153          move.l  a2,d0
00000A16  6100 F816               1154          bsr     writw
Line 1155 ERROR: Undefined symbol
00000A1A  08B9 0001 005455C4      1155          bclr    #$1,bkptf               ;clear in-single flag
Line 1156 ERROR: Undefined symbol
00000A22  0839 0002 005455C4      1156          btst    #$2,bkptf               ;In trace ?
00000A2A  6600 007E               1157          bne     brts                    ;Yes
00000A2E  0278 7FFF 4150          1158          andi.w  #$7fff,_sr              ;clear trace bit
00000A34  6000 0074               1159          bra     brts
00000A38  43F8 4138               1160  bmin:   lea     bktab-4,a1              ;delete a breakpoint entry
00000A3C  7204                    1161          moveq   #$4,d1                  ;setup for search
00000A3E  41F8 03DC               1162          lea     getch,a0                ;setup for terminal input
00000A42  6100 F9E8               1163          bsr     getw
00000A46  5849                    1164  bl3:    adda.w  #$4,a1                  ;loop
00000A48  B069 0002               1165          cmp.w   iloc(a1),d0             ;Is this the one ?
00000A4C  57C9 FFF8               1166          dbeq    d1,bl3                  ;if yes then exit else loop
00000A50  6600 0050               1167          bne     bbad                    ;Exit on count ?
00000A54  3440                    1168          movea.w d0,a2                   ;no, so get address
00000A56  34A9 0000               1169          move.w  instr(a1),(a2)          ;return instruction
00000A5A  237C 00000000 0000      1170          move.l  #$0,instr(a1)           ;clear table entry
Line 1171 ERROR: Undefined symbol
00000A62  0839 0000 005455C4      1171          btst    #$0,bkptf               ;In breakpoint ?
00000A6A  6700 0024               1172          beq     bok                     ;No
00000A6E  B0B8 4152               1173          cmp.l   _pc,d0                  ;Yes, This breakpoint ?
00000A72  6600 001C               1174          bne     bok                     ;No
Line 1175 ERROR: Undefined symbol
00000A76  08B9 0000 005455CC      1175          bclr    #$0,bkptf               ;Yes, so clear handling it
Line 1176 ERROR: Undefined symbol
00000A7E  0839 0002 005455C4      1176          btst    #$2,bkptf               ;In trace ?
00000A86  6600 0008               1177          bne     bok                     ;Yes
00000A8A  0278 7FFF 4150          1178          andi.w  #$7fff,_sr              ;else clear trace flag
00000A90  41F8 0933               1179  bok:    lea     bmmes,a0                ;load message
00000A94  6100 F782               1180          bsr     writs
00000A98  200A                    1181          move.l  a2,d0                   ;print address
00000A9A  6100 F792               1182          bsr     writw
00000A9E  6000 000A               1183          bra     brts
00000AA2  41F8 0935               1184  bbad:   lea     bbmes,a0                ;error handler
00000AA6  6100 F770               1185          bsr     writs
00000AAA  4E75                    1186  brts:   rts
00000AAC                          1187  ;
00000AAC                          1188  ; dump - dump memory
00000AAC                          1189  ;
00000AAC                          1190  ;*****************************************
00000AAC                          1191  ;*                                       *
00000AAC                          1192  ;*    dump is invoked as follows:        *
00000AAC                          1193  ;*                                       *
00000AAC                          1194  ;*    d<cr> - dump the next 64 bytes from*
00000AAC                          1195  ;*            last examined location     *
00000AAC                          1196  ;*    d xxxx<cr> - dump the next 64 bytes*
00000AAC                          1197  ;*                 from address xxxx     *
00000AAC                          1198  ;*    d xxxx,yyyy - dump the bytes bet-  *
00000AAC                          1199  ;*                  ween xxxx and yyyy   *
00000AAC                          1200  ;*                                       *
00000AAC                          1201  ;*****************************************
00000AAC                          1202  ;
Line 1203 ERROR: Undefined symbol
00000AAC= B8 B8 B8                1203  dmes:   dc.b    lf,lf,cr
Line 1204 ERROR: Invalid opcode
00000AAF                          1204          .ascii  "Memory dump"
Line 1205 ERROR: Undefined symbol
00000AAF= B8 B8 B8                1205          dc.b    lf,cr,nul
Line 1206 ERROR: Undefined symbol
00000AB2= B8 B8                   1206  dhed:   dc.b    lf,cr
Line 1207 ERROR: Invalid opcode
00000AB4                          1207          .ascii  "      0  1  2  3"
Line 1208 ERROR: Invalid opcode
00000AB4                          1208          .ascii  "  4  5  6  7  8  9  a"
Line 1209 ERROR: Invalid opcode
00000AB4                          1209          .ascii  "  B  C  d  E  F"
Line 1210 ERROR: Undefined symbol
00000AB4= B8 B8 B8                1210  dcr:    dc.b    lf,cr,nul
00000AB8  41F8 03DC               1211  dump:   lea     getch,a0                ;set for terminal input
00000ABC  6100 F91E               1212          bsr     getch                   ;get delimiter
00000AC0  B03C 000D               1213          cmp.b   #$0d,d0                 ;if <cr> then dump from pointer
00000AC4  6600 0010               1214          bne     dexam                   ;else get address
00000AC8  3278 419E               1215          movea.w exam,a1                 ;get exam
00000ACC  3449                    1216          movea.w a1,a2                   ;save it for ending address
00000ACE  D4FC 0040               1217          adda.w  #$40,a2                 ;add 64 for length of dump
00000AD2  6000 0024               1218          bra     dgo                     ;go do it
00000AD6  6100 F954               1219  dexam:  bsr     getw                    ;get starting address
00000ADA  3240                    1220          movea.w d0,a1
00000ADC  6100 F8FE               1221          bsr     getch                   ;get delimiter
00000AE0  B03C 002C               1222          cmp.b   #$2c,d0                 ;if , the get ending address
00000AE4  6600 000C               1223          bne     dcom
00000AE8  6100 F942               1224          bsr     getw                    ;get address
00000AEC  3440                    1225          movea.w d0,a2                   ;save it
00000AEE  6000 0008               1226          bra     dgo                     ;go dump
00000AF2  3449                    1227  dcom:   movea.w a1,a2                   ;default to 64 byte dump
00000AF4  D4FC 0040               1228          adda.w  #$40,a2
00000AF8  41F8 0AAC               1229  dgo:    lea     dmes,a0                 ;do the dump
00000AFC  6100 F71A               1230          bsr     writs
00000B00  41F8 0AB2               1231          lea     dhed,a0                 ;print header
00000B04  6100 F712               1232          bsr     writs
00000B08  2009                    1233          move.l  a1,d0                   ;set starting address at 16 byte boundary
00000B0A  C03C 00F0               1234          and.b   #$f0,d0
00000B0E  3240                    1235          movea.w d0,a1
00000B10  200A                    1236          move.l  a2,d0                   ;round ending address to boundary
00000B12  803C 000F               1237          or.b    #$0f,d0
00000B16  3440                    1238          movea.w d0,a2
00000B18  720F                    1239          moveq   #$0f,d1                 ;move byte count to register
00000B1A  2009                    1240  dl1:    move.l  a1,d0                   ;write starting address
00000B1C  6100 F710               1241          bsr     writw
00000B20  3649                    1242          movea.w a1,a3                   ;save starting address
00000B22  7020                    1243  dflp:   moveq   #$20,d0                 ;write a space
00000B24  6100 F6BA               1244          bsr     writ
00000B28  1019                    1245          move.b  (a1)+,d0                ;get next byte
00000B2A  6100 F6F8               1246          bsr     writb                   ;write it
00000B2E  51C9 FFF2               1247          dbf     d1,dflp                 ;loop
00000B32  720F                    1248          moveq   #$0f,d1                 ;reset byte count
00000B34  324B                    1249          movea.w a3,a1                   ;refetch starting address
00000B36  7020                    1250          moveq   #$20,d0                 ;write a space
00000B38  6100 F6A6               1251          bsr     writ
00000B3C  1019                    1252  dslp:   move.b  (a1)+,d0                ;write the byte representation
00000B3E  B03C 0020               1253          cmp.b   #$20,d0                 ;if not printable then a dot
00000B42  6C00 000A               1254          bge     dok
00000B46  103C 002E               1255          move.b  #$2e,d0                 ;move in the dot
00000B4A  6000 000E               1256          bra     dwrt
00000B4E  B03C 007F               1257  dok:    cmp.b   #$7f,d0                 ;printable again ?
00000B52  6D00 0006               1258          blt     dwrt                    ;yes
00000B56  103C 002E               1259          move.b  #$2e,d0                 ;no, move in a dot
00000B5A  6100 F684               1260  dwrt:   bsr     writ                    ;write it
00000B5E  51C9 FFDC               1261          dbf     d1,dslp                 ;line done ?
00000B62  41F8 0AB4               1262          lea     dcr,a0                  ;yes, so cr-lf
00000B66  6100 F6B0               1263          bsr     writs
00000B6A  7210                    1264          moveq   #$10,d1                 ;reset byte count
00000B6C  B5C9                    1265          cmpa.l  a1,a2                   ;done ?
00000B6E  5DC9 FFAA               1266          dblt    d1,dl1                  ;NO, so loop
00000B72  31C9 419E               1267          move.w  a1,exam                 ;yes, so update exam
00000B76  4E75                    1268          rts
00000B78                          1269  ;
00000B78                          1270  ; Trace - Set trace mode
00000B78                          1271  ;
00000B78                          1272  ;*****************************************
00000B78                          1273  ;*                                       *
00000B78                          1274  ;* Invoke trace as follows:              *
00000B78                          1275  ;*                                       *
00000B78                          1276  ;*       t+ - trace a program's path     *
00000B78                          1277  ;*       t- - turn off trace             *
00000B78                          1278  ;*                                       *
00000B78                          1279  ;*****************************************
00000B78                          1280  ;
Line 1281 ERROR: Undefined symbol
00000B78= B8 B8                   1281  tmes:   dc.b    lf,cr
Line 1282 ERROR: Invalid opcode
00000B7A                          1282          .asciz  "Trace "
Line 1283 ERROR: Invalid opcode
00000B7A                          1283  tonm:   .asciz  "on"
Line 1284 ERROR: Invalid opcode
00000B7A                          1284  toffm:  .asciz  "off"
00000B7A  6100 F860               1285  trace:  bsr     getch                   ;get command
00000B7E  2200                    1286          move.l  d0,d1                   ;save it
00000B80  41F8 0B78               1287          lea     tmes,a0                 ;write message
00000B84  6100 F692               1288          bsr     writs
00000B88  B23C 002B               1289          cmp.b   #$2b,d1                 ;Is it a + ?
00000B8C  6700 0026               1290          beq     ton                     ;yes
Line 1291 ERROR: Undefined symbol
00000B90  0839 0000 005455C4      1291          btst    #$0,bkptf               ;In breakpoint ?
00000B98  6600 0008               1292          bne     tclr                    ;Yes, so don't clear trace
00000B9C  0278 7FFF 4150          1293          andi.w  #$7fff,_sr              ;clear trace
Line 1294 ERROR: Undefined symbol
00000BA2  08B9 0002 005455C4      1294  tclr:   bclr    #$2,bkptf               ;turn-off in-trace flag
Line 1295 ERROR: Undefined symbol
00000BAA  41F9 004DBD16           1295          lea     toffm,a0                ;load off message
00000BB0  6000 001E               1296          bra     tdone                   ;exit
00000BB4  0078 8000 4150          1297  ton:    ori.w   #$8000,_sr              ;set trace bit
Line 1298 ERROR: Undefined symbol
00000BBA  08B9 0001 005455C4      1298          bclr    #$1,bkptf               ;clear single step
Line 1299 ERROR: Undefined symbol
00000BC2  08F9 0002 005455C4      1299          bset    #$2,bkptf               ;set in-trace flag
Line 1300 ERROR: Undefined symbol
00000BCA  41F9 004DBD16           1300          lea     tonm,a0                 ;write message
00000BD0  6100 F646               1301  tdone:  bsr     writs
00000BD4  4E75                    1302          rts
00000BD6                          1303  ;
00000BD6                          1304  ; Single - set single step
00000BD6                          1305  ;
00000BD6                          1306  ;*****************************************
00000BD6                          1307  ;*                                       *
00000BD6                          1308  ;* Invoke single step as follows:        *
00000BD6                          1309  ;*                                       *
00000BD6                          1310  ;*       s+ - turn on single step        *
00000BD6                          1311  ;*       s- - turn off single step       *
00000BD6                          1312  ;*                                       *
00000BD6                          1313  ;*****************************************
00000BD6                          1314  ;
Line 1315 ERROR: Undefined symbol
00000BD6= B8 B8                   1315  smes:   dc.b    lf,cr
Line 1316 ERROR: Invalid opcode
00000BD8                          1316          .asciz  "Single step"
Line 1317 ERROR: Invalid opcode
00000BD8                          1317  sonm:   .asciz  " on "
Line 1318 ERROR: Invalid opcode
00000BD8                          1318  soffm:  .asciz  " off "
Line 1319 ERROR: Undefined symbol
00000BD8= B8                      1319          dc.b    nul
00000BDA  6100 F800               1320  singl:  bsr     getch                   ;get command
00000BDE  2200                    1321          move.l  d0,d1                   ;save it
00000BE0  41F8 0BD6               1322          lea     smes,a0                 ;write message
00000BE4  6100 F632               1323          bsr     writs
00000BE8  B23C 002B               1324          cmp.b   #$2b,d1                 ;+ ?
00000BEC  6700 002A               1325          beq     son                     ;yes
Line 1326 ERROR: Undefined symbol
00000BF0  0839 0000 005455C4      1326          btst    #$0,bkptf               ;In breakpoint ?
00000BF8  6600 0008               1327          bne     sclr                    ;Yes, so don't clear trace
00000BFC  0278 7FFF 4150          1328          andi.w  #$7fff,_sr              ;clear trace bit
Line 1329 ERROR: Undefined symbol
00000C02  08B9 0001 005455C4      1329  sclr:   bclr    #$1,bkptf               ;turn-off in-single flag
Line 1330 ERROR: Undefined symbol
00000C0A  41F9 004DBD16           1330          lea     soffm,a0                ;write off message
00000C10  6100 F606               1331          bsr     writs
00000C14  6000 002E               1332          bra     sdone                   ;exit
Line 1333 ERROR: Undefined symbol
00000C18  08B9 0000 005455C4      1333  son:    bclr    #$0,bkptf               ;clear in-bkpt flag
Line 1334 ERROR: Undefined symbol
00000C20  08F9 0001 005455C4      1334          bset    #$1,bkptf               ;set in-single flag
Line 1335 ERROR: Undefined symbol
00000C28  08B9 0002 005455C4      1335          bclr    #$2,bkptf               ;clear in-trace flag
Line 1336 ERROR: Undefined symbol
00000C30  41F9 004DBD16           1336          lea     sonm,a0                 ;write message
00000C36  6100 F5E0               1337          bsr     writs
00000C3A  6100 FD22               1338          bsr     brem                    ;remove all breakpoints for single
00000C3E  0078 8000 4150          1339          ori.w   #$8000,_sr              ;set trace bit
00000C44  4E75                    1340  sdone:  rts
00000C46                          1341  ;
00000C46                          1342  ; Go - Start user program
00000C46                          1343  ;
00000C46                          1344  ;*****************************************
00000C46                          1345  ;*                                       *
00000C46                          1346  ;* Invoke go as follows:                 *
00000C46                          1347  ;*                                       *
00000C46                          1348  ;*      g<cr> - go from start address in *
00000C46                          1349  ;*              last load                *
00000C46                          1350  ;*      <cr> - same as g<cr>             *
00000C46                          1351  ;*      g xxxx - go from address xxxx    *
00000C46                          1352  ;*                                       *
00000C46                          1353  ;*****************************************
00000C46                          1354  ;
Line 1355 ERROR: Undefined symbol
00000C46= F5B8                    1355  gmes:   dc.w    csc
Line 1356 ERROR: Invalid opcode
00000C48                          1356          .ascii  "Program:"
Line 1357 ERROR: Undefined symbol
00000C48= B8 B8 B8 B8             1357          dc.b    lf,lf,cr,nul
00000C4C  6100 F78E               1358  go:     bsr     getch                   ;get seperator
00000C50  B03C 000D               1359          cmp.b   #$0d,d0                 ;if CR then
00000C54  6700 000E               1360          beq     ggo                     ;start from default
00000C58  41F8 03DC               1361  gget:   lea     getch,a0                ;else get start addr
00000C5C  6100 F7CE               1362          bsr     getw                    ;as given in comm.
00000C60  21C0 4152               1363          move.l  d0,_pc                  ;set for return
Line 1364 ERROR: Undefined symbol
00000C64  0839 0001 005455C4      1364  ggo:    btst    #$1,bkptf               ;single set ?
00000C6C  6600 000A               1365          bne     gnom                    ;Yes so no message
00000C70  41F8 0C46               1366          lea     gmes,a0                 ;write message
00000C74  6100 F5A2               1367          bsr     writs
00000C78  584F                    1368  gnom:   addq.w  #$4,a7                  ;pop the stack
Line 1369 ERROR: Invalid syntax
00000C7A                          1369          movem.l dr0,#$7fff              ;get saved values d0-a6
00000C7A  21CF 41A0               1370          move.l  a7,t1                   ;save system stack pointer
00000C7E  2E78 4192               1371          movea.l ar7,a7                  ;get saved user stack pointer
00000C82  4E67                    1372          move.l  a7,usp                  ;reset the user stack
00000C84  2E78 41A0               1373          movea.l t1,a7                   ;reset system stack
00000C88  2F38 4152               1374  gbmov:  move.l  _pc,-(a7)               ;set up return pc
00000C8C  0278 F8FF 4150          1375          andi.w  #$f8ff,_sr              ;enable interrupts
00000C92  3F38 4150               1376          move.w  _sr,-(a7)               ;set up return sr
00000C96  4E73                    1377          rte
00000C98                          1378  
00000C98                          1379  ;++++++++++++++++++++++++++++++++++++++++
00000C98                          1380  ;+                                      +
00000C98                          1381  ;+     End of commands, Start Handlers  +
00000C98                          1382  ;+                                      +
00000C98                          1383  ;++++++++++++++++++++++++++++++++++++++++
00000C98                          1384  ;
00000C98                          1385  ; Generic trap handler
00000C98                          1386  ;
Line 1387 ERROR: Undefined symbol
00000C98= B8 B8                   1387  ghmes:  dc.b    lf,cr
Line 1388 ERROR: Invalid opcode
00000C9A                          1388          .asciz  "Trap at "
Line 1389 ERROR: Undefined symbol
00000C9A= B8                      1389          dc.b    nul
Line 1390 ERROR: Invalid addressing mode
00000C9C                          1390  ghlr:   movem.l #$ffff,dr0              ;save all registers d0-a7
00000C9C  4E6E                    1391          move.l  usp,a6                  ;get user stack pointer
00000C9E  21CE 4192               1392          move.l  a6,ar7                  ;and save it
00000CA2  31DF 4150               1393          move.w  (a7)+,_sr               ;save current SR
00000CA6  21DF 4152               1394          move.l  (a7)+,_pc               ;save current return value
00000CAA  4878 04A0               1395          pea     comm                    ;set for return to comm
00000CAE  3F38 00CA               1396          move.w  ssri,-(a7)              ;enable interrupts on return
00000CB2  41F8 0C98               1397  ghpr:   lea     ghmes,a0                ;wx message
00000CB6  6100 F560               1398  ghpr1:  bsr     writs
00000CBA  2038 4152               1399          move.l  _pc,d0
00000CBE  6100 F578               1400          bsr     writl
00000CC2  4E73                    1401          rte
00000CC4                          1402  ;
00000CC4                          1403  ; Breakpoint handler
00000CC4                          1404  ;
Line 1405 ERROR: Undefined symbol
00000CC4= B8 B8                   1405  bhmes:  dc.b    lf,cr
Line 1406 ERROR: Invalid opcode
00000CC6                          1406          .asciz  "Breakpoint at "
Line 1407 ERROR: Undefined symbol
00000CC6= B8 B8                   1407  binin:  dc.b    lf,cr
Line 1408 ERROR: Invalid opcode
00000CC8                          1408          .asciz  "Bad Instruction at "
Line 1409 ERROR: Undefined symbol
00000CC8= B8                      1409          dc.b    nul
00000CCA  46F8 00CC               1410  bhlr:   move.w  ssrn,sr                 ;disable interrupts
Line 1411 ERROR: Invalid addressing mode
00000CCE                          1411          movem.l #$ffff,dr0              ;save registers d0-a7
00000CCE  4E6E                    1412          move.l  usp,a6                  ;get and save user stack pointer
00000CD0  21CE 4192               1413          move.l  a6,ar7
00000CD4  31DF 4150               1414          move.w  (a7)+,_sr               ;save status register
00000CD8  21DF 4152               1415          move.l  (a7)+,_pc               ;save program counter
00000CDC  4878 04A0               1416          pea     comm                    ;set for return to comm
00000CE0  3F38 00CA               1417          move.w  ssri,-(a7)              ;enable interrupts on return
00000CE4  2078 4152               1418          movea.l _pc,a0                  ;get pc on interrupt
00000CE8  0C50 FFFF               1419          cmpi.w  #$ffff,(a0)             ;was interrupt caused by bkpt instruction ?
00000CEC  6700 0008               1420          beq     bsnd                    ;Yes
00000CF0  41F8 0CC6               1421          lea     binin,a0                ;No, invalid instruction
00000CF4  60C0                    1422          bra     ghpr1                   ;go wx message
00000CF6  41F8 0CC4               1423  bsnd:   lea     bhmes,a0                ;wx bkpt message
00000CFA  6100 F51C               1424          bsr     writs
00000CFE  2038 4152               1425          move.l  _pc,d0
00000D02  6100 F52A               1426          bsr     writw
00000D06  6100 F710               1427          bsr     crlf
00000D0A  43F8 4138               1428          lea     bktab-4,a1              ;find the breakpoint entry
00000D0E  7204                    1429          move.l  #$4,d1                  ;maximum of 5
00000D10  2038 4152               1430          move.l  _pc,d0                  ;this is where it happened
00000D14  5849                    1431  bhl:    adda.w  #$4,a1
00000D16  B069 0002               1432          cmp.w   iloc(a1),d0             ;is this the entry ?
00000D1A  57C9 FFF8               1433          dbeq    d1,bhl                  ;loop if not
00000D1E  6600 0016               1434          bne     bhrte                   ;not found so quit
00000D22  3440                    1435          movea.w d0,a2                   ;point at it
00000D24  34A9 0000               1436          move.w  instr(a1),(a2)          ;move instruction back in
00000D28  0078 8000 4150          1437          ori.w   #$8000,_sr              ;set trace mode on
Line 1438 ERROR: Undefined symbol
00000D2E  08F9 0000 005455C4      1438          bset    #$0,bkptf               ;set in-bkpt flag
00000D36  4E73                    1439  bhrte:  rte
00000D38                          1440  ;
00000D38                          1441  ; Trace handler
00000D38                          1442  ;
Line 1443 ERROR: Undefined symbol
00000D38= B8 B8                   1443  tlocm:  dc.b    lf,cr
Line 1444 ERROR: Invalid opcode
00000D3A                          1444          .asciz  "PC EQUEQU "
Line 1445 ERROR: Undefined symbol
00000D3A= B8                      1445          dc.b    nul
00000D3C  46F8 00CC               1446  thlr:   move.w  ssrn,sr                 ;disable interrupts
00000D40  21C8 4176               1447          move.l  a0,ar0                  ;save used registers
00000D44  21C0 4156               1448          move.l  d0,dr0
00000D48  21C9 417A               1449          move.l  a1,ar1
00000D4C  21C1 415A               1450          move.l  d1,dr1
00000D50  21CA 417E               1451          move.l  a2,ar2
00000D54  21C2 415E               1452          move.l  d2,dr2
Line 1453 ERROR: Undefined symbol
00000D58  0839 0000 005455C8      1453          btst    #$0,bkptf               ;Handling a breakpoint ?
00000D60  6700 0026               1454          beq     treal                   ;No, so its a real trace
00000D64  2078 4152               1455          movea.l _pc,a0                  ;Yes, find where it occurred
00000D68  30B8 0938               1456          move.w  bkin,(a0)               ;reset the bkpt instruction
Line 1457 ERROR: Undefined symbol
00000D6C  08B9 0000 005455C8      1457          bclr    #$0,bkptf               ;clear in progress bkpt
Line 1458 ERROR: Undefined symbol
00000D74  0839 0002 005455C4      1458          btst    #$2,bkptf               ;In trace mode
00000D7C  6600 000A               1459          bne     treal                   ;yes, go trace it
00000D80  0257 7FFF               1460  thma0:  andi.w  #$7fff,(a7)             ;No, so clear the trace bit
00000D84  6000 0046               1461          bra     trte
00000D88  21EF 0002 4152          1462  treal:  move.l  $2(a7),_pc              ;Not (just) a bkpt but trace or single
Line 1463 ERROR: Undefined symbol
00000D8E  0839 0001 005455C0      1463          btst    #$1,bkptf               ;Trace ?
00000D96  6700 0018               1464          beq     trpr                    ;Yes
Line 1465 ERROR: Invalid addressing mode
00000D9A                          1465          movem.l #$ffff,dr0              ;No,single-step d0-a7
00000D9A  4E6E                    1466          move.l  usp,a6                  ;save registers and stack pointer
00000D9C  21CE 4192               1467          move.l  a6,ar7
00000DA0  31DF 4150               1468          move.w  (a7)+,_sr               ;save status register
00000DA4  21DF 4152               1469          move.l  (a7)+,_pc               ;save pc
00000DA8  4878 04A0               1470          pea     comm                    ;fake return to comm
00000DAC  3F38 00CA               1471          move.w  ssri,-(a7)              ;enable interrupts on return
00000DB0  41F8 0D38               1472  trpr:   lea     tlocm,a0                ;wx message
00000DB4  6100 F462               1473          bsr     writs
00000DB8  2038 4152               1474          move.l  _pc,d0
00000DBC  6100 F47A               1475          bsr     writl
00000DC0  6100 F656               1476          bsr     crlf
00000DC4  2278 4152               1477          move.l  _pc,a1                  ;load the current address
00000DC8  6100 02BE               1478          bsr     ass1                    ;wx the disassembled instruction
00000DCC  2078 4176               1479  trte:   movea.l ar0,a0                  ;restore used registers
00000DD0  2038 4156               1480          move.l  dr0,d0
00000DD4  2278 417A               1481          movea.l ar1,a1
00000DD8  2238 415A               1482          move.l  dr1,d1
00000DDC  2478 417E               1483          movea.l ar2,a2
00000DE0  2438 415E               1484          move.l  dr2,d2
00000DE4  4E73                    1485  tr:     rte
00000DE6                          1486  ;
00000DE6                          1487  ; Privilege Violation Handler
00000DE6                          1488  ;
00000DE6                          1489  ; See generic handler for details
00000DE6                          1490  ;
Line 1491 ERROR: Undefined symbol
00000DE6= B8 B8                   1491  prmes:  dc.b    lf,cr
Line 1492 ERROR: Invalid opcode
00000DE8                          1492          .asciz  "Privilege Error at "
Line 1493 ERROR: Invalid addressing mode
00000DE8                          1493  phlr:   movem.l #$ffff,dr0              ;regs d0-a7
00000DE8  4E6E                    1494          move.l  usp,a6
00000DEA  21CE 4192               1495          move.l  a6,ar7
00000DEE  31DF 4150               1496          move.w  (a7)+,_sr
00000DF2  21DF 4152               1497          move.l  (a7)+,_pc
00000DF6  4878 04A0               1498          pea     comm
00000DFA  3F38 00CA               1499          move.w  ssri,-(a7)
00000DFE  41F8 0DE6               1500  prpr:   lea     prmes,a0
00000E02  6000 FEB2               1501          bra     ghpr1
00000E06                          1502  ;
00000E06                          1503  ; address error/bus error trap
00000E06                          1504  ;
Line 1505 ERROR: Undefined symbol
00000E06= B8 B8                   1505  abmes:  dc.b    lf,cr
Line 1506 ERROR: Invalid opcode
00000E08                          1506          .asciz  "address error at "
Line 1507 ERROR: Invalid addressing mode
00000E08                          1507  abhlr:  movem.l #$ffff,dr0              ;regs d0-a7
00000E08  4E6E                    1508          move.l  usp,a6
00000E0A  21CE 4192               1509          move.l  a6,ar7                  ;same as above but...
00000E0E  31EF 0008 4150          1510          move.w  $8(a7),_sr              ;status register is deeper in stack
00000E14  21EF 000A 4152          1511          move.l  $a(a7),_pc              ;also pc
00000E1A  4878 04A0               1512          pea     comm
00000E1E  3F38 00CA               1513          move.w  ssri,-(a7)
00000E22  41F8 0E06               1514  abpr:   lea     abmes,a0
00000E26  6000 FE8E               1515          bra     ghpr1
00000E2A                          1516  ;
00000E2A                          1517  ; Macro instruction handlers
00000E2A                          1518  ;
00000E2A                          1519  ;
00000E2A                          1520  ; Exit
00000E2A                          1521  ;
Line 1522 ERROR: Invalid addressing mode
00000E2A                          1522  texit:  movem.l #$ffff,dr0              ;save register values d0-a7
00000E2A  4E6E                    1523          move.l  usp,a6                  ;save user stack pointer
00000E2C  21CE 4192               1524          move.l  a6,ar7
00000E30  31DF 4150               1525          move.w  (a7)+,_sr               ;save status register
00000E34  21DF 4152               1526          move.l  (a7)+,_pc               ;save pc
Line 1527 ERROR: Undefined symbol
00000E38  4FF9 004DBD16           1527          lea     stack,a7                ;reset system mode stack
00000E3E  4878 04A0               1528          pea     comm                    ;fake return to comm
00000E42  3F38 00CA               1529          move.w  ssri,-(a7)              ;ditto for status
00000E46  4E73                    1530          rte
00000E48                          1531  ;
00000E48                          1532  ; Getb
00000E48                          1533  ;
00000E48  41F8 03DC               1534  tgetb:  lea     getch,a0
00000E4C  6100 F5D4               1535          bsr     getb
00000E50  4E73                    1536          rte
00000E52                          1537  ;
00000E52                          1538  ; Getw
00000E52                          1539  ;
00000E52  41F8 03DC               1540  tgetw:  lea     getch,a0
00000E56  6100 F5D4               1541          bsr     getw
00000E5A  4E73                    1542          rte
00000E5C                          1543  ;
00000E5C                          1544  ; Getl
00000E5C                          1545  ;
00000E5C  41F8 03DC               1546  tgetl:  lea     getch,a0
00000E60  6100 F5D4               1547          bsr     getl
00000E64  4E73                    1548          rte
00000E66                          1549  ;
00000E66                          1550  ; Wrtb
00000E66                          1551  ;
00000E66  6100 F3BC               1552  twrtb:  bsr     writb
00000E6A  4E73                    1553          rte
00000E6C                          1554  ;
00000E6C                          1555  ; Wrtw
00000E6C                          1556  ;
00000E6C  6100 F3C0               1557  twrtw:  bsr     writw
00000E70  4E73                    1558          rte
00000E72                          1559  ;
00000E72                          1560  ; Wrtl
00000E72                          1561  ;
00000E72  6100 F3C4               1562  twrtl:  bsr     writl
00000E76  4E73                    1563          rte
00000E78                          1564  ;
00000E78                          1565  ; Getc
00000E78                          1566  ;
00000E78  6100 F562               1567  tgetc:  bsr     getch
00000E7C  4E73                    1568          rte
00000E7E                          1569  ;
00000E7E                          1570  ; Wrts
00000E7E                          1571  ;
00000E7E  6100 F398               1572  twrts:  bsr     writs
00000E82  4E73                    1573          rte
00000E84                          1574  ;
00000E84                          1575  ; Wrtc
00000E84                          1576  ;
00000E84  6100 F35A               1577  twrtc:  bsr     writ
00000E88  4E73                    1578          rte
00000E8A                          1579  ;
00000E8A                          1580  ; Crlf
00000E8A                          1581  ;
00000E8A  6100 F58C               1582  tcrlf:  bsr     crlf
00000E8E  4E73                    1583          rte
00000E90                          1584  ;
00000E90                          1585  ; Help - display help messages
00000E90                          1586  ;
00000E90                          1587  ;*****************************************
00000E90                          1588  ;*                                       *
00000E90                          1589  ;* Invoke help as follows:               *
00000E90                          1590  ;*                                       *
00000E90                          1591  ;*      h<cr> - print list of available  *
00000E90                          1592  ;*              help                     *
00000E90                          1593  ;*      hx - print help message for x    *
00000E90                          1594  ;*                                       *
00000E90                          1595  ;*****************************************
Line 1596 ERROR: Invalid opcode
00000E90                          1596  hlph:   .ascii " H - display help messages"
Line 1597 ERROR: Undefined symbol
00000E90= B8 B8 B8                1597          dc.b    cr,lf,nul
Line 1598 ERROR: Invalid opcode
00000E93                          1598  hlph1:  .ascii " Invoke help as follows:"
Line 1599 ERROR: Undefined symbol
00000E93= B8 B8                   1599          dc.b    cr,lf
Line 1600 ERROR: Invalid opcode
00000E95                          1600          .ascii "      h<cr> - print list of available help"
Line 1601 ERROR: Undefined symbol
00000E95= B8 B8                   1601          dc.b    cr,lf
Line 1602 ERROR: Invalid opcode
00000E97                          1602          .ascii "      hx - print help message for x"
Line 1603 ERROR: Undefined symbol
00000E97= B8 B8 B8                1603          dc.b    cr,lf,nul
00000E9A                          1604  
Line 1605 ERROR: Invalid opcode
00000E9A                          1605  hlpc:   .ascii " C - Copy memory blocks"
Line 1606 ERROR: Undefined symbol
00000E9A= B8 B8 B8                1606          dc.b    cr,lf,nul
Line 1607 ERROR: Invalid opcode
00000E9D                          1607  hlpc1:  .ascii " Copy is invoked as follows:"
Line 1608 ERROR: Undefined symbol
00000E9D= B8 B8                   1608          dc.b    cr,lf
Line 1609 ERROR: Invalid opcode
00000E9F                          1609          .ascii "          c xxxxEQUyyyy,zzzz"
Line 1610 ERROR: Undefined symbol
00000E9F= B8 B8                   1610          dc.b    cr,lf
Line 1611 ERROR: Invalid opcode
00000EA1                          1611          .ascii " Copy locations yyyy thru zzzz to"
Line 1612 ERROR: Undefined symbol
00000EA1= B8 B8                   1612          dc.b    cr,lf
Line 1613 ERROR: Invalid opcode
00000EA3                          1613          .ascii " locations xxxx and upward."
Line 1614 ERROR: Undefined symbol
00000EA3= B8 B8 B8                1614          dc.b    cr,lf,nul
00000EA6                          1615  
Line 1616 ERROR: Invalid opcode
00000EA6                          1616  hlpm:   .ascii " M - memory update"
Line 1617 ERROR: Undefined symbol
00000EA6= B8 B8 B8                1617          dc.b    cr,lf,nul
Line 1618 ERROR: Invalid opcode
00000EA9                          1618  hlpm1:  .ascii " Memory sub-commands are as follows:"
Line 1619 ERROR: Undefined symbol
00000EA9= B8 B8                   1619          dc.b    cr,lf
Line 1620 ERROR: Undefined symbol
00000EAB= B8 B8                   1620          dc.b    cr,lf
Line 1621 ERROR: Invalid opcode
00000EAD                          1621          .ascii "          m<cr> - start memory mode"
Line 1622 ERROR: Undefined symbol
00000EAD= B8 B8                   1622          dc.b    cr,lf
Line 1623 ERROR: Invalid opcode
00000EAF                          1623          .ascii "          m xxxx - start m mode at location xxxx"
Line 1624 ERROR: Undefined symbol
00000EAF= B8 B8                   1624          dc.b    cr,lf
Line 1625 ERROR: Invalid opcode
00000EB1                          1625          .ascii "          .xxxx - set pointer to location xxxx"
Line 1626 ERROR: Undefined symbol
00000EB1= B8 B8                   1626          dc.b    cr,lf
Line 1627 ERROR: Invalid opcode
00000EB3                          1627          .ascii "          EQUxx - update current location to xx"
Line 1628 ERROR: Undefined symbol
00000EB3= B8 B8                   1628          dc.b    cr,lf
Line 1629 ERROR: Invalid opcode
00000EB5                          1629          .ascii "          ,xx - increment location and update it to xx"
Line 1630 ERROR: Undefined symbol
00000EB5= B8 B8                   1630          dc.b    cr,lf
Line 1631 ERROR: Invalid opcode
00000EB7                          1631          .ascii "          + - increment location"
Line 1632 ERROR: Undefined symbol
00000EB7= B8 B8                   1632          dc.b    cr,lf
Line 1633 ERROR: Invalid opcode
00000EB9                          1633          .ascii "          - - decrement location"
Line 1634 ERROR: Undefined symbol
00000EB9= B8 B8                   1634          dc.b    cr,lf
Line 1635 ERROR: Invalid opcode
00000EBB                          1635          .ascii "          <cr> - print current location and value"
Line 1636 ERROR: Undefined symbol
00000EBB= B8 B8 B8                1636          dc.b    cr,lf,nul
00000EBE                          1637  
Line 1638 ERROR: Invalid opcode
00000EBE                          1638  hlpr:   .ascii " R - Modify/examine registers"
Line 1639 ERROR: Undefined symbol
00000EBE= B8 B8 B8                1639          dc.b    cr,lf,nul
Line 1640 ERROR: Invalid opcode
00000EC1                          1640  hlpr1:  .ascii " Register subcommands are as follows:"
Line 1641 ERROR: Undefined symbol
00000EC1= B8 B8                   1641          dc.b    cr,lf
Line 1642 ERROR: Undefined symbol
00000EC3= B8 B8                   1642          dc.b    cr,lf
Line 1643 ERROR: Invalid opcode
00000EC5                          1643          .ascii "      r<cr> - start register mode"
Line 1644 ERROR: Undefined symbol
00000EC5= B8 B8                   1644          dc.b    cr,lf
Line 1645 ERROR: Invalid opcode
00000EC7                          1645          .ascii "      r xx - start r mode at register xx. Where xx :"
Line 1646 ERROR: Undefined symbol
00000EC7= B8 B8                   1646          dc.b    cr,lf
Line 1647 ERROR: Invalid opcode
00000EC9                          1647          .ascii "            SR/_sr - status register"
Line 1648 ERROR: Undefined symbol
00000EC9= B8 B8                   1648          dc.b    cr,lf
Line 1649 ERROR: Invalid opcode
00000ECB                          1649          .ascii "            PC/_pc - program counter"
Line 1650 ERROR: Undefined symbol
00000ECB= B8 B8                   1650          dc.b    cr,lf
Line 1651 ERROR: Invalid opcode
00000ECD                          1651          .ascii "            d0 - d7 - data registers"
Line 1652 ERROR: Undefined symbol
00000ECD= B8 B8                   1652          dc.b    cr,lf
Line 1653 ERROR: Invalid opcode
00000ECF                          1653          .ascii "            a0 - a7 - address regs."
Line 1654 ERROR: Undefined symbol
00000ECF= B8 B8                   1654          dc.b    cr,lf
Line 1655 ERROR: Invalid opcode
00000ED1                          1655          .ascii "     .xx - set pointer to register"
Line 1656 ERROR: Undefined symbol
00000ED1= B8 B8                   1656          dc.b    cr,lf
Line 1657 ERROR: Invalid opcode
00000ED3                          1657          .ascii "     EQUxxxxxxxx - update current register to xxxxxxxx"
Line 1658 ERROR: Undefined symbol
00000ED3= B8 B8                   1658          dc.b    cr,lf
Line 1659 ERROR: Invalid opcode
00000ED5                          1659          .ascii "     <cr> - print all registers"
Line 1660 ERROR: Undefined symbol
00000ED5= B8 B8 B8                1660          dc.b    cr,lf,nul
00000ED8                          1661  
Line 1662 ERROR: Invalid opcode
00000ED8                          1662  hlpl:   .ascii " L - Load data from host"
Line 1663 ERROR: Undefined symbol
00000ED8= B8 B8 B8                1663          dc.b    cr,lf,nul
Line 1664 ERROR: Invalid opcode
00000EDB                          1664  hlpu:   .ascii " U - Load data from terminal port"
Line 1665 ERROR: Undefined symbol
00000EDB= B8 B8 B8                1665          dc.b    cr,lf,nul
Line 1666 ERROR: Invalid opcode
00000EDE                          1666  hlpl1:  .ascii " Load is invoked as follows:"
Line 1667 ERROR: Undefined symbol
00000EDE= B8 B8                   1667          dc.b    cr,lf
Line 1668 ERROR: Invalid opcode
00000EE0                          1668          .ascii "       l<cr> - load from host with no offset"
Line 1669 ERROR: Undefined symbol
00000EE0= B8 B8                   1669          dc.b    cr,lf
Line 1670 ERROR: Invalid opcode
00000EE2                          1670          .ascii "       <ff> - same as l<cr> but used from emulator mode"
Line 1671 ERROR: Undefined symbol
00000EE2= B8 B8                   1671          dc.b    cr,lf
Line 1672 ERROR: Invalid opcode
00000EE4                          1672          .ascii "       l xxxx - load with offset xxxx"
Line 1673 ERROR: Undefined symbol
00000EE4= B8 B8 B8 B8             1673          dc.b    cr,lf,cr,lf
Line 1674 ERROR: Invalid opcode
00000EE8                          1674          .ascii " Upload is invoked as follows:"
Line 1675 ERROR: Undefined symbol
00000EE8= B8 B8                   1675          dc.b    cr,lf
Line 1676 ERROR: Invalid opcode
00000EEA                          1676          .ascii  "      u<cr> - load from terminal with no offset"
Line 1677 ERROR: Undefined symbol
00000EEA= B8 B8                   1677          dc.b    cr,lf
Line 1678 ERROR: Invalid opcode
00000EEC                          1678          .ascii  "      u xxxx - load from terminal with offset xxxx"
Line 1679 ERROR: Undefined symbol
00000EEC= B8 B8 B8                1679          dc.b    cr,lf,nul
00000EEF                          1680  
Line 1681 ERROR: Invalid opcode
00000EEF                          1681  hlpe:   .ascii " E - Enter terminal emulator mode"
Line 1682 ERROR: Undefined symbol
00000EEF= B8 B8 B8                1682          dc.b    cr,lf,nul
Line 1683 ERROR: Invalid opcode
00000EF2                          1683  hlpe1:  .ascii " Invoke emulator mode as follows"
Line 1684 ERROR: Undefined symbol
00000EF2= B8 B8                   1684          dc.b    cr,lf
Line 1685 ERROR: Undefined symbol
00000EF4= B8 B8                   1685          dc.b    cr,lf
Line 1686 ERROR: Invalid opcode
00000EF6                          1686          .ascii "       e"
Line 1687 ERROR: Undefined symbol
00000EF6= B8 B8                   1687          dc.b    cr,lf
Line 1688 ERROR: Invalid opcode
00000EF8                          1688          .ascii "    NOTE: That in this mode any character except"
Line 1689 ERROR: Undefined symbol
00000EF8= B8 B8                   1689          dc.b    cr,lf
Line 1690 ERROR: Invalid opcode
00000EFA                          1690          .ascii "    a ctrl-x may be sent to the host. Ctrl-x is the"
Line 1691 ERROR: Undefined symbol
00000EFA= B8 B8                   1691          dc.b    cr,lf
Line 1692 ERROR: Invalid opcode
00000EFC                          1692          .ascii "    escape sequence for getting out of terminal emulator"
Line 1693 ERROR: Undefined symbol
00000EFC= B8 B8                   1693          dc.b    cr,lf
Line 1694 ERROR: Invalid opcode
00000EFE                          1694          .ascii "    mode. Ctrl-l does the same thing except a load (l)"
Line 1695 ERROR: Undefined symbol
00000EFE= B8 B8                   1695          dc.b    cr,lf
Line 1696 ERROR: Invalid opcode
00000F00                          1696          .ascii "    command is put in the command buffer."
Line 1697 ERROR: Undefined symbol
00000F00= B8 B8 B8                1697          dc.b    cr,lf,nul
00000F03                          1698  
Line 1699 ERROR: Invalid opcode
00000F03                          1699  hlpp:   .ascii " P - Prototype commands in RAM"
Line 1700 ERROR: Undefined symbol
00000F03= B8 B8 B8                1700          dc.b    cr,lf,nul
Line 1701 ERROR: Invalid opcode
00000F06                          1701  hlpp1:  .ascii " Prototype commands are invoked:"
Line 1702 ERROR: Undefined symbol
00000F06= B8 B8                   1702          dc.b    cr,lf
Line 1703 ERROR: Invalid opcode
00000F08                          1703          .ascii "      px xxxx - load address xxxx for prototype command x."
Line 1704 ERROR: Undefined symbol
00000F08= B8 B8                   1704          dc.b    cr,lf
Line 1705 ERROR: Invalid opcode
00000F0A                          1705          .ascii "      px<cr> - execute prototype command x."
Line 1706 ERROR: Undefined symbol
00000F0A= B8 B8                   1706          dc.b    cr,lf
Line 1707 ERROR: Undefined symbol
00000F0C= B8 B8                   1707          dc.b    cr,lf
Line 1708 ERROR: Invalid opcode
00000F0E                          1708          .ascii "      NOTE: x must be a 1, 2, or 3"
Line 1709 ERROR: Undefined symbol
00000F0E= B8 B8 B8                1709          dc.b    cr,lf,nul
00000F11                          1710  
Line 1711 ERROR: Invalid opcode
00000F11                          1711  hlpb:   .ascii " B - Set/Remove breakpoints"
Line 1712 ERROR: Undefined symbol
00000F11= B8 B8 B8                1712          dc.b    cr,lf,nul
Line 1713 ERROR: Invalid opcode
00000F14                          1713  hlpb1:  .ascii " Breakpoint is invoked as follows:"
Line 1714 ERROR: Undefined symbol
00000F14= B8 B8                   1714          dc.b    cr,lf
Line 1715 ERROR: Invalid opcode
00000F16                          1715          .ascii "         b<cr> - display breakpoints"
Line 1716 ERROR: Undefined symbol
00000F16= B8 B8                   1716          dc.b    cr,lf
Line 1717 ERROR: Invalid opcode
00000F18                          1717          .ascii "         b+xxxx - add a breakpoint at xxxx"
Line 1718 ERROR: Undefined symbol
00000F18= B8 B8                   1718          dc.b    cr,lf
Line 1719 ERROR: Invalid opcode
00000F1A                          1719          .ascii "         b-xxxx - delete breakpoint at xxxx"
Line 1720 ERROR: Undefined symbol
00000F1A= B8 B8                   1720          dc.b    cr,lf
Line 1721 ERROR: Invalid opcode
00000F1C                          1721          .ascii "         b# - delete all breakpoints"
Line 1722 ERROR: Undefined symbol
00000F1C= B8 B8 B8                1722          dc.b    cr,lf,nul
00000F1F                          1723  
Line 1724 ERROR: Invalid opcode
00000F1F                          1724  hlpd:   .ascii " D - dump memory"
Line 1725 ERROR: Undefined symbol
00000F1F= B8 B8 B8                1725          dc.b    cr,lf,nul
Line 1726 ERROR: Invalid opcode
00000F22                          1726  hlpd1:  .ascii "    dump is invoked as follows:"
Line 1727 ERROR: Undefined symbol
00000F22= B8 B8                   1727          dc.b    cr,lf
Line 1728 ERROR: Undefined symbol
00000F24= B8 B8                   1728          dc.b    cr,lf
Line 1729 ERROR: Invalid opcode
00000F26                          1729          .ascii "    d<cr> - dump the next 64 bytes from last examined location"
Line 1730 ERROR: Undefined symbol
00000F26= B8 B8                   1730          dc.b    cr,lf
Line 1731 ERROR: Invalid opcode
00000F28                          1731          .ascii "    d xxxx<cr> - dump the next 64 bytes from address xxxx"
Line 1732 ERROR: Undefined symbol
00000F28= B8 B8                   1732          dc.b    cr,lf
Line 1733 ERROR: Invalid opcode
00000F2A                          1733          .ascii "    d xxxx,yyyy - dump the bytes between xxxx and yyyy"
Line 1734 ERROR: Undefined symbol
00000F2A= B8 B8 B8                1734          dc.b    cr,lf,nul
00000F2D                          1735  
Line 1736 ERROR: Invalid opcode
00000F2D                          1736  hlpa:   .ascii " A - Assembly listing"
Line 1737 ERROR: Undefined symbol
00000F2D= B8 B8 B8                1737          dc.b    cr,lf,nul
Line 1738 ERROR: Invalid opcode
00000F30                          1738  hlpa1:  .ascii "    disassembly is invoked as follows:"
Line 1739 ERROR: Undefined symbol
00000F30= B8 B8                   1739          dc.b    cr,lf
Line 1740 ERROR: Undefined symbol
00000F32= B8 B8                   1740          dc.b    cr,lf
Line 1741 ERROR: Invalid opcode
00000F34                          1741          .ascii "    a<cr> - list the next 20 instructions from last location"
Line 1742 ERROR: Undefined symbol
00000F34= B8 B8                   1742          dc.b    cr,lf
Line 1743 ERROR: Invalid opcode
00000F36                          1743          .ascii "    a xxxx<cr> - list the next 20 instructions from address xxxx"
Line 1744 ERROR: Undefined symbol
00000F36= B8 B8                   1744          dc.b    cr,lf
Line 1745 ERROR: Invalid opcode
00000F38                          1745          .ascii "    a xxxx,yyyy - list the instructions between xxxx and yyyy"
Line 1746 ERROR: Undefined symbol
00000F38= B8 B8 B8                1746          dc.b    cr,lf,nul
00000F3B                          1747  
Line 1748 ERROR: Invalid opcode
00000F3B                          1748  hlpt:   .ascii " T - Set trace mode"
Line 1749 ERROR: Undefined symbol
00000F3B= B8 B8 B8                1749          dc.b    cr,lf,nul
Line 1750 ERROR: Invalid opcode
00000F3E                          1750  hlpt1:  .ascii " Invoke trace as follows:"
Line 1751 ERROR: Undefined symbol
00000F3E= B8 B8                   1751          dc.b    cr,lf
Line 1752 ERROR: Undefined symbol
00000F40= B8 B8                   1752          dc.b    cr,lf
Line 1753 ERROR: Invalid opcode
00000F42                          1753          .ascii "       t+ - trace a program's path"
Line 1754 ERROR: Undefined symbol
00000F42= B8 B8                   1754          dc.b    cr,lf
Line 1755 ERROR: Invalid opcode
00000F44                          1755          .ascii "       t- - turn off trace"
Line 1756 ERROR: Undefined symbol
00000F44= B8 B8 B8                1756          dc.b    cr,lf,nul
00000F47                          1757  
Line 1758 ERROR: Invalid opcode
00000F47                          1758  hlps:   .ascii " S - set single step"
Line 1759 ERROR: Undefined symbol
00000F47= B8 B8 B8                1759          dc.b    cr,lf,nul
Line 1760 ERROR: Invalid opcode
00000F4A                          1760  hlps1:  .ascii " Invoke single step as follows:"
Line 1761 ERROR: Undefined symbol
00000F4A= B8 B8                   1761          dc.b    cr,lf
Line 1762 ERROR: Undefined symbol
00000F4C= B8 B8                   1762          dc.b    cr,lf
Line 1763 ERROR: Invalid opcode
00000F4E                          1763          .ascii "       s+ - turn on single step"
Line 1764 ERROR: Undefined symbol
00000F4E= B8 B8                   1764          dc.b    cr,lf
Line 1765 ERROR: Invalid opcode
00000F50                          1765          .ascii "       s- - turn off single step"
Line 1766 ERROR: Undefined symbol
00000F50= B8 B8 B8                1766          dc.b    cr,lf,nul
00000F53                          1767  
Line 1768 ERROR: Invalid opcode
00000F53                          1768  hlpg:   .ascii " G - Start user program"
Line 1769 ERROR: Undefined symbol
00000F53= B8 B8 B8                1769          dc.b    cr,lf,nul
Line 1770 ERROR: Invalid opcode
00000F56                          1770  hlpg1:  .ascii " Invoke go as follows:"
Line 1771 ERROR: Undefined symbol
00000F56= B8 B8                   1771          dc.b    cr,lf
Line 1772 ERROR: Undefined symbol
00000F58= B8 B8                   1772          dc.b    cr,lf
Line 1773 ERROR: Invalid opcode
00000F5A                          1773          .ascii "      g<cr> - go from start address in last load"
Line 1774 ERROR: Undefined symbol
00000F5A= B8 B8                   1774          dc.b    cr,lf
Line 1775 ERROR: Invalid opcode
00000F5C                          1775          .ascii "      <cr> - same as g<cr>"
Line 1776 ERROR: Undefined symbol
00000F5C= B8 B8                   1776          dc.b    cr,lf
Line 1777 ERROR: Invalid opcode
00000F5E                          1777          .ascii "      g xxxx - go from address xxxx "
Line 1778 ERROR: Undefined symbol
00000F5E= B8 B8 B8                1778          dc.b    cr,lf,nul
00000F61                          1779  
00000F62= 4800                    1780  htab:   dc.w    $4800           ;h - help
Line 1781 ERROR: Undefined symbol
00000F64= F5B8 F5B8               1781          dc.w    hlph,hlph1
00000F68= 4D00                    1782          dc.w    $4d00           ;m - memory
Line 1783 ERROR: Undefined symbol
00000F6A= F5B8 F5B8               1783          dc.w    hlpm,hlpm1
00000F6E= 4C00                    1784          dc.w    $4c00           ;l - load
Line 1785 ERROR: Undefined symbol
00000F70= F5B8 F5B8               1785          dc.w    hlpl,hlpl1
00000F74= 5500                    1786          dc.w    $5500           ;u - upload
Line 1787 ERROR: Undefined symbol
00000F76= F5B8 F5B8               1787          dc.w    hlpu,hlpl1
00000F7A= 4400                    1788          dc.w    $4400           ;d - dump
Line 1789 ERROR: Undefined symbol
00000F7C= F5B8 F5B8               1789          dc.w    hlpd,hlpd1
00000F80= 5300                    1790          dc.w    $5300           ;s - single step
Line 1791 ERROR: Undefined symbol
00000F82= F5B8 F5B8               1791          dc.w    hlps,hlps1
00000F86= 5400                    1792          dc.w    $5400           ;t - trace program
Line 1793 ERROR: Undefined symbol
00000F88= F5B8 F5B8               1793          dc.w    hlpt,hlpt1
00000F8C= 4700                    1794          dc.w    $4700           ;g - start user program
Line 1795 ERROR: Undefined symbol
00000F8E= F5B8 F5B8               1795          dc.w    hlpg,hlpg1
00000F92= 4500                    1796          dc.w    $4500           ;e - emulate mode
Line 1797 ERROR: Undefined symbol
00000F94= F5B8 F5B8               1797          dc.w    hlpe,hlpe1
00000F98= 4200                    1798          dc.w    $4200           ;b - breakpoints
Line 1799 ERROR: Undefined symbol
00000F9A= F5B8 F5B8               1799          dc.w    hlpb,hlpb1
00000F9E= 4300                    1800          dc.w    $4300           ;c - copy
Line 1801 ERROR: Undefined symbol
00000FA0= F5B8 F5B8               1801          dc.w    hlpc,hlpc1
00000FA4= 5200                    1802          dc.w    $5200           ;r - register modify
Line 1803 ERROR: Undefined symbol
00000FA6= F5B8 F5B8               1803          dc.w    hlpr,hlpr1
00000FAA= 5000                    1804          dc.w    $5000           ;p - prototype commands
Line 1805 ERROR: Undefined symbol
00000FAC= F5B8 F5B8               1805          dc.w    hlpp,hlpp1
00000FB0= 4100                    1806          dc.w    $4100           ;a - assembly listing
Line 1807 ERROR: Undefined symbol
00000FB2= F5B8 F5B8               1807          dc.w    hlpa,hlpa1
00000FB6                          1808  ;
00000FB6                          1809  ; Structure of entry is topic (top),
00000FB6                          1810  ; address of short message (hshort),
00000FB6                          1811  ; and address of long message (hlong).
00000FB6                          1812  ;
00000FB6  6100 F424               1813  help:   bsr     getch           ;get argument
00000FBA  0200 005F               1814          andi.b  #$5f,d0         ;make it uppercase
00000FBE  0C00 000D               1815          cmpi.b  #$0d,d0         ;is it a carriage return?
00000FC2  6600 001E               1816          bne     htopic          ;no, so decode topic
00000FC6  6100 F450               1817  hall:   bsr     crlf
00000FCA  6100 F44C               1818          bsr     crlf
00000FCE  720D                    1819          moveq   #$0d,d1         ;load total # topics - 1
00000FD0  43F8 0F64               1820          lea     htab+2,a1       ;load location of short help
00000FD4  3051                    1821  shlp:   movea.w (a1),a0         ;copy help location to a0
00000FD6  6100 F240               1822          bsr     writs           ;write a short help message
00000FDA  5C49                    1823          addq.w  #$06,a1         ;increment to next help message
00000FDC  51C9 FFF6               1824          dbf     d1,shlp         ;if not last message, print another one
00000FE0  4E75                    1825          rts
00000FE2  43F8 0F62               1826  htopic: lea     htab,a1         ;set up search of ctab
00000FE6  720D                    1827          moveq   #$0d,d1         ;load total # topics - 1
00000FE8  B011                    1828  lhlp:   cmp.b   (a1),d0         ;is the topic equal to the table value?
00000FEA  6700 000A               1829          beq     hprn            ;if so, print the short and long helps
00000FEE  5C49                    1830          addq.w  #$06,a1         ;else go to the next table location
00000FF0  51C9 FFF6               1831          dbf     d1,lhlp         ;if not finished, try again
00000FF4  60D0                    1832          bra     hall            ;if not one of these, print all shorts
00000FF6  6100 F420               1833  hprn:   bsr     crlf
00000FFA  6100 F41C               1834          bsr     crlf
00000FFE  5449                    1835          addq.w  #$02,a1         ;increment a2 to short help location
00001000  3059                    1836          movea.w (a1)+,a0        ;transfer address to a0
00001002  6100 F214               1837          bsr     writs           ;write the short message
00001006  6100 F410               1838          bsr     crlf            ;feed an extra line
0000100A  3051                    1839          movea.w (a1),a0         ;transfer long help address to a0
0000100C  6100 F20A               1840          bsr     writs           ;write the long message
00001010  4E75                    1841          rts
00001012                          1842  
00001012                          1843  ;
00001012                          1844  ; assem - assembly listing
00001012                          1845  ;
00001012                          1846  ;****************************************
00001012                          1847  ;*                                      *
00001012                          1848  ;*      assem is invoked as follows:    *
00001012                          1849  ;*                                      *
00001012                          1850  ;*      a<cr> - disassemble the next    *
00001012                          1851  ;*              20 instructions from    *
00001012                          1852  ;*              last examined location  *
00001012                          1853  ;*      a xxxx<cr> - disassemble 20     *
00001012                          1854  ;*              instructions from xxxx  *
00001012                          1855  ;*      a xxxx,yyyy - disassemble all   *
00001012                          1856  ;*              instructions from xxxx  *
00001012                          1857  ;*              to yyyy                 *
00001012                          1858  ;*                                      *
00001012                          1859  ;****************************************
00001012                          1860  
Line 1861 ERROR: Undefined symbol
00001012= B8 B8 B8                1861  ames:   dc.b    lf,lf,cr
Line 1862 ERROR: Invalid opcode
00001015                          1862          .ascii  "assembly listing:"
Line 1863 ERROR: Undefined symbol
00001015= B8 B8 B8 B8             1863          dc.b    lf,cr,nul,nul
0000101A  41F8 03DC               1864  assem:  lea     getch,a0        ;set for terminal input
0000101E  6100 F3BC               1865          bsr     getch           ;get delimiter
00001022  B03C 000D               1866          cmp.b   #$0d,d0         ;if <cr> then list from pointer
00001026  6600 0020               1867          bne     aexam           ;else get address
0000102A  3278 419E               1868          movea.w exam,a1         ;get exam
0000102E  41F8 1012               1869          lea     ames,a0         ;write message
00001032  6100 F1E4               1870          bsr     writs
00001036  143C 0013               1871          move.b  #$13,d2         ;load 19 into d2
0000103A  6100 004C               1872  ass20:  bsr     ass1            ;list a single instruction
0000103E  51CA FFFA               1873          dbf     d2,ass20        ;if not finished, decrement and go again
00001042  31C9 419E               1874          move.w  a1,exam         ;save new examination pointer
00001046  4E75                    1875          rts
00001048  6100 F3E2               1876  aexam:  bsr     getw            ;get starting address
0000104C  3240                    1877          movea.w d0,a1
0000104E  6100 F38C               1878          bsr     getch           ;get delimiter
00001052  0C00 002C               1879          cmpi.b  #$2c,d0         ;if , then get ending address
00001056  6600 0022               1880          bne     acom
0000105A  6100 F3D0               1881          bsr     getw            ;get address
0000105E  31C0 42D8               1882          move.w  d0,aend         ;save it
00001062  41F8 1012               1883          lea     ames,a0         ;write message
00001066  6100 F1B0               1884          bsr     writs
0000106A  6100 001C               1885  assxy:  bsr     ass1            ;list a single instruction
0000106E  B2F8 42D8               1886          cmpa.w  aend,a1         ;reached the end of the range yet?
00001072  6FF6                    1887          ble     assxy           ;if not, do it again
00001074  31C9 419E               1888          move.w  a1,exam         ;save new examination pointer
00001078  4E75                    1889          rts
0000107A  41F8 1012               1890  acom:   lea     ames,a0         ;write message
0000107E  6100 F198               1891          bsr     writs
00001082  143C 0013               1892          move.b  #$13,d2         ;load 19 into d2
00001086  60B2                    1893          bra     ass20           ;jump to dump 20 routine
00001088                          1894  
00001088  3009                    1895  ass1:   move.w  a1,d0           ;load the address
0000108A  6100 F1A2               1896          bsr     writw           ;print it out
0000108E  6100 11CC               1897          bsr     spc
00001092  6100 11C8               1898          bsr     spc
00001096  3019                    1899          move.w  (a1)+,d0        ;load the instruction word
00001098  3200                    1900          move.w  d0,d1           ;make a copy
0000109A  ED58                    1901          rol.w   #$06,d0         ;get a longword offset for
0000109C  C07C 003C               1902          and.w   #$003c,d0       ;the instruction group (most sig. 4 bits)
000010A0  45F9 000010B4           1903          lea     grtab,a2        ;load the address of the group table
000010A6  D4C0                    1904          adda.w  d0,a2           ;add the group offset
000010A8  2452                    1905          movea.l (a2),a2         ;get the actual address
000010AA  4E92                    1906          jsr     (a2)            ;jump to the appropriate subroutine
000010AC  4E75                    1907          rts                     ;exit
000010AE                          1908  
000010AE  6000 F368               1909  disend: bra     crlf            ;send crlf after instruction
000010B2  4E75                    1910          rts                     ;return from instruction subroutine
000010B4                          1911  
000010B4= 000010F4                1912  grtab:  dc.l    gr0
000010B8= 00001472                1913          dc.l    gr1
000010BC= 0000147C                1914          dc.l    gr2
000010C0= 00001486                1915          dc.l    gr3
000010C4= 0000150A                1916          dc.l    gr4
000010C8= 00001B78                1917          dc.l    gr5
000010CC= 00001C54                1918          dc.l    gr6
000010D0= 00001C9E                1919          dc.l    gr7
000010D4= 00001CD8                1920          dc.l    gr8
000010D8= 00001DFA                1921          dc.l    gr9
000010DC= 00001F36                1922          dc.l    gra
000010E0= 00001F3A                1923          dc.l    grb
000010E4= 00002064                1924          dc.l    grc
000010E8= 0000214E                1925          dc.l    grd
000010EC= 0000215C                1926          dc.l    gre
000010F0= 00002258                1927          dc.l    grf
000010F4                          1928  
000010F4  3001                    1929  gr0:    move.w  d1,d0
000010F6  0C40 023C               1930          cmpi.w  #$023c,d0       ;is it ANDIccr?
000010FA  6600 002E               1931          bne     ANDIsr          ;no.
Line 1932 ERROR: Undefined symbol
000010FE  41F9 004DBD16           1932          lea     mANDI,a0        ;yes, print
00001104  6100 F112               1933          bsr     writs           ;write it
00001108  6100 1152               1934          bsr     spc
0000110C  6100 1176               1935          bsr     pound
00001110  6100 119A               1936          bsr     dollar
00001114  3019                    1937          move.w  (a1)+,d0        ;load the operand
00001116  6100 F10C               1938          bsr     writb           ;write it
0000111A  6100 114A               1939          bsr     comma
Line 1940 ERROR: Undefined symbol
0000111E  41F9 004DBD16           1940          lea     mccr,a0         ;load "ccr"
00001124  6100 F0F2               1941          bsr     writs
00001128  6084                    1942          bra     disend
0000112A  0C40 027C               1943  ANDIsr: cmpi.w  #$027c,d0       ;is it ANDIsr?
0000112E  6600 0030               1944          bne     EORIcr          ;no.
Line 1945 ERROR: Undefined symbol
00001132  41F9 004DBD16           1945          lea     mANDI,a0        ;yes, print
00001138  6100 F0DE               1946          bsr     writs           ;write it
0000113C  6100 111E               1947          bsr     spc
00001140  6100 1142               1948          bsr     pound
00001144  6100 1166               1949          bsr     dollar
00001148  3019                    1950          move.w  (a1)+,d0        ;load the operand
0000114A  6100 F0E2               1951          bsr     writw           ;write it
0000114E  6100 1116               1952          bsr     comma
Line 1953 ERROR: Undefined symbol
00001152  41F9 004DBD16           1953          lea     msr,a0          ;load "sr"
00001158  6100 F0BE               1954          bsr     writs
0000115C  6000 FF50               1955          bra     disend
00001160  0C40 0A3C               1956  EORIcr: cmpi.w  #$0a3c,d0       ;is it EORIccr?
00001164  6600 0030               1957          bne     EORIsr          ;no.
Line 1958 ERROR: Undefined symbol
00001168  41F9 004DBD16           1958          lea     mEORI,a0        ;yes, print
0000116E  6100 F0A8               1959          bsr     writs           ;write it
00001172  6100 10E8               1960          bsr     spc
00001176  6100 110C               1961          bsr     pound
0000117A  6100 1130               1962          bsr     dollar
0000117E  3019                    1963          move.w  (a1)+,d0        ;load the operand
00001180  6100 F0A2               1964          bsr     writb           ;write it
00001184  6100 10E0               1965          bsr     comma
Line 1966 ERROR: Undefined symbol
00001188  41F9 004DBD16           1966          lea     mccr,a0         ;load "ccr"
0000118E  6100 F088               1967          bsr     writs
00001192  6000 FF1A               1968          bra     disend
00001196  0C40 0A7C               1969  EORIsr: cmpi.w  #$0a7c,d0       ;is it EORIsr?
0000119A  6600 0030               1970          bne     ORIccr          ;no.
Line 1971 ERROR: Undefined symbol
0000119E  41F9 004DBD16           1971          lea     mEORI,a0        ;yes, print
000011A4  6100 F072               1972          bsr     writs
000011A8  6100 10B2               1973          bsr     spc
000011AC  6100 10D6               1974          bsr     pound
000011B0  6100 10FA               1975          bsr     dollar
000011B4  3019                    1976          move.w  (a1)+,d0        ;load the operand
000011B6  6100 F076               1977          bsr     writw           ;write it
000011BA  6100 10AA               1978          bsr     comma
Line 1979 ERROR: Undefined symbol
000011BE  41F9 004DBD16           1979          lea     msr,a0          ;load "sr"
000011C4  6100 F052               1980          bsr     writs           ;write it
000011C8  6000 FEE4               1981          bra     disend
000011CC  0C40 003C               1982  ORIccr: cmpi.w  #$003c,d0       ;is it ORIccr?
000011D0  6600 0030               1983          bne     ORIsr           ;no.
Line 1984 ERROR: Undefined symbol
000011D4  41F9 004DBD16           1984          lea     mORI,a0         ;yes, print
000011DA  6100 F03C               1985          bsr     writs           ;write it
000011DE  6100 107C               1986          bsr     spc
000011E2  6100 10A0               1987          bsr     pound
000011E6  6100 10C4               1988          bsr     dollar
000011EA  3019                    1989          move.w  (a1)+,d0        ;load the operand
000011EC  6100 F036               1990          bsr     writb           ;write it
000011F0  6100 1074               1991          bsr     comma
Line 1992 ERROR: Undefined symbol
000011F4  41F9 004DBD16           1992          lea     mccr,a0         ;load "ccr"
000011FA  6100 F01C               1993          bsr     writs
000011FE  6000 FEAE               1994          bra     disend
00001202  0C40 007C               1995  ORIsr:  cmpi.w  #$007c,d0       ;is it ORIsr?
00001206  6600 0030               1996          bne     ADDI            ;no.
Line 1997 ERROR: Undefined symbol
0000120A  41F9 004DBD16           1997          lea     mORI,a0         ;yes, print
00001210  6100 F006               1998          bsr     writs           ;write it
00001214  6100 1046               1999          bsr     spc
00001218  6100 106A               2000          bsr     pound
0000121C  6100 108E               2001          bsr     dollar
00001220  3019                    2002          move.w  (a1)+,d0        ;load the operand
00001222  6100 F00A               2003          bsr     writw           ;write it
00001226  6100 103E               2004          bsr     comma
Line 2005 ERROR: Undefined symbol
0000122A  41F9 004DBD16           2005          lea     msr,a0          ;load "sr"
00001230  6100 EFE6               2006          bsr     writs
00001234  6000 FE78               2007          bra     disend
00001238  0240 0F00               2008  ADDI:   andi.w  #$0f00,d0       ;mask operation bits
0000123C  0C40 0600               2009          cmpi.w  #$0600,d0       ;is it ADDI?
00001240  6600 0010               2010          bne     ANDI            ;no.
Line 2011 ERROR: Undefined symbol
00001244  41F9 004DBD16           2011          lea     mADDI,a0        ;yes, print
0000124A  6100 EFCC               2012          bsr     writs           ;write it
0000124E  6000 006C               2013          bra     iops            ;go print operands
00001252  0C40 0200               2014  ANDI:   cmpi.w  #$0200,d0       ;is it ANDI?
00001256  6600 0010               2015          bne     CMPI            ;no.
Line 2016 ERROR: Undefined symbol
0000125A  41F9 004DBD16           2016          lea     mANDI,a0        ;yes, print
00001260  6100 EFB6               2017          bsr     writs           ;write it
00001264  6000 0056               2018          bra     iops            ;go print operands
00001268  0C40 0C00               2019  CMPI:   cmpi.w  #$0c00,d0       ;is it CMPI?
0000126C  6600 0010               2020          bne     EORI            ;no.
Line 2021 ERROR: Undefined symbol
00001270  41F9 004DBD16           2021          lea     mCMPI,a0        ;yes, print
00001276  6100 EFA0               2022          bsr     writs           ;write it
0000127A  6000 0040               2023          bra     iops            ;go print operands
0000127E  0C40 0A00               2024  EORI:   cmpi.w  #$0a00,d0       ;is it EORI?
00001282  6600 0010               2025          bne     ORI             ;no.
Line 2026 ERROR: Undefined symbol
00001286  41F9 004DBD16           2026          lea     mEORI,a0        ;yes, print
0000128C  6100 EF8A               2027          bsr     writs           ;write it
00001290  6000 002A               2028          bra     iops            ;go print operands
00001294  0C40 0000               2029  ORI:    cmpi.w  #$0000,d0       ;is it ORI?
00001298  6600 0010               2030          bne     SUBI            ;no.
Line 2031 ERROR: Undefined symbol
0000129C  41F9 004DBD16           2031          lea     mORI,a0         ;yes, print
000012A2  6100 EF74               2032          bsr     writs           ;write it
000012A6  6000 0014               2033          bra     iops            ;go print operands
000012AA  0C40 0400               2034  SUBI:   cmpi.w  #$0400,d0       ;is it SUBI?
000012AE  6600 0078               2035          bne     MOVEP           ;no.
Line 2036 ERROR: Undefined symbol
000012B2  41F9 004DBD16           2036          lea     mSUBI,a0        ;yes, print
000012B8  6100 EF5E               2037          bsr     writs           ;write it
000012BC  3001                    2038  iops:   move.w  d1,d0
000012BE  0240 00C0               2039          andi.w  #$00c0,d0       ;check the size to see if it is legal
000012C2  0C40 00C0               2040          cmpi.w  #$00c0,d0       ;is it size 11?
000012C6  6600 000E               2041          bne     lops            ;if not, it is legal
000012CA  6100 0F90               2042          bsr     spc           ;if so, it is not legal
000012CE  6100 0F8C               2043          bsr     spc
000012D2  6000 0896               2044          bra     ILLEG
000012D6  6100 0FB6               2045  lops:   bsr     dot
000012DA  3001                    2046          move.w  d1,d0
000012DC  6100 0FD8               2047          bsr     findsiz         ;print the operand size
000012E0  6100 0F7A               2048          bsr     spc
000012E4  6100 0F9E               2049          bsr     pound
000012E8  6100 0FC2               2050          bsr     dollar
000012EC  0C38 0062 42DA          2051          cmpi.b  #$62,siz        ;is byte?
000012F2  6600 000C               2052          bne     iopsw           ;no
000012F6  3019                    2053          move.w  (a1)+,d0        ;yes
000012F8  6100 EF2A               2054          bsr     writb
000012FC  6000 001C               2055          bra     iopsc
00001300  0C38 0077 42DA          2056  iopsw:  cmpi.b  #$77,siz        ;is word?
00001306  6600 000C               2057          bne     iopsl           ;no
0000130A  3019                    2058          move.w  (a1)+,d0        ;yes
0000130C  6100 EF20               2059          bsr     writw
00001310  6000 0008               2060          bra     iopsc
00001314  2019                    2061  iopsl:  move.l  (a1)+,d0        ;size long
00001316  6100 EF20               2062          bsr     writl
0000131A  6100 0F4A               2063  iopsc:  bsr     comma
0000131E  3001                    2064          move.w  d1,d0
00001320  6100 0FF4               2065          bsr     writea          ;write the operand
00001324  6000 FD88               2066          bra     disend
00001328  3001                    2067  MOVEP:  move.w  d1,d0
0000132A  0240 0138               2068          andi.w  #$0138,d0       ;mask MOVEP bits
0000132E  0C40 0108               2069          cmpi.w  #$0108,d0       ;is it a MOVEP?
00001332  6600 009E               2070          bne     bitop           ;if not, it's a bit operation
Line 2071 ERROR: Undefined symbol
00001336  41F9 004DBD16           2071          lea     mMOVEP,a0       ;load "MOVEP"
0000133C  6100 EEDA               2072          bsr     writs           ;write it
00001340  6100 0F4C               2073          bsr     dot
00001344  3001                    2074          move.w  d1,d0
00001346  0240 0040               2075          andi.w  #$0040,d0       ;word or longword
0000134A  6600 000E               2076          bne     movepl          ;longword
0000134E  103C 0077               2077          move.b  #$77,d0         ;load a 'W'
00001352  6100 EE8C               2078          bsr     writ            ;write it
00001356  6000 000A               2079          bra     moveps          ;go write operands
0000135A  103C 006C               2080  movepl: move.b  #$6C,d0         ;load an 'L'
0000135E  6100 EE80               2081          bsr     writ            ;write it
00001362  6100 0EF8               2082  moveps: bsr     spc
00001366  3001                    2083          move.w  d1,d0
00001368  0240 0080               2084          andi.w  #$0080,d0       ;mask direction bit
0000136C  6700 0032               2085          beq     movepr          ;if zero, move to reg
00001370  3001                    2086          move.w  d1,d0
00001372  0240 0E00               2087          andi.w  #$0e00,d0       ;mask data reg
00001376  EF58                    2088          rol.w   #$07,d0         ;get into rightmost bits
00001378  6100 0F86               2089          bsr     wdreg           ;write it
0000137C  6100 0EE8               2090          bsr     comma
00001380  6100 0EEE               2091          bsr     lparen
00001384  3019                    2092          move.w  (a1)+,d0
00001386  6100 EEA6               2093          bsr     writw           ;write the address
0000138A  6100 0EDA               2094          bsr     comma
0000138E  3001                    2095          move.w  d1,d0
00001390  0240 0007               2096          andi.w  #$0007,d0       ;mask address reg
00001394  6100 0F54               2097          bsr     wareg           ;write it
00001398  6100 0EE0               2098          bsr     rparen
0000139C  6000 FD10               2099          bra     disend
000013A0  3001                    2100  movepr: move.w  d1,d0
000013A2  6100 0ECC               2101          bsr     lparen
000013A6  3019                    2102          move.w  (a1)+,d0
000013A8  6100 EE84               2103          bsr     writw           ;write the address
000013AC  6100 0EB8               2104          bsr     comma
000013B0  3001                    2105          move.w  d1,d0
000013B2  0240 0007               2106          andi.w  #$0007,d0       ;mask address reg
000013B6  6100 0F32               2107          bsr     wareg           ;write it
000013BA  6100 0EBE               2108          bsr     rparen
000013BE  6100 0EA6               2109          bsr     comma
000013C2  3001                    2110          move.w  d1,d0
000013C4  0240 0E00               2111          andi.w  #$0e00,d0       ;mask data reg
000013C8  EF58                    2112          rol.w   #$07,d0         ;get into rightmost bits
000013CA  6100 0F34               2113          bsr     wdreg           ;write it
000013CE  6000 FCDE               2114          bra     disend
000013D2  3001                    2115  bitop:  move.w  d1,d0
000013D4  0240 0F00               2116          andi.w  #$0f00,d0       ;mask the subgroup bits
000013D8  0C40 0E00               2117          cmpi.w  #$0e00,d0       ;and make sure this is not illegal, since
000013DC  6700 078C               2118          beq     ILLEG           ;a non-MOVEP 00001110xxxxxxxx is invalid
000013E0  3001                    2119          move.w  d1,d0
000013E2  0240 00C0               2120          andi.w  #$00c0,d0       ;mask bitop select bits
000013E6  6600 0010               2121          bne     BCHG            ;it's not BTST
Line 2122 ERROR: Undefined symbol
000013EA  41F9 004DBD16           2122          lea     mBTST,a0        ;load "BTST"
000013F0  6100 EE26               2123          bsr     writs           ;write it
000013F4  6000 0038               2124          bra     bitop2          ;go print operands
000013F8  0C40 0040               2125  BCHG:   cmpi.w  #$0040,d0
000013FC  6600 0010               2126          bne     BCLR            ;it's not BCHG
Line 2127 ERROR: Undefined symbol
00001400  41F9 004DBD16           2127          lea     mBCHG,a0        ;load "BCHG"
00001406  6100 EE10               2128          bsr     writs           ;write it
0000140A  6000 0022               2129          bra     bitop2          ;go print operands
0000140E  0C40 0080               2130  BCLR:   cmpi.w  #$0080,d0
00001412  6600 0010               2131          bne     BSET            ;it's not BCLR
Line 2132 ERROR: Undefined symbol
00001416  41F9 004DBD16           2132          lea     mBCLR,a0        ;load "BCLR"
0000141C  6100 EDFA               2133          bsr     writs           ;write it
00001420  6000 000C               2134          bra     bitop2          ;go print operands
Line 2135 ERROR: Undefined symbol
00001424  41F9 004DBD16           2135  BSET:   lea     mBSET,a0        ;load "BSET"
0000142A  6100 EDEC               2136          bsr     writs           ;write it
0000142E  6100 0E2C               2137  bitop2: bsr     spc
00001432  3001                    2138          move.w  d1,d0
00001434  0240 0100               2139          andi.w  #$0100,d0       ;is it reg or immediate operand?
00001438  6600 001E               2140          bne     bitopr          ;if nonzero, it's a reg operand
0000143C  6100 0E46               2141          bsr     pound
00001440  3019                    2142          move.w  (a1)+,d0        ;get the bit number
00001442  0200 0007               2143          andi.b  #$07,d0         ;modulo 8
00001446  6100 EDDC               2144          bsr     writb           ;write it
0000144A  6100 0E1A               2145          bsr     comma
0000144E  3001                    2146          move.w  d1,d0
00001450  6100 0EC4               2147          bsr     writea          ;write the destination operand
00001454  6000 FC58               2148          bra     disend
00001458  3001                    2149  bitopr: move.w  d1,d0
0000145A  0240 0E00               2150          andi.w  #$0e00,d0       ;mask off the reg number
0000145E  EF58                    2151          rol.w   #$07,d0         ;get it into rightmost bits
00001460  6100 0E9E               2152          bsr     wdreg           ;write it
00001464  6100 0E00               2153          bsr     comma
00001468  3001                    2154          move.w  d1,d0
0000146A  6100 0EAA               2155          bsr     writea          ;write the destination operand
0000146E  6000 FC3E               2156          bra     disend
00001472                          2157  
00001472  11FC 0062 42DA          2158  gr1:    move.b  #$62,siz        ;make MOVE a byte operation
00001478  6000 0012               2159          bra     MOVE            ;go parse the command type
0000147C  11FC 006C 42DA          2160  gr2:    move.b  #$6c,siz        ;make MOVE a word operation
00001482  6000 0008               2161          bra     MOVE            ;go parse the command type
00001486  11FC 0077 42DA          2162  gr3:    move.b  #$77,siz        ;make MOVE a long operation
0000148C  3001                    2163  MOVE:   move.w  d1,d0
0000148E  0240 01C0               2164          andi.w  #$01c0,d0       ;mask the destination opmode
00001492  0C40 0040               2165          cmpi.w  #$0040,d0       ;is it MOVEA?
00001496  6700 0036               2166          beq     MOVEA           ;if so, go do MOVEA
Line 2167 ERROR: Undefined symbol
0000149A  41F9 004DBD16           2167          lea     mMOVE,a0        ;load "MOVE"
000014A0  6100 ED76               2168          bsr     writs           ;write it
000014A4  6100 0DE8               2169          bsr     dot
000014A8  6100 0E36               2170          bsr     findend         ;write the size
000014AC  6100 0DAE               2171          bsr     spc
000014B0  3001                    2172          move.w  d1,d0
000014B2  6100 0E62               2173          bsr     writea          ;write source operand
000014B6  6100 0DAE               2174          bsr     comma
000014BA  3001                    2175          move.w  d1,d0
000014BC  E258                    2176          ror.w   #$01,d0         ;these rols and rors make dest. op. std.
000014BE  E718                    2177          rol.b   #$03,d0
000014C0  E058                    2178          ror.w   #$08,d0
000014C2  E618                    2179          ror.b   #$03,d0
000014C4  EA58                    2180          ror.w   #$05,d0         ;dest. op. now looks like source op.
000014C6  6100 0E4E               2181          bsr     writea          ;write it
000014CA  6000 FBE2               2182          bra     disend
000014CE  1038 42DA               2183  MOVEA:  move.b  siz,d0          ;load the size.
000014D2  0C00 0042               2184          cmpi.b  #$42,d0         ;is it a byte?
000014D6  6700 0692               2185          beq     ILLEG           ;if so, this is not a valid instruction
Line 2186 ERROR: Undefined symbol
000014DA  41F9 004DBD16           2186          lea     mMOVEA,a0       ;load "MOVEA"
000014E0  6100 ED36               2187          bsr     writs           ;write it
000014E4  6100 0DA8               2188          bsr     dot
000014E8  6100 0DF6               2189          bsr     findend         ;write the size
000014EC  6100 0D6E               2190          bsr     spc
000014F0  3001                    2191          move.w  d1,d0
000014F2  6100 0E22               2192          bsr     writea          ;write source operand
000014F6  6100 0D6E               2193          bsr     comma
000014FA  3001                    2194          move.w  d1,d0
000014FC  EF58                    2195          rol.w   #$07,d0         ;get destination into rightmost
000014FE  0240 0007               2196          andi.w  #$07,d0         ;mask off the destination bits
00001502  6100 0DE6               2197          bsr     wareg           ;write it
00001506  6000 FBA6               2198          bra     disend
0000150A                          2199  
0000150A  3001                    2200  gr4:    move.w  d1,d0
0000150C  0C40 4E71               2201  NOP:    cmpi.w  #$4e71,d0       ;is it a NOP?
00001510  6600 0010               2202          bne     RESET           ;no
Line 2203 ERROR: Undefined symbol
00001514  41F9 004DBD16           2203          lea     mNOP,a0         ;yes, print
0000151A  6100 ECFC               2204          bsr     writs           ;write it
0000151E  6000 FB8E               2205          bra     disend
00001522  0C40 4E70               2206  RESET:  cmpi.w  #$4e70,d0       ;is it RESET?
00001526  6600 0010               2207          bne     RTE             ;no
Line 2208 ERROR: Undefined symbol
0000152A  41F9 004DBD16           2208          lea     mRESET,a0       ;yes, print
00001530  6100 ECE6               2209          bsr     writs           ;write it
00001534  6000 FB78               2210          bra     disend
00001538  0C40 4E73               2211  RTE:    cmpi.w  #$4e73,d0       ;is it RTE?
0000153C  6600 0010               2212          bne     RTR             ;no
Line 2213 ERROR: Undefined symbol
00001540  41F9 004DBD16           2213          lea     mRTE,a0         ;yes, print
00001546  6100 ECD0               2214          bsr     writs           ;write it
0000154A  6000 FB62               2215          bra     disend
0000154E  0C40 4E77               2216  RTR:    cmpi.w  #$4e77,d0       ;is it RTR?
00001552  6600 0010               2217          bne     RTS             ;no
Line 2218 ERROR: Undefined symbol
00001556  41F9 004DBD16           2218          lea     mRTR,a0         ;yes, print
0000155C  6100 ECBA               2219          bsr     writs           ;write it
00001560  6000 FB4C               2220          bra     disend
00001564  0C40 4E75               2221  RTS:    cmpi.w  #$4e75,d0       ;is it RTS?
00001568  6600 0010               2222          bne     STOP            ;no
Line 2223 ERROR: Undefined symbol
0000156C  41F9 004DBD16           2223          lea     mRTS,a0         ;yes, print
00001572  6100 ECA4               2224          bsr     writs           ;write it
00001576  6000 FB36               2225          bra     disend
0000157A  0C40 4E72               2226  STOP:   cmpi.w  #$4e72,d0       ;is it STOP?
0000157E  6600 0022               2227          bne     TRAPV           ;no
Line 2228 ERROR: Undefined symbol
00001582  41F9 004DBD16           2228          lea     mSTOP,a0        ;yes, print
00001588  6100 EC8E               2229          bsr     writs           ;write it
0000158C  6100 0CCE               2230          bsr     spc
00001590  6100 0CF2               2231          bsr     pound
00001594  6100 0D16               2232          bsr     dollar
00001598  3019                    2233          move.w  (a1)+,d0        ;load data word
0000159A  6100 EC92               2234          bsr     writw           ;write it
0000159E  6000 FB0E               2235          bra     disend
000015A2  0C40 4E76               2236  TRAPV:  cmpi.w  #$4e76,d0       ;is it TRAPV?
000015A6  6600 0010               2237          bne     JMP             ;no
Line 2238 ERROR: Undefined symbol
000015AA  41F9 004DBD16           2238          lea     mTRAPV,a0       ;yes, print
000015B0  6100 EC66               2239          bsr     writs           ;write it
000015B4  6000 FAF8               2240          bra     disend
000015B8  0240 0FC0               2241  JMP:    andi.w  #$0fc0,d0       ;mask bits for one <ea> operations
000015BC  0C40 0EC0               2242          cmpi.w  #$0ec0,d0       ;is it JMP?
000015C0  6600 0032               2243          bne     JSR             ;no
000015C4  3001                    2244          move.w  d1,d0
000015C6  0240 0038               2245          andi.w  #$0038,d0       ;check to see if it's a valid mode
000015CA  6700 059E               2246          beq     ILLEG
000015CE  0C40 0008               2247          cmpi.w  #$0008,d0       ;these are not
000015D2  6700 0596               2248          beq     ILLEG
000015D6  0C40 0018               2249          cmpi.w  #$0018,d0       ;valid modes with
000015DA  6700 058E               2250          beq     ILLEG
000015DE  0C40 0020               2251          cmpi.w  #$0020,d0       ;this instruction
000015E2  6700 0586               2252          beq     ILLEG
Line 2253 ERROR: Undefined symbol
000015E6  41F9 004DBD16           2253          lea     mJMP,a0         ;yes, print
000015EC  6100 EC2A               2254          bsr     writs
000015F0  6000 01B8               2255          bra     gtea0           ;go write operand
000015F4  0C40 0E80               2256  JSR:    cmpi.w  #$0e80,d0       ;is it JSR?
000015F8  6600 0032               2257          bne     MOVtc           ;no
000015FC  3001                    2258          move.w  d1,d0
000015FE  0240 0038               2259          andi.w  #$0038,d0       ;check to see if it's a valid mode
00001602  6700 0566               2260          beq     ILLEG
00001606  0C40 0008               2261          cmpi.w  #$0008,d0       ;these are not
0000160A  6700 055E               2262          beq     ILLEG
0000160E  0C40 0018               2263          cmpi.w  #$0018,d0       ;valid modes with
00001612  6700 0556               2264          beq     ILLEG
00001616  0C40 0020               2265          cmpi.w  #$0020,d0       ;this instruction
0000161A  6700 054E               2266          beq     ILLEG
Line 2267 ERROR: Undefined symbol
0000161E  41F9 004DBD16           2267          lea     mJSR,a0         ;yes, print
00001624  6100 EBF2               2268          bsr     writs
00001628  6000 0180               2269          bra     gtea0           ;go write operand
0000162C  0C40 04C0               2270  MOVtc:  cmpi.w  #$04c0,d0       ;is it MOVEtoccr?
00001630  6600 0036               2271          bne     MOVfc           ;no
00001634  3001                    2272          move.w  d1,d0
00001636  0240 0038               2273          andi.w  #$0038,d0       ;check to see if it's a valid mode
0000163A  0C40 0008               2274          cmpi.w  #$0008,d0       ;these are not
0000163E  6700 052A               2275          beq     ILLEG
Line 2276 ERROR: Undefined symbol
00001642  41F9 004DBD16           2276          lea     mMOVE,a0        ;yes, print
00001648  6100 EBCE               2277          bsr     writs
0000164C  6100 0C0E               2278          bsr     spc
00001650  3001                    2279          move.w  d1,d0
00001652  6100 0CC2               2280          bsr     writea          ;write the source operand
00001656  6100 0C0E               2281          bsr     comma
Line 2282 ERROR: Undefined symbol
0000165A  41F9 004DBD16           2282          lea     mccr,a0         ;load "ccr"
00001660  6100 EBB6               2283          bsr     writs
00001664  6000 FA48               2284          bra     disend
00001668  0C40 02C0               2285  MOVfc:  cmpi.w  #$02c0,d0       ;is it MOVEfromccr?
0000166C  6600 0036               2286          bne     MOVts           ;no
00001670  3001                    2287          move.w  d1,d0
00001672  0240 0038               2288          andi.w  #$0038,d0       ;check to see if it's a valid mode
00001676  0C40 0008               2289          cmpi.w  #$0008,d0       ;these are not
0000167A  6700 04EE               2290          beq     ILLEG
Line 2291 ERROR: Undefined symbol
0000167E  41F9 004DBD16           2291          lea     mMOVE,a0        ;yes, print
00001684  6100 EB92               2292          bsr     writs
00001688  6100 0BD2               2293          bsr     spc
Line 2294 ERROR: Undefined symbol
0000168C  41F9 004DBD16           2294          lea     mccr,a0         ;load "ccr"
00001692  6100 EB84               2295          bsr     writs           ;write it
00001696  6100 0BCE               2296          bsr     comma
0000169A  3001                    2297          move.w  d1,d0
0000169C  6100 0C78               2298          bsr     writea          ;write the operand
000016A0  6000 FA0C               2299          bra     disend
000016A4  0C40 06C0               2300  MOVts:  cmpi.w  #$06c0,d0       ;is it MOVEtosr?
000016A8  6600 0036               2301          bne     MOVfs           ;no
000016AC  3001                    2302          move.w  d1,d0
000016AE  0240 0038               2303          andi.w  #$0038,d0       ;check to see if it's a valid mode
000016B2  0C40 0008               2304          cmpi.w  #$0008,d0       ;these are not
000016B6  6700 04B2               2305          beq     ILLEG
Line 2306 ERROR: Undefined symbol
000016BA  41F9 004DBD16           2306          lea     mMOVE,a0        ;yes, print
000016C0  6100 EB56               2307          bsr     writs
000016C4  6100 0B96               2308          bsr     spc
000016C8  3001                    2309          move.w  d1,d0
000016CA  6100 0C4A               2310          bsr     writea          ;write the source operand
000016CE  6100 0B96               2311          bsr     comma
Line 2312 ERROR: Undefined symbol
000016D2  41F9 004DBD16           2312          lea     msr,a0          ;load "sr"
000016D8  6100 EB3E               2313          bsr     writs
000016DC  6000 F9D0               2314          bra     disend
000016E0  0C40 00C0               2315  MOVfs:  cmpi.w  #$00c0,d0       ;is it MOVEfromsr?
000016E4  6600 0036               2316          bne     NBCD            ;no
000016E8  3001                    2317          move.w  d1,d0
000016EA  0240 0038               2318          andi.w  #$0038,d0       ;check to see if it's a valid mode
000016EE  0C40 0008               2319          cmpi.w  #$0008,d0       ;these are not
000016F2  6700 0476               2320          beq     ILLEG
Line 2321 ERROR: Undefined symbol
000016F6  41F9 004DBD16           2321          lea     mMOVE,a0        ;yes, print
000016FC  6100 EB1A               2322          bsr     writs
00001700  6100 0B5A               2323          bsr     spc
Line 2324 ERROR: Undefined symbol
00001704  41F9 004DBD16           2324          lea     msr,a0          ;load "sr"
0000170A  6100 EB0C               2325          bsr     writs
0000170E  6100 0B56               2326          bsr     comma
00001712  3001                    2327          move.w  d1,d0
00001714  6100 0C00               2328          bsr     writea          ;write the operand
00001718  6000 F994               2329          bra     disend
0000171C  0C40 0800               2330  NBCD:   cmpi.w  #$0800,d0       ;is it NBCD?
00001720  6600 001E               2331          bne     PEA             ;no
00001724  3001                    2332          move.w  d1,d0
00001726  0240 0038               2333          andi.w  #$0038,d0       ;check to see if it's a valid mode
0000172A  0C40 0008               2334          cmpi.w  #$0008,d0       ;these are not
0000172E  6700 043A               2335          beq     ILLEG
Line 2336 ERROR: Undefined symbol
00001732  41F9 004DBD16           2336          lea     mNBCD,a0        ;yes, print
00001738  6100 EADE               2337          bsr     writs
0000173C  6000 006C               2338          bra     gtea0           ;go write operand
00001740  0C40 0840               2339  PEA:    cmpi.w  #$0840,d0       ;is it PEA?
00001744  6600 0032               2340          bne     TAS             ;no
00001748  3001                    2341          move.w  d1,d0
0000174A  0240 0038               2342          andi.w  #$0038,d0       ;check to see if it's a valid mode
0000174E  6700 023C               2343          beq     SWAP
00001752  0C40 0008               2344          cmpi.w  #$0008,d0       ;these are not
00001756  6700 0412               2345          beq     ILLEG
0000175A  0C40 0018               2346          cmpi.w  #$0018,d0       ;valid modes with
0000175E  6700 040A               2347          beq     ILLEG
00001762  0C40 0020               2348          cmpi.w  #$0020,d0       ;this instruction
00001766  6700 0402               2349          beq     ILLEG
Line 2350 ERROR: Undefined symbol
0000176A  41F9 004DBD16           2350          lea     mPEA,a0         ;yes, print
00001770  6100 EAA6               2351          bsr     writs
00001774  6000 0034               2352          bra     gtea0           ;go write operand
00001778  0C40 0AC0               2353  TAS:    cmpi.w  #$0AC0,d0       ;is it TAS?
0000177C  6600 003A               2354          bne     CLR             ;no
00001780  3001                    2355          move.w  d1,d0
00001782  0240 0038               2356          andi.w  #$0038,d0       ;check to see if a valid mode
00001786  0C40 0008               2357          cmpi.w  #$0008,d0       ;these are not
0000178A  6700 03DE               2358          beq     ILLEG
0000178E  0C40 0038               2359          cmpi.w  #$0038,d0       ;special modes
00001792  6600 000C               2360          bne     tasok
00001796  3001                    2361          move.w  d1,d0
00001798  0240 0006               2362          andi.w  #$0006,d0
0000179C  6600 03CC               2363          bne     ILLEG           ;certain of them are bad
Line 2364 ERROR: Undefined symbol
000017A0  41F9 004DBD16           2364  tasok:  lea     mTAS,a0         ;yes, print
000017A6  6100 EA70               2365          bsr     writs
000017AA  6100 0AB0               2366  gtea0:  bsr     spc
000017AE  3001                    2367          move.w  d1,d0
000017B0  6100 0B64               2368          bsr     writea          ;write the operand
000017B4  6000 F8F8               2369          bra     disend
000017B8  0240 0F00               2370  CLR:    andi.w  #$0f00,d0       ;mask <ea> + <size> operations
000017BC  0C40 0200               2371          cmpi.w  #$0200,d0       ;is it clr?
000017C0  6600 001E               2372          bne     NEG             ;no
000017C4  3001                    2373          move.w  d1,d0
000017C6  0240 0038               2374          andi.w  #$0038,d0       ;check to see if it's a valid mode
000017CA  0C40 0008               2375          cmpi.w  #$0008,d0       ;these are not
000017CE  6700 039A               2376          beq     ILLEG
Line 2377 ERROR: Undefined symbol
000017D2  41F9 004DBD16           2377          lea     mCLR,a0         ;yes, print
000017D8  6100 EA3E               2378          bsr     writs
000017DC  6000 008E               2379          bra     gtea1           ;go write operand
000017E0  0C40 0400               2380  NEG:    cmpi.w  #$0400,d0       ;is it NEG?
000017E4  6600 001E               2381          bne     NEGX            ;no
000017E8  3001                    2382          move.w  d1,d0
000017EA  0240 0038               2383          andi.w  #$0038,d0       ;check to see if it's a valid mode
000017EE  0C40 0008               2384          cmpi.w  #$0008,d0       ;these are not
000017F2  6700 0376               2385          beq     ILLEG
Line 2386 ERROR: Undefined symbol
000017F6  41F9 004DBD16           2386          lea     mNEG,a0         ;yes, print
000017FC  6100 EA1A               2387          bsr     writs
00001800  6000 006A               2388          bra     gtea1           ;go write operand
00001804  0C40 0000               2389  NEGX:   cmpi.w  #$0000,d0       ;is it NEGX?
00001808  6600 001E               2390          bne     NOT             ;no
0000180C  3001                    2391          move.w  d1,d0
0000180E  0240 0038               2392          andi.w  #$0038,d0       ;check to see if it's a valid mode
00001812  0C40 0008               2393          cmpi.w  #$0008,d0       ;these are not
00001816  6700 0352               2394          beq     ILLEG
Line 2395 ERROR: Undefined symbol
0000181A  41F9 004DBD16           2395          lea     mNEGX,a0        ;yes, print
00001820  6100 E9F6               2396          bsr     writs
00001824  6000 0046               2397          bra     gtea1           ;go write operand
00001828  0C40 0600               2398  NOT:    cmpi.w  #$0600,d0       ;is it NOT?
0000182C  6600 001E               2399          bne     TST             ;no
00001830  3001                    2400          move.w  d1,d0
00001832  0240 0038               2401          andi.w  #$0038,d0       ;check to see if it's a valid mode
00001836  0C40 0008               2402          cmpi.w  #$0008,d0       ;these are not
0000183A  6700 032E               2403          beq     ILLEG
Line 2404 ERROR: Undefined symbol
0000183E  41F9 004DBD16           2404          lea     mNOT,a0         ;yes, print
00001844  6100 E9D2               2405          bsr     writs
00001848  6000 0022               2406          bra     gtea1           ;go write operand
0000184C  0C40 0A00               2407  TST:    cmpi.w  #$0A00,d0       ;is it TST?
00001850  6600 F0E8               2408          bne     BKPT            ;no
00001854  3001                    2409          move.w  d1,d0
00001856  0240 0038               2410          andi.w  #$0038,d0       ;check to see if it's a valid mode
0000185A  0C40 0008               2411          cmpi.w  #$0008,d0       ;these are not
0000185E  6700 030A               2412          beq     ILLEG
Line 2413 ERROR: Undefined symbol
00001862  41F9 004DBD16           2413          lea     mTST,a0         ;yes, print
00001868  6100 E9AE               2414          bsr     writs
0000186C  6100 0A20               2415  gtea1:  bsr     dot
00001870  3001                    2416          move.w  d1,d0
00001872  6100 0A42               2417          bsr     findsiz         ;print the operand length
00001876  6100 09E4               2418          bsr     spc
0000187A  3001                    2419          move.w  d1,d0
0000187C  6100 0A98               2420          bsr     writea          ;print the operand
00001880  6000 F82C               2421          bra     disend
Line 2422 ERROR: Symbol defined more than once
00001884  3001                    2422  BKPT:   move.w  d1,d0
00001886  0240 FFF8               2423          andi.w  #$fff8,d0       ;mask out the operand
0000188A  0C40 4848               2424          cmpi.w  #$4848,d0       ;is it BKPT?
0000188E  6600 0022               2425          bne     LINK            ;no
Line 2426 ERROR: Undefined symbol
00001892  41F9 004DBD16           2426          lea     mBKPT,a0        ;yes, print
00001898  6100 E97E               2427          bsr     writs           ;write it
0000189C  6100 09BE               2428          bsr     spc
000018A0  3001                    2429          move.w  d1,d0
000018A2  0240 0007               2430          andi.w  #$0007,d0       ;mask BKPT number
000018A6  0600 0030               2431          addi.b  #$30,d0         ;make it an ascii numeral
000018AA  6100 E934               2432          bsr     writ            ;write it
000018AE  6000 F7FE               2433          bra     disend
000018B2  3001                    2434  LINK:   move.w  d1,d0
000018B4  0240 0F00               2435          andi.w  #$0f00,d0       ;look at bits 8-11
000018B8  0C40 0E00               2436          cmpi.w  #$0e00,d0       ;is it an E?
000018BC  6600 00CE               2437          bne     SWAP            ;no
000018C0  3001                    2438          move.w  d1,d0
000018C2  0240 FFF8               2439          andi.w  #$fff8,d0       ;mask off reg number
000018C6  0C40 4E50               2440          cmpi.w  #$4e50,d0       ;is it a LINK?
000018CA  6600 0030               2441          bne     MOVEsp          ;no
Line 2442 ERROR: Undefined symbol
000018CE  41F9 004DBD16           2442          lea     mLINK,a0        ;load "LINK"
000018D4  6100 E942               2443          bsr     writs           ;write it
000018D8  6100 0982               2444          bsr     spc
000018DC  3001                    2445          move.w  d1,d0
000018DE  0240 0007               2446          andi.w  #$0007,d0       ;mask reg bits
000018E2  6100 0A06               2447          bsr     wareg           ;write it
000018E6  6100 097E               2448          bsr     comma
000018EA  6100 0998               2449          bsr     pound
000018EE  6100 09BC               2450          bsr     dollar
000018F2  3019                    2451          move.w  (a1)+,d0        ;load displacement
000018F4  6100 E938               2452          bsr     writw           ;write it
000018F8  6000 F7B4               2453          bra     disend
000018FC  3001                    2454  MOVEsp: move.w  d1,d0
000018FE  0240 FFF0               2455          andi.w  #$fff0,d0       ;mask off operand bits
00001902  0C40 4E60               2456          cmpi.w  #$4e60,d0       ;is it MOVEusp?
00001906  6600 0052               2457          bne     TRAP            ;no
Line 2458 ERROR: Undefined symbol
0000190A  41F9 004DBD16           2458          lea     mMOVE,a0        ;yes, so load "MOVE"
00001910  6100 E906               2459          bsr     writs           ;write it
00001914  6100 0946               2460          bsr     spc
00001918  3001                    2461          move.w  d1,d0
0000191A  0240 0008               2462          andi.w  #$0008,d0       ;mask direction bit
0000191E  6600 001E               2463          bne     MOVEts          ;if zero, move to usp
00001922  3001                    2464          move.w  d1,d0
00001924  0240 0007               2465          andi.w  #$0007,d0       ;mask reg bits
00001928  6100 09C0               2466          bsr     wareg           ;write it
0000192C  6100 0938               2467          bsr     comma
Line 2468 ERROR: Undefined symbol
00001930  41F9 004DBD16           2468          lea     musp,a0         ;load "usp"
00001936  6100 E8E0               2469          bsr     writs           ;write it
0000193A  6000 F772               2470          bra     disend
Line 2471 ERROR: Undefined symbol
0000193E  41F9 004DBD16           2471  MOVEts: lea     musp,a0         ;load "usp"
00001944  6100 E8D2               2472          bsr     writs           ;write it
00001948  6100 091C               2473          bsr     comma
0000194C  3001                    2474          move.w  d1,d0
0000194E  0240 0007               2475          andi.w  #$0007,d0       ;mask reg bits
00001952  6100 0996               2476          bsr     wareg           ;write it
00001956  6000 F756               2477          bra     disend
0000195A  3001                    2478  TRAP:   move.w  d1,d0
0000195C  0240 FFF0               2479          andi.w  #$fff0,d0       ;mask operand if TRAP
00001960  0C40 4E40               2480          cmpi.w  #$4e40,d0       ;is it TRAP?
00001964  6600 0026               2481          bne     SWAP            ;no
Line 2482 ERROR: Undefined symbol
00001968  41F9 004DBD16           2482          lea     mTRAP,a0        ;yes
0000196E  6100 E8A8               2483          bsr     writs
00001972  6100 08E8               2484          bsr     spc
00001976  6100 090C               2485          bsr     pound
0000197A  6100 0930               2486          bsr     dollar
0000197E  1001                    2487          move.b  d1,d0
00001980  0200 000F               2488          andi.b  #$0f,d0         ;mask off trap number
00001984  6100 E89E               2489          bsr     writb           ;write it
00001988  6000 F724               2490          bra     disend
0000198C  3001                    2491  SWAP:   move.w  d1,d0
0000198E  0240 FFF8               2492          andi.w  #$fff8,d0       ;mask off operand if SWAP
00001992  0C40 4840               2493          cmpi.w  #$4840,d0       ;is it SWAP?
00001996  6600 001E               2494          bne     UNLK            ;no
Line 2495 ERROR: Undefined symbol
0000199A  41F9 004DBD16           2495          lea     mSWAP,a0        ;load "swap"
000019A0  6100 E876               2496          bsr     writs           ;write it
000019A4  6100 08B6               2497          bsr     spc
000019A8  3001                    2498          move.w  d1,d0
000019AA  0240 0007               2499          andi.w  #$0007,d0       ;mask off the reg bits
000019AE  6100 0950               2500          bsr     wdreg           ;write the reg
000019B2  6000 F6FA               2501          bra     disend
000019B6  0C40 4E58               2502  UNLK:   cmpi.w  #$4e58,d0       ;is it UNLK?
000019BA  6600 001E               2503          bne     LEA             ;no
Line 2504 ERROR: Undefined symbol
000019BE  41F9 004DBD16           2504          lea     mUNLK,a0        ;load "UNLK"
000019C4  6100 E852               2505          bsr     writs           ;write it
000019C8  6100 0892               2506          bsr     spc
000019CC  3001                    2507          move.w  d1,d0
000019CE  0240 0007               2508          andi.w  #$0007,d0       ;mask off reg number
000019D2  6100 0916               2509          bsr     wareg           ;write it
000019D6  6000 F6D6               2510          bra     disend
000019DA  3001                    2511  LEA:    move.w  d1,d0
000019DC  0240 F1C0               2512          andi.w  #$f1c0,d0       ;mask for lea
000019E0  0C40 41C0               2513          cmpi.w  #$41c0,d0       ;is it LEA?
000019E4  6600 004C               2514          bne     CHK             ;no
000019E8  3001                    2515          move.w  d1,d0
000019EA  0240 0038               2516          andi.w  #$0038,d0       ;check to see if it's a valid mode
000019EE  6700 017A               2517          beq     ILLEG
000019F2  0C40 0008               2518          cmpi.w  #$0008,d0       ;these are not
000019F6  6700 0172               2519          beq     ILLEG
000019FA  0C40 0018               2520          cmpi.w  #$0018,d0       ;valid modes with
000019FE  6700 016A               2521          beq     ILLEG
00001A02  0C40 0020               2522          cmpi.w  #$0020,d0       ;this instruction
00001A06  6700 0162               2523          beq     ILLEG
Line 2524 ERROR: Undefined symbol
00001A0A  41F9 004DBD16           2524          lea     mLEA,a0         ;load "LEA"
00001A10  6100 E806               2525          bsr     writs           ;write it
00001A14  6100 0846               2526          bsr     spc
00001A18  3001                    2527          move.w  d1,d0
00001A1A  6100 08FA               2528          bsr     writea          ;write source op
00001A1E  6100 0846               2529          bsr     comma
00001A22  3001                    2530          move.w  d1,d0
00001A24  0240 0E00               2531          andi.w  #$0e00,d0       ;mask reg number
00001A28  EF58                    2532          rol.w   #$07,d0         ;get reg in rightmost bits
00001A2A  6100 08BE               2533          bsr     wareg           ;write it
00001A2E  6000 F67E               2534          bra     disend
00001A32  0C40 4180               2535  CHK:    cmpi.w  #$4180,d0       ;is it CHK?
00001A36  6600 003E               2536          bne     EXT             ;no
00001A3A  3001                    2537          move.w  d1,d0
00001A3C  0240 0038               2538          andi.w  #$0038,d0       ;check to see if it's a valid mode
00001A40  0C40 0008               2539          cmpi.w  #$0008,d0       ;these are not
00001A44  6700 0124               2540          beq     ILLEG
Line 2541 ERROR: Undefined symbol
00001A48  41F9 004DBD16           2541          lea     mCHK,a0         ;load "CHK"
00001A4E  6100 E7C8               2542          bsr     writs           ;write it
00001A52  11FC 0077 42DA          2543          move.b  #$77,siz        ;size is word
00001A58  6100 0802               2544          bsr     spc
00001A5C  3001                    2545          move.w  d1,d0
00001A5E  6100 08B6               2546          bsr     writea          ;write source operand
00001A62  6100 0802               2547          bsr     comma
00001A66  3001                    2548          move.w  d1,d0
00001A68  0240 0E00               2549          andi.w  #$0e00,d0       ;mask reg number
00001A6C  EF58                    2550          rol.w   #$07,d0         ;get into rightmost bits
00001A6E  6100 0890               2551          bsr     wdreg           ;write it
00001A72  6000 F63A               2552          bra     disend
00001A76  3001                    2553  EXT:    move.w  d1,d0
00001A78  0240 FFB8               2554          andi.w  #$ffb8,d0       ;mask all pertinent bits
00001A7C  0C40 4880               2555          cmpi.w  #$4880,d0       ;is it EXT?
00001A80  6600 0040               2556          bne     MOVEC           ;no
Line 2557 ERROR: Undefined symbol
00001A84  41F9 004DBD16           2557          lea     mEXT,a0         ;yes, load "EXT"
00001A8A  6100 E78C               2558          bsr     writs           ;write it
00001A8E  6100 07FE               2559          bsr     dot
00001A92  3001                    2560          move.w  d1,d0
00001A94  0240 0040               2561          andi.w  #$0040,d0       ;mask the size bit
00001A98  6600 000E               2562          bne     lext            ;size long
00001A9C  103C 0077               2563          move.b  #$77,d0         ;size word, load 'W'
00001AA0  6100 E73E               2564          bsr     writ            ;write it
00001AA4  6000 000A               2565          bra     ext1
00001AA8  103C 006C               2566  lext:   move.b  #$6c,d0         ;load 'L'
00001AAC  6100 E732               2567          bsr     writ            ;write it
00001AB0  6100 07AA               2568  ext1:   bsr     spc
00001AB4  3001                    2569          move.w  d1,d0
00001AB6  0240 0007               2570          andi.w  #$0007,d0       ;mask the reg number
00001ABA  6100 0844               2571          bsr     wdreg           ;write it
00001ABE  6000 F5EE               2572          bra     disend
00001AC2  3001                    2573  MOVEC:  move.w  d1,d0
00001AC4  0240 FFFE               2574          andi.w  #$fffe,d0       ;mask in appropriate bits
00001AC8  0C40 4E7B               2575          cmpi.w  #$4e7b,d0       ;is it a MOVEC?
00001ACC  6600 0012               2576          bne     MOVEM           ;no
Line 2577 ERROR: Undefined symbol
00001AD0  41F9 004DBD16           2577          lea     mCOPOUT,a0      ;yes, so load "COPOUT"
00001AD6  6100 E740               2578          bsr     writs           ;write it
00001ADA  3019                    2579          move.w  (a1)+,d0        ;compensate for the operand word
00001ADC  6000 F5D0               2580          bra     disend
00001AE0  3001                    2581  MOVEM:  move.w  d1,d0
00001AE2  0240 FB80               2582          andi.w  #$fb80,d0       ;mask bits
00001AE6  0C40 4880               2583          cmpi.w  #$4880,d0       ;is it MOVEM?
00001AEA  6600 007E               2584          bne     ILLEG           ;no
Line 2585 ERROR: Undefined symbol
00001AEE  41F9 004DBD16           2585          lea     mMOVEM,a0       ;yes, load "MOVEM"
00001AF4  6100 E722               2586          bsr     writs
00001AF8  6100 0794               2587          bsr     dot
00001AFC  3001                    2588          move.w  d1,d0
00001AFE  0240 0040               2589          andi.w  #$0040,d0       ;mask MOVEM size bit
00001B02  6600 0016               2590          bne     MOVEMl          ;if nonzero, longword operand
00001B06  103C 0077               2591          move.b  #$77,d0         ;load 'W'
00001B0A  11C0 42DA               2592          move.b  d0,siz          ;save size as 'W'
00001B0E  6100 E6D0               2593          bsr     writ            ;write it
00001B12  6100 0748               2594          bsr     spc
00001B16  6000 0012               2595          bra     MOVEMo          ;go write operands
00001B1A  103C 006C               2596  MOVEMl: move.b  #$6c,d0         ;load 'L'
00001B1E  11C0 42DA               2597          move.b  d0,siz          ;save size as 'L'
00001B22  6100 E6BC               2598          bsr     writ            ;write it
00001B26  6100 0734               2599          bsr     spc
00001B2A  3001                    2600  MOVEMo: move.w  d1,d0
00001B2C  0240 0400               2601          andi.w  #$0400,d0       ;which direction?
00001B30  6600 001A               2602          bne     MOVEMr          ;to reg
00001B34  6100 0776               2603          bsr     dollar
00001B38  3019                    2604          move.w  (a1)+,d0        ;load the reg list
00001B3A  6100 E6F2               2605          bsr     writw           ;write it
00001B3E  6100 0726               2606          bsr     comma
00001B42  3001                    2607          move.w  d1,d0
00001B44  6100 07D0               2608          bsr     writea          ;write the address
00001B48  6000 F564               2609          bra     disend
00001B4C  31D9 41A0               2610  MOVEMr: move.w  (a1)+,t1        ;save the reg list
00001B50  3001                    2611          move.w  d1,d0
00001B52  6100 07C2               2612          bsr     writea          ;write the address
00001B56  6100 070E               2613          bsr     comma
00001B5A  6100 0750               2614          bsr     dollar
00001B5E  3038 41A0               2615          move.w  t1,d0           ;reload the reg list
00001B62  6100 E6CA               2616          bsr     writw           ;write it
00001B66  6000 F546               2617          bra     disend
Line 2618 ERROR: Undefined symbol
00001B6A  41F9 004DBD16           2618  ILLEG:  lea     mILLEG,a0       ;yes, print
00001B70  6100 E6A6               2619          bsr     writs           ;write it
00001B74  6000 F538               2620          bra     disend
00001B78                          2621  
00001B78  3001                    2622  gr5:    move.w  d1,d0           ;refresh the instruction word
00001B7A  C07C 00C0               2623          and.w   #$00c0,d0       ;mask bits 6-7
00001B7E  B07C 00C0               2624          cmp.w   #$00c0,d0       ;DBcc/Scc?
00001B82  6600 007A               2625          bne     addq            ;no
00001B86  3001                    2626          move.w  d1,d0           ;yes
00001B88  0240 0038               2627          andi.w  #$0038,d0       ;mask DB/S bit
00001B8C  0C40 0008               2628          cmpi.w  #$0008,d0       ;DBcc?
00001B90  6600 0034               2629          bne     Scc             ;no
00001B94  103C 0064               2630          move.b  #$64,d0         ;load D into d0
00001B98  6100 E646               2631          bsr     writ            ;write it
00001B9C  103C 0062               2632          move.b  #$62,d0         ;load B into d0
00001BA0  6100 E63E               2633          bsr     writ            ;write it
00001BA4  3001                    2634          move.w  d1,d0           ;refresh
00001BA6  6100 003A               2635          bsr     findcon         ;print condition
00001BAA  6100 06B0               2636          bsr     spc
00001BAE  3001                    2637          move.w  d1,d0           ;refresh
00001BB0  0240 0007               2638          andi.w  #$0007,d0       ;mask out reg
00001BB4  6100 074A               2639          bsr     wdreg           ;write reg
00001BB8  6100 06AC               2640          bsr     comma
00001BBC  4240                    2641          clr.w   d0              ;zero d0 so wdis looks for word disp.
00001BBE  6100 0956               2642          bsr     wdis            ;print the address
00001BC2  6000 F4EA               2643          bra     disend
00001BC6                          2644  
00001BC6  103C 0072               2645  Scc:    move.b  #$72,d0         ;load S into d0
00001BCA  6100 E614               2646          bsr     writ            ;write it
00001BCE  3001                    2647          move.w  d1,d0           ;refresh
00001BD0  6100 0010               2648          bsr     findcon         ;print condition
00001BD4  6100 0686               2649          bsr     spc
00001BD8  3001                    2650          move.w  d1,d0
00001BDA  6100 073A               2651          bsr     writea          ;write operand
00001BDE  6000 F4CE               2652          bra     disend
00001BE2                          2653  
Line 2654 ERROR: Undefined symbol
00001BE2  41F9 004DBD16           2654  findcon:lea     contab,a0       ;load location of beginning of table
00001BE8  0240 0F00               2655          andi.w  #$0f00,d0       ;mask off the condition
00001BEC  EE58                    2656          ror.w   #$07,d0         ;make condition a word offset
00001BEE  D0C0                    2657          adda.w  d0,a0           ;add to table location to get ascii
00001BF0  1018                    2658          move.b  (a0)+,d0        ;load the first byte
00001BF2  6100 E5EC               2659          bsr     writ            ;write it
00001BF6  1018                    2660          move.b  (a0)+,d0        ;load the second byte
00001BF8  6100 E5E6               2661          bsr     writ            ;write it
00001BFC  4E75                    2662          rts
00001BFE                          2663  
Line 2664 ERROR: Invalid opcode
00001BFE                          2664  contab: .ascii  "t "
Line 2665 ERROR: Invalid opcode
00001BFE                          2665          .ascii  "f "
Line 2666 ERROR: Invalid opcode
00001BFE                          2666          .ascii  "hi"
Line 2667 ERROR: Invalid opcode
00001BFE                          2667          .ascii  "ls"
Line 2668 ERROR: Invalid opcode
00001BFE                          2668          .ascii  "cc"
Line 2669 ERROR: Invalid opcode
00001BFE                          2669          .ascii  "cs"
Line 2670 ERROR: Invalid opcode
00001BFE                          2670          .ascii  "ne"
Line 2671 ERROR: Invalid opcode
00001BFE                          2671          .ascii  "eq"
Line 2672 ERROR: Invalid opcode
00001BFE                          2672          .ascii  "vc"
Line 2673 ERROR: Invalid opcode
00001BFE                          2673          .ascii  "vs"
Line 2674 ERROR: Invalid opcode
00001BFE                          2674          .ascii  "pl"
Line 2675 ERROR: Invalid opcode
00001BFE                          2675          .ascii  "mi"
Line 2676 ERROR: Invalid opcode
00001BFE                          2676          .ascii  "ge"
Line 2677 ERROR: Invalid opcode
00001BFE                          2677          .ascii  "lt"
Line 2678 ERROR: Invalid opcode
00001BFE                          2678          .ascii  "gt"
Line 2679 ERROR: Invalid opcode
00001BFE                          2679          .ascii  "le"
00001BFE                          2680  
00001BFE  3001                    2681  addq:   move.w  d1,d0
00001C00  0240 0100               2682          andi.w  #$0100,d0       ;addq/subq
00001C04  6600 000C               2683          bne     subq
Line 2684 ERROR: Undefined symbol
00001C08  41F9 004DBD16           2684          lea     mADDQ,a0        ;load "addq"
00001C0E  6000 0008               2685          bra     qwrit
Line 2686 ERROR: Undefined symbol
00001C12  41F9 004DBD16           2686  subq:   lea     mSUBQ,a0        ;load "subq"
00001C18  6100 E5FE               2687  qwrit:  bsr     writs           ;write it
00001C1C  6100 0670               2688          bsr     dot
00001C20  3001                    2689          move.w  d1,d0
00001C22  6100 0692               2690          bsr     findsiz         ;write size of operand
00001C26  6100 0634               2691          bsr     spc
00001C2A  6100 0658               2692          bsr     pound
00001C2E  6100 067C               2693          bsr     dollar
00001C32  3001                    2694          move.w  d1,d0
00001C34  0240 0E00               2695          andi.w  #$0e00,d0       ;mask data
00001C38  EF58                    2696          rol.w   #$07,d0         ;get into rightmost bits
00001C3A  6600 0006               2697          bne     q8              ;if nonzero, range is 1-7
00001C3E  103C 0008               2698          move.b  #$08,d0         ;if zero, range is 8
00001C42  6100 E5E0               2699  q8:     bsr     writb           ;write byte
00001C46  6100 061E               2700          bsr     comma
00001C4A  3001                    2701          move.w  d1,d0
00001C4C  6100 06C8               2702          bsr     writea          ;write dest
00001C50  6000 F45C               2703          bra     disend
00001C54                          2704  
00001C54  3001                    2705  gr6:    move.w  d1,d0
00001C56  0240 0F00               2706          andi.w  #$0f00,d0       ;mask the cond bit
00001C5A  6600 0010               2707          bne     BSR             ;not BRA
Line 2708 ERROR: Undefined symbol
00001C5E  41F9 004DBD16           2708          lea     mBRA,a0         ;load "bra"
00001C64  6100 E5B2               2709          bsr     writs           ;write it
00001C68  6000 0026               2710          bra     Bccw            ;go write operand
00001C6C  B07C 0100               2711  BSR:    cmp.w   #$0100,d0       ;BSR?
00001C70  6600 0010               2712          bne     Bcc             ;no
Line 2713 ERROR: Undefined symbol
00001C74  41F9 004DBD16           2713          lea     mBSR,a0         ;load "bsr"
00001C7A  6100 E59C               2714          bsr     writs           ;write it
00001C7E  6000 0010               2715          bra     Bccw            ;go write operand
00001C82  103C 0062               2716  Bcc:    move.b  #$62,d0         ;load a B
00001C86  6100 E558               2717          bsr     writ            ;write it
00001C8A  3001                    2718          move.w  d1,d0
00001C8C  6100 FF54               2719          bsr     findcon         ;print the condition
00001C90  6100 05CA               2720  Bccw:   bsr     spc
00001C94  3001                    2721          move.w  d1,d0
00001C96  6100 087E               2722          bsr     wdis            ;write the address
00001C9A  6000 F412               2723          bra     disend
00001C9E                          2724  
00001C9E  3001                    2725  gr7:    move.w  d1,d0
00001CA0  0240 0100               2726          andi.w  #$0100,d0       ;check to make sure
00001CA4  6600 FEC4               2727          bne     ILLEG
Line 2728 ERROR: Undefined symbol
00001CA8  41F9 004DBD16           2728          lea     mMOVEQ,a0       ;load "MOVEQ"
00001CAE  6100 E568               2729          bsr     writs           ;write it
00001CB2  6100 05A8               2730          bsr     spc
00001CB6  6100 05CC               2731          bsr     pound
00001CBA  6100 05F0               2732          bsr     dollar
00001CBE  1001                    2733          move.b  d1,d0           ;load data
00001CC0  6100 E562               2734          bsr     writb           ;write it
00001CC4  6100 05A0               2735          bsr     comma
00001CC8  3001                    2736          move.w  d1,d0
00001CCA  0240 0E00               2737          andi.w  #$0e00,d0       ;mask off the reg bits
00001CCE  EF58                    2738          rol.w   #$07,d0         ;get into rightmost bits
00001CD0  6100 062E               2739          bsr     wdreg           ;write it
00001CD4  6000 F3D8               2740          bra     disend
00001CD8                          2741  
00001CD8  3001                    2742  gr8:    move.w  d1,d0
00001CDA  0240 01F0               2743          andi.w  #$01f0,d0       ;mask for SBCD.
00001CDE  0C40 0100               2744          cmpi.w  #$0100,d0       ;is it SBCD?
00001CE2  6600 0072               2745          bne     DIVS
Line 2746 ERROR: Undefined symbol
00001CE6  41F9 004DBD16           2746          lea     mSBCD,a0        ;load "SBCD"
00001CEC  6100 E52A               2747  xBCD:   bsr     writs           ;write it
00001CF0  3001                    2748          move.w  d1,d0
00001CF2  0240 0008               2749          andi.w  #$0008,d0       ;mask reg/memory bit
00001CF6  6700 003C               2750          beq     sbcdrg          ;reg to reg op
00001CFA  6100 0560               2751          bsr     spc
00001CFE  6100 05A2               2752          bsr     minus
00001D02  6100 056C               2753          bsr     lparen
00001D06  3001                    2754          move.w  d1,d0
00001D08  0240 0007               2755          andi.w  #$0007,d0       ;mask source reg
00001D0C  6100 05DC               2756          bsr     wareg           ;print it
00001D10  6100 0568               2757          bsr     rparen
00001D14  6100 0550               2758          bsr     comma
00001D18  6100 0588               2759          bsr     minus
00001D1C  6100 0552               2760          bsr     lparen
00001D20  3001                    2761          move.w  d1,d0
00001D22  0240 0E00               2762          andi.w  #$0e00,d0       ;mask destination reg
00001D26  EF58                    2763          rol.w   #$07,d0         ;get into rightmost bits
00001D28  6100 05C0               2764          bsr     wareg           ;print it
00001D2C  6100 054C               2765          bsr     rparen
00001D30  6000 F37C               2766          bra     disend
00001D34  6100 0526               2767  sbcdrg: bsr     spc
00001D38  3001                    2768          move.w  d1,d0
00001D3A  0240 0007               2769          andi.w  #$0007,d0       ;mask source reg
00001D3E  6100 05C0               2770          bsr     wdreg
00001D42  6100 0522               2771          bsr     comma
00001D46  3001                    2772          move.w  d1,d0
00001D48  0240 0E00               2773          andi.w  #$0e00,d0       ;mask destination reg
00001D4C  EF58                    2774          rol.w   #$07,d0         ;get into rightmost bits
00001D4E  6100 05B0               2775          bsr     wdreg           ;print it
00001D52  6000 F35A               2776          bra     disend
00001D56                          2777  
00001D56  3001                    2778  DIVS:   move.w  d1,d0
00001D58  0240 00C0               2779          andi.w  #$00c0,d0       ;mask mode bits
00001D5C  0C40 00C0               2780          cmpi.w  #$00c0,d0       ;is this a DIV operation
00001D60  6600 0042               2781          bne     OR              ;no.
00001D64  3001                    2782          move.w  d1,d0           ;yes.
00001D66  0240 0100               2783          andi.w  #$0100,d0       ;mask the sign bit
00001D6A  6700 0010               2784          beq     DIVU            ;it's unsigned divide
Line 2785 ERROR: Undefined symbol
00001D6E  41F9 004DBD16           2785          lea     mDIVS,a0        ;load "DIVS"
00001D74  6100 E4A2               2786          bsr     writs           ;write it
00001D78  6000 000C               2787          bra     divprt          ;go decode the rest of the command
Line 2788 ERROR: Undefined symbol
00001D7C  41F9 004DBD16           2788  DIVU:   lea     mDIVU,a0        ;load "DIVU"
00001D82  6100 E494               2789          bsr     writs           ;write it
00001D86  6100 04D4               2790  divprt: bsr     spc
00001D8A  3001                    2791          move.w  d1,d0
00001D8C  6100 0588               2792          bsr     writea
00001D90  6100 04D4               2793          bsr     comma
00001D94  3001                    2794          move.w  d1,d0
00001D96  0240 0E00               2795          andi.w  #$0e00,d0       ;mask data reg
00001D9A  EF58                    2796          rol.w   #$07,d0         ;get into rightmost bits
00001D9C  6100 0562               2797          bsr     wdreg           ;print it
00001DA0  6000 F30C               2798          bra     disend
00001DA4                          2799  
Line 2800 ERROR: Undefined symbol
00001DA4  41F9 004DBD16           2800  OR:     lea     mOR,a0          ;load "OR"
00001DAA  6100 E46C               2801  ANDent: bsr     writs           ;write it
00001DAE  6100 04DE               2802          bsr     dot
00001DB2  3001                    2803          move.w  d1,d0
00001DB4  6100 0500               2804          bsr     findsiz         ;print operand size
00001DB8  6100 04A2               2805          bsr     spc
00001DBC  3001                    2806          move.w  d1,d0
00001DBE  0240 0100               2807          andi.w  #$0100,d0       ;find destination
00001DC2  6700 001C               2808          beq     ordreg          ;if zero, data reg
00001DC6  3001                    2809          move.w  d1,d0
00001DC8  0240 0E00               2810          andi.w  #$0e00,d0       ;mask the reg bits
00001DCC  EF58                    2811          rol.w   #$07,d0         ;get into rightmost bits
00001DCE  6100 0530               2812          bsr     wdreg           ;and print it
00001DD2  6100 0492               2813          bsr     comma
00001DD6  3001                    2814          move.w  d1,d0
00001DD8  6100 053C               2815          bsr     writea          ;write the destination
00001DDC  6000 F2D0               2816          bra     disend
00001DE0  3001                    2817  ordreg: move.w  d1,d0
00001DE2  6100 0532               2818          bsr     writea          ;write the source
00001DE6  6100 047E               2819          bsr     comma
00001DEA  3001                    2820          move.w  d1,d0
00001DEC  0240 0E00               2821          andi.w  #$0e00,d0       ;mask the reg bits
00001DF0  EF58                    2822          rol.w   #$07,d0         ;get into rightmost bits
00001DF2  6100 050C               2823          bsr     wdreg           ;and print it
00001DF6  6000 F2B6               2824          bra     disend
00001DFA                          2825  
Line 2826 ERROR: Undefined symbol
00001DFA  41F9 004DBD16           2826  gr9:    lea     mSUB,a0         ;load "SUB"
00001E00  6100 E416               2827          bsr     writs           ;write it
00001E04  3001                    2828  ax:     move.w  d1,d0
00001E06  0240 00C0               2829          andi.w  #$00c0,d0       ;mask the size bits
00001E0A  0C40 00C0               2830          cmpi.w  #$00c0,d0       ;is it ADDA or SUBA?
00001E0E  6600 0030               2831          bne     SUB             ;no
00001E12  103C 0061               2832          move.b  #$61,d0         ;yes, so load an 'A'
00001E16  6100 E3C8               2833          bsr     writ            ;write it
00001E1A  6100 0472               2834          bsr     dot
00001E1E  3001                    2835          move.w  d1,d0
00001E20  0240 0100               2836          andi.w  #$0100,d0       ;mask size bit
00001E24  6600 000E               2837          bne     SUBAl           ;if set, longword operand
00001E28  103C 0077               2838          move.b  #$77,d0         ;load 'W'
00001E2C  6100 E3B2               2839          bsr     writ            ;write it
00001E30  6000 0026               2840          bra     axa             ;go print operands
00001E34  103C 006C               2841  SUBAl:  move.b  #$6c,d0         ;load 'L'
00001E38  6100 E3A6               2842          bsr     writ            ;write it
00001E3C  6000 001A               2843          bra     axa             ;go print operands
00001E40  3001                    2844  SUB:    move.w  d1,d0
00001E42  0240 0130               2845          andi.w  #$0130,d0       ;mask appropriate bits
00001E46  0C40 0100               2846          cmpi.w  #$0100,d0       ;is it ADDX or SUBX?
00001E4A  6700 0076               2847          beq     SUBX            ;yes
00001E4E  6100 043E               2848          bsr     dot             ;no, so continue
00001E52  3001                    2849          move.w  d1,d0
00001E54  6100 0460               2850          bsr     findsiz         ;print the size of the operand
00001E58  6100 0402               2851  axa:    bsr     spc
00001E5C  3001                    2852          move.w  d1,d0
00001E5E  0240 00C0               2853          andi.w  #$00c0,d0       ;mask the size bits
00001E62  0C40 00C0               2854          cmpi.w  #$00c0,d0       ;is it ADDA or SUBA
00001E66  6700 0026               2855          beq     subea1          ;if so, <ea> is first operand
00001E6A  3001                    2856          move.w  d1,d0
00001E6C  0240 0100               2857          andi.w  #$0100,d0       ;mask direction bit
00001E70  6600 0036               2858          bne     subea2          ;if bit is set, <ea> is last operand
00001E74  3001                    2859          move.w  d1,d0
00001E76  6100 049E               2860          bsr     writea          ;write the first operand
00001E7A  6100 03EA               2861          bsr     comma
00001E7E  3001                    2862          move.w  d1,d0
00001E80  0240 0E00               2863          andi.w  #$0e00,d0       ;mask the reg bits
00001E84  EF58                    2864          rol.w   #$07,d0         ;get into rightmost bits
00001E86  6100 0478               2865          bsr     wdreg           ;print it
00001E8A  6000 F222               2866          bra     disend
00001E8E  3001                    2867  subea1: move.w  d1,d0
00001E90  6100 0484               2868          bsr     writea          ;write the first operand
00001E94  6100 03D0               2869          bsr     comma
00001E98  3001                    2870          move.w  d1,d0
00001E9A  0240 0E00               2871          andi.w  #$0e00,d0       ;mask the reg bits
00001E9E  EF58                    2872          rol.w   #$07,d0         ;get into rightmost bits
00001EA0  6100 0448               2873          bsr     wareg           ;print it
00001EA4  6000 F208               2874          bra     disend
00001EA8  3001                    2875  subea2: move.w  d1,d0
00001EAA  0240 0E00               2876          andi.w  #$0e00,d0       ;mask the reg bits
00001EAE  EF58                    2877          rol.w   #$07,d0         ;get into rightmost bits
00001EB0  6100 044E               2878          bsr     wdreg           ;print it
00001EB4  6100 03B0               2879          bsr     comma
00001EB8  3001                    2880          move.w  d1,d0
00001EBA  6100 045A               2881          bsr     writea          ;write second operand
00001EBE  6000 F1EE               2882          bra     disend
00001EC2                          2883  
00001EC2  103C 0078               2884  SUBX:   move.b  #$78,d0         ;load an 'X'
00001EC6  6100 E318               2885          bsr     writ            ;write it
00001ECA  6100 03C2               2886          bsr     dot
00001ECE  3001                    2887          move.w  d1,d0
00001ED0  6100 03E4               2888          bsr     findsiz         ;write the operand length
00001ED4  6100 0386               2889          bsr     spc
00001ED8  3001                    2890          move.w  d1,d0
00001EDA  0240 0008               2891          andi.w  #$0008,d0       ;mask reg/memory bit
00001EDE  6700 0038               2892          beq     SUBXdr          ;reg to reg op
00001EE2  6100 03BE               2893          bsr     minus
00001EE6  6100 0388               2894          bsr     lparen
00001EEA  3001                    2895          move.w  d1,d0
00001EEC  0240 0007               2896          andi.w  #$0007,d0       ;mask source reg
00001EF0  6100 03F8               2897          bsr     wareg           ;print it
00001EF4  6100 0384               2898          bsr     rparen
00001EF8  6100 036C               2899          bsr     comma
00001EFC  6100 03A4               2900          bsr     minus
00001F00  6100 036E               2901          bsr     lparen
00001F04  3001                    2902          move.w  d1,d0
00001F06  0240 0E00               2903          andi.w  #$0e00,d0       ;mask destination reg
00001F0A  EF58                    2904          rol.w   #$07,d0         ;get into rightmost bits
00001F0C  6100 03DC               2905          bsr     wareg           ;print it
00001F10  6100 0368               2906          bsr     rparen
00001F14  6000 F198               2907          bra     disend
00001F18  3001                    2908  SUBXdr: move.w  d1,d0
00001F1A  0240 0007               2909          andi.w  #$0007,d0       ;mask source reg
00001F1E  6100 03E0               2910          bsr     wdreg
00001F22  6100 0342               2911          bsr     comma
00001F26  3001                    2912          move.w  d1,d0
00001F28  0240 0E00               2913          andi.w  #$0e00,d0       ;mask destination reg
00001F2C  EF58                    2914          rol.w   #$07,d0         ;get into rightmost bits
00001F2E  6100 03D0               2915          bsr     wdreg           ;print it
00001F32  6000 F17A               2916          bra     disend
00001F36                          2917  
00001F36  6000 FC32               2918  gra:    bra     ILLEG           ;not a valid instruction
00001F3A                          2919  
00001F3A  3001                    2920  grb:    move.w  d1,d0
00001F3C  0240 00C0               2921          andi.w  #$00c0,d0       ;mask size bits
00001F40  0C40 00C0               2922          cmpi.w  #$00c0,d0       ;size EQU 11 ?
00001F44  6600 0054               2923          bne     CMP             ;no.
Line 2924 ERROR: Undefined symbol
00001F48  41F9 004DBD16           2924          lea     mCMPA,a0        ;yes, so load "CMPA"
00001F4E  6100 E2C8               2925          bsr     writs           ;write it
00001F52  6100 033A               2926          bsr     dot
00001F56  3001                    2927          move.w  d1,d0
00001F58  0240 0100               2928          andi.w  #$0100,d0       ;mask CMPA size bit
00001F5C  6600 0012               2929          bne     CMPAl           ;if nonzero, longword operand
00001F60  103C 0077               2930          move.b  #$77,d0         ;load 'W'
00001F64  11C0 42DA               2931          move.b  d0,siz          ;save size as 'W'
00001F68  6100 E276               2932          bsr     writ            ;write it
00001F6C  6000 000E               2933          bra     CMPAop          ;go write operands
00001F70  103C 006C               2934  CMPAl:  move.b  #$6c,d0         ;load 'L'
00001F74  11C0 42DA               2935          move.b  d0,siz          ;save size as 'L'
00001F78  6100 E266               2936          bsr     writ            ;write it
00001F7C  6100 02DE               2937  CMPAop: bsr     spc
00001F80  3001                    2938          move.w  d1,d0
00001F82  6100 0392               2939          bsr     writea          ;go write source operand
00001F86  6100 02DE               2940          bsr     comma
00001F8A  3001                    2941          move.w  d1,d0
00001F8C  0240 0E00               2942          andi.w  #$0e00,d0       ;mask reg number
00001F90  EF58                    2943          rol.w   #$07,d0         ;get into rightmost bits
00001F92  6100 0356               2944          bsr     wareg           ;write it
00001F96  6000 F116               2945          bra     disend
00001F9A  3001                    2946  CMP:    move.w  d1,d0
00001F9C  0240 0100               2947          andi.w  #$0100,d0       ;mask CMP/CMPM bit
00001FA0  6600 0034               2948          bne     CMPM            ;if nonzero, it's CMPM
Line 2949 ERROR: Undefined symbol
00001FA4  41F9 004DBD16           2949          lea     mCMP,a0         ;load "CMP"
00001FAA  6100 E26C               2950          bsr     writs           ;write it
00001FAE  6100 02DE               2951          bsr     dot
00001FB2  3001                    2952          move.w  d1,d0
00001FB4  6100 0300               2953          bsr     findsiz         ;write size of operand
00001FB8  6100 02A2               2954          bsr     spc
00001FBC  3001                    2955          move.w  d1,d0
00001FBE  6100 0356               2956          bsr     writea          ;write source operand
00001FC2  6100 02A2               2957          bsr     comma
00001FC6  3001                    2958          move.w  d1,d0
00001FC8  0240 0E00               2959          andi.w  #$0e00,d0       ;mask reg number
00001FCC  EF58                    2960          rol.w   #$07,d0         ;get into rightmost bits
00001FCE  6100 0330               2961          bsr     wdreg           ;write it
00001FD2  6000 F0DA               2962          bra     disend
00001FD6  3001                    2963  CMPM:   move.w  d1,d0
00001FD8  0240 0038               2964          andi.w  #$0038,d0       ;mask mode bits
00001FDC  0C40 0008               2965          cmpi.w  #$0008,d0       ;is it address reg mode?
00001FE0  6600 0050               2966          bne     EOR             ;if not, it's an EOR
Line 2967 ERROR: Undefined symbol
00001FE4  41F9 004DBD16           2967          lea     mCMPM,a0        ;load "CMPM"
00001FEA  6100 E22C               2968          bsr     writs           ;write it
00001FEE  6100 029E               2969          bsr     dot
00001FF2  3001                    2970          move.w  d1,d0
00001FF4  6100 02C0               2971          bsr     findsiz         ;write the operand size
00001FF8  6100 0262               2972          bsr     spc
00001FFC  6100 0272               2973          bsr     lparen
00002000  3001                    2974          move.w  d1,d0
00002002  0240 0007               2975          andi.w  #$0007,d0       ;mask source reg bits
00002006  6100 02E2               2976          bsr     wareg           ;write it
0000200A  6100 026E               2977          bsr     rparen
0000200E  6100 0288               2978          bsr     plus
00002012  6100 0252               2979          bsr     comma
00002016  6100 0258               2980          bsr     lparen
0000201A  3001                    2981          move.w  d1,d0
0000201C  0240 0E00               2982          andi.w  #$0e00,d0       ;mask destination reg bits
00002020  EF58                    2983          rol.w   #$07,d0         ;get into rightmost bits
00002022  6100 02C6               2984          bsr     wareg           ;write it
00002026  6100 0252               2985          bsr     rparen
0000202A  6100 026C               2986          bsr     plus
0000202E  6000 F07E               2987          bra     disend
Line 2988 ERROR: Undefined symbol
00002032  41F9 004DBD16           2988  EOR:    lea     mEOR,a0         ;load "EOR"
00002038  6100 E1DE               2989          bsr     writs           ;write it
0000203C  6100 0250               2990          bsr     dot
00002040  3001                    2991          move.w  d1,d0
00002042  6100 0272               2992          bsr     findsiz         ;write operand size
00002046  6100 0214               2993          bsr     spc
0000204A  3001                    2994          move.w  d1,d0
0000204C  0240 0E00               2995          andi.w  #$0e00,d0       ;mask reg number
00002050  EF58                    2996          rol.w   #$07,d0         ;get into rightmost bits
00002052  6100 02AC               2997          bsr     wdreg           ;write it
00002056  6100 020E               2998          bsr     comma
0000205A  3001                    2999          move.w  d1,d0
0000205C  6100 02B8               3000          bsr     writea          ;write destination
00002060  6000 F04C               3001          bra     disend
00002064                          3002  
00002064  3001                    3003  grc:    move.w  d1,d0
00002066  0240 01F0               3004          andi.w  #$01f0,d0       ;mask for ABCD
0000206A  0C40 0100               3005          cmpi.w  #$0100,d0       ;is it ABCD?
0000206E  6600 000C               3006          bne     MULS            ;no.
Line 3007 ERROR: Undefined symbol
00002072  41F9 004DBD16           3007          lea     mABCD,a0        ;load "ABCD"
00002078  6000 FC72               3008          bra     xBCD            ;go print everything
0000207C  3001                    3009  MULS:   move.w  d1,d0
0000207E  0240 00C0               3010          andi.w  #$00c0,d0       ;mask mode bits
00002082  0C40 00C0               3011          cmpi.w  #$00c0,d0       ;is this a MUL operation?
00002086  6600 0028               3012          bne     EXG             ;no.
0000208A  3001                    3013          move.w  d1,d0           ;yes.
0000208C  0240 0100               3014          andi.w  #$0100,d0       ;mask the sign bit
00002090  6700 0010               3015          beq     MULU            ;it's unsigned multiply
Line 3016 ERROR: Undefined symbol
00002094  41F9 004DBD16           3016          lea     mMULS,a0        ;load "MULS"
0000209A  6100 E17C               3017          bsr     writs           ;write it
0000209E  6000 FCE6               3018          bra     divprt          ;go decode the rest of the command
Line 3019 ERROR: Undefined symbol
000020A2  41F9 004DBD16           3019  MULU:   lea     mMULU,a0        ;load "MULU"
000020A8  6100 E16E               3020          bsr     writs           ;write it
000020AC  6000 FCD8               3021          bra     divprt          ;go decode the rest of the command
000020B0  3001                    3022  EXG:    move.w  d1,d0
000020B2  0240 0130               3023          andi.w  #$0130,d0       ;mask for EXG
000020B6  0C40 0100               3024          cmpi.w  #$0100,d0       ;is it EXG?
000020BA  6600 0088               3025          bne     AND             ;no.
Line 3026 ERROR: Undefined symbol
000020BE  41F9 004DBD16           3026          lea     mEXG,a0         ;yes, print
000020C4  6100 E152               3027          bsr     writs           ;write it
000020C8  6100 0192               3028          bsr     spc
000020CC  3001                    3029          move.w  d1,d0
000020CE  0240 00F8               3030          andi.w  #$00f8,d0       ;mask op-mode bits
000020D2  0C40 0040               3031          cmpi.w  #$0040,d0       ;is it Di,Dj?
000020D6  6600 0020               3032          bne     EXGaa           ;no
000020DA  3001                    3033          move.w  d1,d0
000020DC  0240 0E00               3034          andi.w  #$0e00,d0       ;mask source reg number
000020E0  EF58                    3035          rol.w   #$07,d0         ;get into rightmost bits
000020E2  6100 021C               3036          bsr     wdreg           ;write it
000020E6  6100 017E               3037          bsr     comma
000020EA  3001                    3038          move.w  d1,d0
000020EC  0240 0007               3039          andi.w  #$0007,d0       ;mask destination reg number
000020F0  6100 020E               3040          bsr     wdreg           ;write it
000020F4  6000 EFB8               3041          bra     disend
000020F8  0C40 0048               3042  EXGaa:  cmpi.w  #$0048,d0       ;is it Ai,Aj?
000020FC  6600 0020               3043          bne     EXGda           ;no
00002100  3001                    3044          move.w  d1,d0
00002102  0240 0E00               3045          andi.w  #$0e00,d0       ;mask source reg number
00002106  EF58                    3046          rol.w   #$07,d0         ;get into rightmost bits
00002108  6100 01E0               3047          bsr     wareg           ;write it
0000210C  6100 0158               3048          bsr     comma
00002110  3001                    3049          move.w  d1,d0
00002112  0240 0007               3050          andi.w  #$0007,d0       ;mask destination reg number
00002116  6100 01D2               3051          bsr     wareg           ;write it
0000211A  6000 EF92               3052          bra     disend
0000211E  0C40 0088               3053  EXGda:  cmpi.w  #$0088,d0       ;is it Di,Aj?
00002122  6600 FA46               3054          bne     ILLEG
00002126  3001                    3055          move.w  d1,d0
00002128  0240 0E00               3056          andi.w  #$0e00,d0       ;mask source reg number
0000212C  EF58                    3057          rol.w   #$07,d0         ;get into rightmost bits
0000212E  6100 01D0               3058          bsr     wdreg           ;write it
00002132  6100 0132               3059          bsr     comma
00002136  3001                    3060          move.w  d1,d0
00002138  0240 0007               3061          andi.w  #$0007,d0       ;mask destination reg number
0000213C  6100 01AC               3062          bsr     wareg           ;write it
00002140  6000 EF6C               3063          bra     disend
Line 3064 ERROR: Undefined symbol
00002144  41F9 004DBD16           3064  AND:    lea     mAND,a0         ;load "AND"
0000214A  6000 FC5E               3065          bra     ANDent          ;go write the operation
0000214E                          3066  
Line 3067 ERROR: Undefined symbol
0000214E  41F9 004DBD16           3067  grd:    lea     mADD,a0         ;load "ADD"
00002154  6100 E0C2               3068          bsr     writs           ;write it, then find out which ADD
00002158  6000 FCAA               3069          bra     ax              ;go find out which ADD it is
0000215C                          3070  
0000215C  3001                    3071  gre:    move.w  d1,d0
0000215E  31C1 41A0               3072          move.w  d1,t1           ;save an extra copy of opcode
00002162  0240 00C0               3073          andi.w  #$00c0,d0       ;is this an <ea> instruction?
00002166  0C40 00C0               3074          cmpi.w  #$00c0,d0
0000216A  6600 000A               3075          bne     fshf            ;if not, find out which shift
0000216E  3001                    3076          move.w  d1,d0           ;else adjust the saved opcode
00002170  EC58                    3077          ror.w   #$06,d0         ;rightward by six bits to allow proper
00002172  31C0 41A0               3078          move.w  d0,t1           ;decoding of the shift type
00002176  3038 41A0               3079  fshf:   move.w  t1,d0           ;load the properly adjusted opcode
0000217A  0240 0018               3080          andi.w  #$0018,d0       ;mask operation bits of adjusted opcode
0000217E  6600 000C               3081          bne     LS              ;not AS
Line 3082 ERROR: Undefined symbol
00002182  41F9 004DBD16           3082          lea     mAS,a0          ;load "AS"
00002188  6000 002C               3083          bra     lr              ;find the direction
0000218C  0C40 0008               3084  LS:     cmpi.w  #$0008,d0       ;is it LS?
00002190  6600 000C               3085          bne     ROX             ;no
Line 3086 ERROR: Undefined symbol
00002194  41F9 004DBD16           3086          lea     mLS,a0          ;yes, so load "LS"
0000219A  6000 001A               3087          bra     lr              ;find the direction
0000219E  0C40 0010               3088  ROX:    cmpi.w  #$0010,d0       ;is it ROX?
000021A2  6600 000C               3089          bne     RO              ;no
Line 3090 ERROR: Undefined symbol
000021A6  41F9 004DBD16           3090          lea     mROX,a0         ;yes, so load "ROX"
000021AC  6000 0008               3091          bra     lr
Line 3092 ERROR: Undefined symbol
000021B0  41F9 004DBD16           3092  RO:     lea     mRO,a0          ;load "RO"
000021B6  6100 E060               3093  lr:     bsr     writs           ;write the operation
000021BA  3001                    3094          move.w  d1,d0
000021BC  0240 0100               3095          andi.w  #$0100,d0       ;mask the direction bit
000021C0  6600 000A               3096          bne     lsh             ;left shift if bit set
000021C4  103C 0072               3097          move.b  #$72,d0         ;load 'r'
000021C8  6000 0006               3098          bra     shtyp           ;go find the shift type
000021CC  103C 006C               3099  lsh:    move.b  #$6c,d0         ;load 'l'
000021D0  6100 E00E               3100  shtyp:  bsr     writ            ;write the direction
000021D4  3001                    3101          move.w  d1,d0
000021D6  0240 00C0               3102          andi.w  #$00c0,d0       ;mask the size bits
000021DA  0C40 00C0               3103          cmpi.w  #$00c0,d0       ;is the size 11?
000021DE  6600 0010               3104          bne     regsh           ;if not, it's a reg shift
000021E2  6100 0078               3105          bsr     spc
000021E6  3001                    3106          move.w  d1,d0
000021E8  6100 012C               3107          bsr     writea          ;write the operand
000021EC  6000 EEC0               3108          bra     disend
000021F0  6100 009C               3109  regsh:  bsr     dot
000021F4  3001                    3110          move.w  d1,d0
000021F6  6100 00BE               3111          bsr     findsiz         ;print the operand length
000021FA  6100 0060               3112          bsr     spc
000021FE  3001                    3113          move.w  d1,d0
00002200  0240 0020               3114          andi.w  #$0020,d0       ;mask the immediate/reg bit
00002204  6700 0020               3115          beq     immsh           ;if bit clear, it's an immediate shift
00002208  3001                    3116          move.w  d1,d0
0000220A  0240 0E00               3117          andi.w  #$0e00,d0       ;mask the count reg
0000220E  EF58                    3118          rol.w   #$07,d0         ;get into rightmost bits
00002210  6100 00EE               3119          bsr     wdreg           ;write count reg
00002214  6100 0050               3120          bsr     comma
00002218  3001                    3121          move.w  d1,d0
0000221A  0240 0007               3122          andi.w  #$0007,d0       ;mask destination reg
0000221E  6100 00E0               3123          bsr     wdreg           ;write destination reg
00002222  6000 EE8A               3124          bra     disend
00002226  6100 0034               3125  immsh:  bsr     spc
0000222A  6100 0058               3126          bsr     pound
0000222E  6100 007C               3127          bsr     dollar
00002232  3001                    3128          move.w  d1,d0
00002234  0240 0E00               3129          andi.w  #$0e00,d0       ;mask the count bits
00002238  EF58                    3130          rol.w   #$07,d0         ;get into rightmost bits
0000223A  6600 0006               3131          bne     sh17            ;if not zero, 1-7 bit shift
0000223E  103C 0008               3132          move.b  #$08,d0         ;if zero, 8 bit shift
00002242  6100 DFE0               3133  sh17:   bsr     writb           ;write it
00002246  6100 001E               3134          bsr     comma
0000224A  3001                    3135          move.w  d1,d0
0000224C  0240 0007               3136          andi.w  #$0007,d0       ;mask the reg bits
00002250  6100 00AE               3137          bsr     wdreg           ;write the destination reg
00002254  6000 EE58               3138          bra     disend
00002258                          3139  
00002258  6000 F910               3140  grf:    bra     ILLEG           ;not a valid instruction
0000225C                          3141  
0000225C                          3142  ;
0000225C                          3143  ;       message table -- the ascii strings for the instructions
0000225C                          3144  ;
Line 3145 ERROR: Invalid opcode
0000225C                          3145  mCOPOUT:.asciz  "COPOUT"
Line 3146 ERROR: Invalid opcode
0000225C                          3146  mABCD:  .asciz  "abcd"
Line 3147 ERROR: Invalid opcode
0000225C                          3147  mADD:   .asciz  "add"
Line 3148 ERROR: Invalid opcode
0000225C                          3148  mADDA:  .asciz  "adda"
Line 3149 ERROR: Invalid opcode
0000225C                          3149  mADDI:  .asciz  "addi"
Line 3150 ERROR: Invalid opcode
0000225C                          3150  mADDQ:  .asciz  "addq"
Line 3151 ERROR: Invalid opcode
0000225C                          3151  mADDX:  .asciz  "addx"
Line 3152 ERROR: Invalid opcode
0000225C                          3152  mAND:   .asciz  "and"
Line 3153 ERROR: Invalid opcode
0000225C                          3153  mANDI:  .asciz  "andi"
Line 3154 ERROR: Invalid opcode
0000225C                          3154  mAS:    .asciz  "as"
Line 3155 ERROR: Invalid opcode
0000225C                          3155  mBCHG:  .asciz  "bchg"
Line 3156 ERROR: Invalid opcode
0000225C                          3156  mBCLR:  .asciz  "bclr"
Line 3157 ERROR: Invalid opcode
0000225C                          3157  mBKPT:  .asciz  "bkpt"
Line 3158 ERROR: Invalid opcode
0000225C                          3158  mBRA:   .asciz  "bra"
Line 3159 ERROR: Invalid opcode
0000225C                          3159  mBSET:  .asciz  "bset"
Line 3160 ERROR: Invalid opcode
0000225C                          3160  mBSR:   .asciz  "bsr"
Line 3161 ERROR: Invalid opcode
0000225C                          3161  mBTST:  .asciz  "btst"
Line 3162 ERROR: Invalid opcode
0000225C                          3162  mCHK:   .asciz  "chk"
Line 3163 ERROR: Invalid opcode
0000225C                          3163  mCLR:   .asciz  "clr"
Line 3164 ERROR: Invalid opcode
0000225C                          3164  mCMP:   .asciz  "cmp"
Line 3165 ERROR: Invalid opcode
0000225C                          3165  mCMPA:  .asciz  "cmpa"
Line 3166 ERROR: Invalid opcode
0000225C                          3166  mCMPI:  .asciz  "cmpi"
Line 3167 ERROR: Invalid opcode
0000225C                          3167  mCMPM:  .asciz  "cmpm"
Line 3168 ERROR: Invalid opcode
0000225C                          3168  mDIVS:  .asciz  "divs"
Line 3169 ERROR: Invalid opcode
0000225C                          3169  mDIVU:  .asciz  "divu"
Line 3170 ERROR: Invalid opcode
0000225C                          3170  mEOR:   .asciz  "eor"
Line 3171 ERROR: Invalid opcode
0000225C                          3171  mEORI:  .asciz  "eori"
Line 3172 ERROR: Invalid opcode
0000225C                          3172  mEORIcr:.asciz  "eoriccr"
Line 3173 ERROR: Invalid opcode
0000225C                          3173  mEXG:   .asciz  "exg"
Line 3174 ERROR: Invalid opcode
0000225C                          3174  mEXT:   .asciz  "ext"
Line 3175 ERROR: Invalid opcode
0000225C                          3175  mILLEG: .asciz  "ILLEGAL"
Line 3176 ERROR: Invalid opcode
0000225C                          3176  mJMP:   .asciz  "jmp"
Line 3177 ERROR: Invalid opcode
0000225C                          3177  mJSR:   .asciz  "jsr"
Line 3178 ERROR: Invalid opcode
0000225C                          3178  mLEA:   .asciz  "lea"
Line 3179 ERROR: Invalid opcode
0000225C                          3179  mLINK:  .asciz  "link"
Line 3180 ERROR: Invalid opcode
0000225C                          3180  mLS:    .asciz  "ls"
Line 3181 ERROR: Invalid opcode
0000225C                          3181  mMOVE:  .asciz  "move"
Line 3182 ERROR: Invalid opcode
0000225C                          3182  mMOVEA: .asciz  "movea"
Line 3183 ERROR: Invalid opcode
0000225C                          3183  mMOVEC: .asciz  "movec"
Line 3184 ERROR: Invalid opcode
0000225C                          3184  mMOVEM: .asciz  "movem"
Line 3185 ERROR: Invalid opcode
0000225C                          3185  mMOVEP: .asciz  "movep"
Line 3186 ERROR: Invalid opcode
0000225C                          3186  mMOVEQ: .asciz  "moveq"
Line 3187 ERROR: Invalid opcode
0000225C                          3187  mMULS:  .asciz  "muls"
Line 3188 ERROR: Invalid opcode
0000225C                          3188  mMULU:  .asciz  "mulu"
Line 3189 ERROR: Invalid opcode
0000225C                          3189  mNBCD:  .asciz  "nbcd"
Line 3190 ERROR: Invalid opcode
0000225C                          3190  mNEG:   .asciz  "neg"
Line 3191 ERROR: Invalid opcode
0000225C                          3191  mNEGX:  .asciz  "negx"
Line 3192 ERROR: Invalid opcode
0000225C                          3192  mNOP:   .asciz  "nop"
Line 3193 ERROR: Invalid opcode
0000225C                          3193  mNOT:   .asciz  "not"
Line 3194 ERROR: Invalid opcode
0000225C                          3194  mOR:    .asciz  "or"
Line 3195 ERROR: Invalid opcode
0000225C                          3195  mORI:   .asciz  "ori"
Line 3196 ERROR: Invalid opcode
0000225C                          3196  mPEA:   .asciz  "pea"
Line 3197 ERROR: Invalid opcode
0000225C                          3197  mRESET: .asciz  "reset"
Line 3198 ERROR: Invalid opcode
0000225C                          3198  mRO:    .asciz  "ro"
Line 3199 ERROR: Invalid opcode
0000225C                          3199  mROX:   .asciz  "rox"
Line 3200 ERROR: Invalid opcode
0000225C                          3200  mRTE:   .asciz  "rte"
Line 3201 ERROR: Invalid opcode
0000225C                          3201  mRTR:   .asciz  "rtr"
Line 3202 ERROR: Invalid opcode
0000225C                          3202  mRTS:   .asciz  "rts"
Line 3203 ERROR: Invalid opcode
0000225C                          3203  mSBCD:  .asciz  "sbcd"
Line 3204 ERROR: Invalid opcode
0000225C                          3204  mSTOP:  .asciz  "stop"
Line 3205 ERROR: Invalid opcode
0000225C                          3205  mSUB:   .asciz  "sub"
Line 3206 ERROR: Invalid opcode
0000225C                          3206  mSUBA:  .asciz  "suba"
Line 3207 ERROR: Invalid opcode
0000225C                          3207  mSUBI:  .asciz  "subi"
Line 3208 ERROR: Invalid opcode
0000225C                          3208  mSUBQ:  .asciz  "subq"
Line 3209 ERROR: Invalid opcode
0000225C                          3209  mSUBX:  .asciz  "subx"
Line 3210 ERROR: Invalid opcode
0000225C                          3210  mSWAP:  .asciz  "swap"
Line 3211 ERROR: Invalid opcode
0000225C                          3211  mTAS:   .asciz  "tas"
Line 3212 ERROR: Invalid opcode
0000225C                          3212  mTRAP:  .asciz  "trap"
Line 3213 ERROR: Invalid opcode
0000225C                          3213  mTRAPV: .asciz  "trapv"
Line 3214 ERROR: Invalid opcode
0000225C                          3214  mTST:   .asciz  "tst"
Line 3215 ERROR: Invalid opcode
0000225C                          3215  mUNLK:  .asciz  "unlk"
Line 3216 ERROR: Invalid opcode
0000225C                          3216  mccr:   .asciz  "ccr"
Line 3217 ERROR: Invalid opcode
0000225C                          3217  msr:    .asciz  "sr"
Line 3218 ERROR: Invalid opcode
0000225C                          3218  musp:   .asciz  "usp"
0000225C                          3219  
0000225C  103C 0020               3220  spc:    move.b  #$20,d0         ;load a spc
00002260  6100 DF7E               3221          bsr     writ            ;write it
00002264  4E75                    3222          rts
00002266                          3223  
00002266  103C 002C               3224  comma:  move.b  #$2c,d0         ;load a comma
0000226A  6100 DF74               3225          bsr     writ            ;write it
0000226E  4E75                    3226          rts
00002270                          3227  
00002270  103C 0028               3228  lparen: move.b  #$28,d0         ;load a left parenthesis
00002274  6100 DF6A               3229          bsr     writ            ;write it
00002278  4E75                    3230          rts
0000227A                          3231  
0000227A  103C 0029               3232  rparen: move.b  #$29,d0         ;load a right parenthesis
0000227E  6100 DF60               3233          bsr     writ            ;write it
00002282  4E75                    3234          rts
00002284                          3235  
00002284  103C 0023               3236  pound:  move.b  #$23,d0         ;load a pound sign
00002288  6100 DF56               3237          bsr     writ            ;write it
0000228C  4E75                    3238          rts
0000228E                          3239  
0000228E  103C 002E               3240  dot:    move.b  #$2e,d0         ;load a period
00002292  6100 DF4C               3241          bsr     writ            ;write it
00002296  4E75                    3242          rts
00002298                          3243  
00002298  103C 002B               3244  plus:   move.b  #$2b,d0         ;load a plus
0000229C  6100 DF42               3245          bsr     writ            ;write it
000022A0  4E75                    3246          rts
000022A2                          3247  
000022A2  103C 002D               3248  minus:  move.b  #$2d,d0         ;load a minus
000022A6  6100 DF38               3249          bsr     writ            ;write it
000022AA  4E75                    3250          rts
000022AC                          3251  
000022AC  103C 0024               3252  dollar: move.b  #$24,d0         ;load a dollar sign
000022B0  6100 DF2E               3253          bsr     writ            ;write it
000022B4  4E75                    3254          rts
000022B6                          3255  
000022B6  0240 00C0               3256  findsiz:andi.w  #$00c0,d0       ;mask out the size bits
000022BA  6600 000C               3257          bne     wsize           ;if nonzero, it's not a byte
000022BE  11FC 0062 42DA          3258          move.b  #$62,siz        ;set size to byte
000022C4  6000 001A               3259          bra     findend
000022C8  0C40 0040               3260  wsize:  cmpi.w  #$0040,d0       ;is it a word operand?
000022CC  6600 000C               3261          bne     lsize           ;no.
000022D0  11FC 0077 42DA          3262          move.b  #$77,siz        ;set size to word
000022D6  6000 0008               3263          bra     findend
000022DA  11FC 006C 42DA          3264  lsize:  move.b  #$6c,siz        ;set size to longword
000022E0  1038 42DA               3265  findend:move.b  siz,d0
000022E4  6100 DEFA               3266          bsr     writ            ;write the size
000022E8  4E75                    3267          rts
000022EA                          3268  
000022EA  4840                    3269  wareg:  swap    d0              ;save the reg number in upper 16 bits
000022EC  103C 0061               3270          move.b  #$61,d0         ;load 'a'
000022F0  6100 DEEE               3271          bsr     writ            ;write it
000022F4  4840                    3272          swap    d0              ;restore the reg number
000022F6  0000 0030               3273          ori.b   #$30,d0         ;add offset to get digit
000022FA  6100 DEE4               3274          bsr     writ            ;write it
000022FE  4E75                    3275          rts
00002300                          3276  
00002300  4840                    3277  wdreg:  swap    d0              ;save the reg number in upper 16 bits
00002302  103C 0064               3278          move.b  #$64,d0         ;load 'a'
00002306  6100 DED8               3279          bsr     writ            ;write it
0000230A  4840                    3280          swap    d0              ;restore the reg number
0000230C  0000 0030               3281          ori.b   #$30,d0         ;add offset to get digit
00002310  6100 DECE               3282          bsr     writ            ;write it
00002314  4E75                    3283          rts
00002316                          3284  
Line 3285 ERROR: Invalid opcode
00002316                          3285  mPC:    .asciz  "pc"
Line 3286 ERROR: Invalid opcode
00002316                          3286  mIAM:   .asciz  "ILLEGAL ADDRESS MODE"
00002316  11C0 42DC               3287  writea: move.b  d0,writm        ;save the important part of the opcode
0000231A  0200 0038               3288          andi.b  #$38,d0         ;mask off all but the mode bits
0000231E  6600 0010               3289          bne     mode1           ;if zero, it's data reg direct
00002322  1038 42DC               3290          move.b  writm,d0
00002326  0200 0007               3291          andi.b  #$07,d0         ;mask the reg number
0000232A  61D4                    3292          bsr     wdreg           ;write the data reg
0000232C  6000 01E6               3293          bra     eaout
00002330  0C00 0008               3294  mode1:  cmpi.b  #$08,d0         ;is it address reg direct?
00002334  6600 0010               3295          bne     mode2           ;no
00002338  1038 42DC               3296          move.b  writm,d0        ;yes
0000233C  0200 0007               3297          andi.b  #$07,d0         ;mask reg number
00002340  61A8                    3298          bsr     wareg           ;write address reg
00002342  6000 01D0               3299          bra     eaout
00002346  0C00 0010               3300  mode2:  cmpi.b  #$10,d0         ;is it address reg indirect?
0000234A  6600 0018               3301          bne     mode3           ;no
0000234E  6100 FF20               3302          bsr     lparen          ;yes
00002352  1038 42DC               3303          move.b  writm,d0
00002356  0200 0007               3304          andi.b  #$07,d0         ;mask reg number
0000235A  618E                    3305          bsr     wareg           ;write address reg
0000235C  6100 FF1C               3306          bsr     rparen
00002360  6000 01B2               3307          bra     eaout
00002364  0C00 0018               3308  mode3:  cmpi.b  #$18,d0         ;is it postincrement?
00002368  6600 001E               3309          bne     mode4           ;no
0000236C  6100 FF02               3310          bsr     lparen          ;yes
00002370  1038 42DC               3311          move.b  writm,d0
00002374  0200 0007               3312          andi.b  #$07,d0         ;mask reg number
00002378  6100 FF70               3313          bsr     wareg           ;write address reg
0000237C  6100 FEFC               3314          bsr     rparen
00002380  6100 FF16               3315          bsr     plus
00002384  6000 018E               3316          bra     eaout
00002388  0C00 0020               3317  mode4:  cmpi.b  #$20,d0         ;is it predecrement?
0000238C  6600 001E               3318          bne     mode5           ;no
00002390  6100 FF10               3319          bsr     minus           ;yes
00002394  6100 FEDA               3320          bsr     lparen
00002398  1038 42DC               3321          move.b  writm,d0
0000239C  0200 0007               3322          andi.b  #$07,d0         ;mask reg number
000023A0  6100 FF48               3323          bsr     wareg           ;write address reg
000023A4  6100 FED4               3324          bsr     rparen
000023A8  6000 016A               3325          bra     eaout
000023AC  0C00 0028               3326  mode5:  cmpi.b  #$28,d0         ;is it reg indirect w/ displacement?
000023B0  6600 0024               3327          bne     mode6           ;no
000023B4  6100 FEF6               3328          bsr     dollar
000023B8  3019                    3329          move.w  (a1)+,d0        ;yes, so load 16 bit displacement
000023BA  6100 DE72               3330          bsr     writw           ;write it
000023BE  6100 FEB0               3331          bsr     lparen
000023C2  1038 42DC               3332          move.b  writm,d0
000023C6  0200 0007               3333          andi.b  #$07,d0         ;mask reg number
000023CA  6100 FF1E               3334          bsr     wareg           ;write address reg
000023CE  6100 FEAA               3335          bsr     rparen
000023D2  6000 0140               3336          bra     eaout
000023D6  0C00 0030               3337  mode6:  cmpi.b  #$30,d0         ;is it reg indirect w/ index?
000023DA  6600 006C               3338          bne     mode7           ;no
000023DE  6100 FECC               3339          bsr     dollar
000023E2  3011                    3340          move.w  (a1),d0         ;load the index word
000023E4  6100 DE3E               3341          bsr     writb           ;write the 8 bit displacement
000023E8  6100 FE86               3342          bsr     lparen
000023EC  1038 42DC               3343          move.b  writm,d0
000023F0  0200 0007               3344          andi.b  #$07,d0         ;mask reg number
000023F4  6100 FEF4               3345          bsr     wareg           ;write address reg
000023F8  6100 FE6C               3346          bsr     comma
000023FC  3011                    3347  m6ad:   move.w  (a1),d0         ;load index word again
000023FE  6A00 0010               3348          bpl     m6d             ;if MSB of index word is 0, data reg
00002402  E958                    3349          rol.w   #$04,d0         ;rotate reg number into rightmost bits
00002404  0240 0007               3350          andi.w  #$0007,d0       ;mask reg number
00002408  6100 FEE0               3351          bsr     wareg           ;write address reg
0000240C  6000 000C               3352          bra     m6no
00002410  E958                    3353  m6d:    rol.w   #$04,d0         ;rotate reg number into rightmost bits
00002412  0240 0007               3354          andi.w  #$0007,d0       ;mask reg number
00002416  6100 FEE8               3355          bsr     wdreg           ;write data reg
0000241A  6100 FE72               3356  m6no:   bsr     dot
0000241E  3019                    3357          move.w  (a1)+,d0        ;load the index reg a final time
00002420  0240 0800               3358          andi.w  #$0800,d0       ;mask the length bit
00002424  6600 0012               3359          bne     m6l             ;if nonzero, long reg index
00002428  103C 0077               3360          move.b  #$77,d0         ;load 'w'
0000242C  6100 DDB2               3361          bsr     writ            ;write it
00002430  6100 FE48               3362          bsr     rparen
00002434  6000 00DE               3363          bra     eaout
00002438  103C 006C               3364  m6l:    move.b  #$6c,d0         ;load 'l'
0000243C  6100 DDA2               3365          bsr     writ            ;write it
00002440  6100 FE38               3366          bsr     rparen
00002444  6000 00CE               3367          bra     eaout
00002448  1038 42DC               3368  mode7:  move.b  writm,d0        ;mode seven, so decode reg number
0000244C  0240 0007               3369          andi.w  #$07,d0         ;mask reg number
00002450  6600 0010               3370          bne     m71             ;if zero, absolute.w
00002454  6100 FE56               3371          bsr     dollar
00002458  3019                    3372          move.w  (a1)+,d0        ;move the address into d0
0000245A  6100 DDD2               3373          bsr     writw           ;write it
0000245E  6000 00B4               3374          bra     eaout
00002462  0C00 0001               3375  m71:    cmpi.b  #$01,d0         ;is it absolute.l?
00002466  6600 0010               3376          bne     m72             ;no
0000246A  6100 FE40               3377          bsr     dollar
0000246E  2019                    3378          move.l  (a1)+,d0        ;yes, so move the address into d0
00002470  6100 DDC6               3379          bsr     writl           ;write it
00002474  6000 009E               3380          bra     eaout
00002478  0C00 0002               3381  m72:    cmpi.b  #$02,d0         ;is it relative w/ displacement?
0000247C  6600 0022               3382          bne     m73             ;no
00002480  6100 FE2A               3383          bsr     dollar
00002484  3019                    3384          move.w  (a1)+,d0        ;yes, so load displacement into d0
00002486  6100 DDA6               3385          bsr     writw           ;write it
0000248A  6100 FDE4               3386          bsr     lparen
Line 3387 ERROR: Undefined symbol
0000248E  41F9 004DBD16           3387          lea     mPC,a0          ;load "PC"
00002494  6100 DD82               3388          bsr     writs           ;write it
00002498  6100 FDE0               3389          bsr     rparen
0000249C  6000 0076               3390          bra     eaout
000024A0  0C00 0003               3391  m73:    cmpi.b  #$03,d0         ;is it relative w/ index?
000024A4  6600 0022               3392          bne     m74             ;no
000024A8  6100 FE02               3393          bsr     dollar
000024AC  3011                    3394          move.w  (a1),d0         ;load the index word
000024AE  6100 DD74               3395          bsr     writb           ;write the 8 bit displacement
000024B2  6100 FDBC               3396          bsr     lparen
Line 3397 ERROR: Undefined symbol
000024B6  41F9 004DBD16           3397          lea     mPC,a0          ;load "PC"
000024BC  6100 DD5A               3398          bsr     writs           ;write it
000024C0  6100 FDA4               3399          bsr     comma
000024C4  6000 FF36               3400          bra     m6ad            ;go to reg. indir. routine to finish
000024C8  0C00 0004               3401  m74:    cmpi.b  #$04,d0         ;is it immediate?
000024CC  6600 003C               3402          bne     m75             ;no
000024D0  6100 FDB2               3403          bsr     pound
000024D4  6100 FDD6               3404          bsr     dollar
000024D8  1038 42DA               3405          move.b  siz,d0          ;load the size byte
000024DC  0C00 0062               3406          cmpi.b  #$62,d0         ;is it byte data?
000024E0  6600 000C               3407          bne     m74w            ;no
000024E4  3019                    3408          move.w  (a1)+,d0        ;yes, so load immediate data
000024E6  6100 DD3C               3409          bsr     writb           ;write byte data
000024EA  6000 0028               3410          bra     eaout
000024EE  0C00 0077               3411  m74w:   cmpi.b  #$77,d0         ;is it word data?
000024F2  6600 000C               3412          bne     m74l            ;no
000024F6  3019                    3413          move.w  (a1)+,d0        ;yes, so load immediate data
000024F8  6100 DD34               3414          bsr     writw           ;write word data
000024FC  6000 0016               3415          bra     eaout
00002500  2019                    3416  m74l:   move.l  (a1)+,d0        ;load long immediate data
00002502  6100 DD34               3417          bsr     writl           ;write long data
00002506  6000 000C               3418          bra     eaout
Line 3419 ERROR: Undefined symbol
0000250A  41F9 004DBD16           3419  m75:    lea     mIAM,a0         ;load illegal mode message
00002510  6100 DD06               3420          bsr     writs           ;write it
00002514  4E75                    3421  eaout:  rts
00002516                          3422  
00002516  4840                    3423  wdis:   swap    d0              ;save opcode in upper 16 so we can
00002518  6100 FD92               3424          bsr     dollar          ;hexidecimalize the displacement
0000251C  4840                    3425          swap    d0              ;get it back in lower 16
0000251E  2209                    3426          move.l  a1,d1           ;copy current address to d1
00002520  4A00                    3427          tst.b   d0              ;is displacement zero?
00002522  6700 0018               3428          beq     wdisw           ;if so, word displacement
00002526  0280 000000FF           3429          andi.l  #$00ff,d0       ;mask off the displacement
0000252C  4880                    3430          ext.w   d0              ;sign extend the displacement
0000252E  48C0                    3431          ext.l   d0              ;to word size
00002530  D280                    3432          add.l   d0,d1           ;add 8-bit displacement to address
00002532  2001                    3433          move.l  d1,d0           ;copy into d0
00002534  6100 DD02               3434          bsr     writl           ;write address
00002538  6000 000E               3435          bra     wdiso
0000253C  3019                    3436  wdisw:  move.w  (a1)+,d0        ;load the displacement word
0000253E  48C0                    3437          ext.l   d0              ;sign extend it
00002540  D280                    3438          add.l   d0,d1           ;add displacement
00002542  2001                    3439          move.l  d1,d0           ;copy to d0
00002544  6100 DCF2               3440          bsr     writl
00002548  4E75                    3441  wdiso:  rts
Line 3442 WARNING: END directive missing, starting address not set

563 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABHLR               E08
ABMES               E06
ABPR                E22
ACOM                107A
ADDI                1238
ADDQ                1BFE
AEND                42D8
AEXAM               1048
ALP                 24C
AMES                1012
AND                 2144
ANDENT              1DAA
ANDI                1252
ANDISR              112A
AR0                 4176
AR1                 417A
AR2                 417E
AR3                 4182
AR4                 4186
AR5                 418A
AR6                 418E
AR7                 4192
ASS1                1088
ASS20               103A
ASSEM               101A
ASSXY               106A
AX                  1E04
AXA                 1E58
BAD                 4CC
BBAD                AA2
BBMES               935
BCC                 1C82
BCCW                1C90
BCHG                13F8
BCLR                140E
BDIS                9A8
BDLP                9B6
BDMES               92C
BELP                9C8
BFND                A0C
BHL                 D14
BHLR                CCA
BHMES               CC4
BHRTE               D36
BININ               CC6
BITOP               13D2
BITOP2              142E
BITOPR              1458
BKIN                938
BKPT                93A
BKTAB               413C
BL2                 9DE
BL3                 A46
BLP                 442
BLP1                964
BMIN                A38
BMMES               933
BMO                 9F2
BNO                 97E
BOK                 A90
BPLS                9D0
BPMES               931
BREM                95E
BRMES               92A
BRNO                99C
BRTS                AAA
BSET                1424
BSND                CF6
BSR                 1C6C
C1                  2F6
CDMES               4D8
CF                  414
CHK                 1A32
CLP                 4B6
CLR                 17B8
CMP                 1F9A
CMPAL               1F70
CMPAOP              1F7C
CMPI                1268
CMPM                1FD6
CODE                2
COLP                506
COM                 0
COMM                4A0
COMMA               2266
CONT                308
COPY                4DC
COUNT               4
CRLF                418
CTAB                460
CTRLQ               2E4
CTRLS               41AA
CWRIT               1F0
DCOM                AF2
DCR                 AB4
DEXAM               AD6
DFLP                B22
DGO                 AF8
DHED                AB2
DISEND              10AE
DIVPRT              1D86
DIVS                1D56
DIVU                1D7C
DL1                 B1A
DMES                AAC
DOK                 B4E
DOLLAR              22AC
DONE                1BA
DOT                 228E
DR0                 4156
DR1                 415A
DR2                 415E
DR3                 4162
DR4                 4166
DR5                 416A
DR6                 416E
DR7                 4172
DSLP                B3C
DUMP                AB8
DWRT                B5A
DWRTS               222
EAOUT               2514
ECHO                42DE
ELMES               762
EMMES               8A2
EMU1                8BA
EMUDN               8C0
EMUL                8AA
ENMES               8A4
EOR                 2032
EORI                127E
EORICR              1160
EORISR              1196
EXAM                419E
EXG                 20B0
EXGAA               20F8
EXGDA               211E
EXT                 1A76
EXT1                1AB0
FINDCON             1BE2
FINDEND             22E0
FINDSIZ             22B6
FSHF                2176
GB                  43C
GBMOV               C88
GETB                422
GETCH               3DC
GETL                436
GETW                42C
GGET                C58
GGO                 C64
GHLR                C9C
GHMES               C98
GHPR                CB2
GHPR1               CB6
GMES                C46
GNOM                C78
GO                  C4C
GR0                 10F4
GR1                 1472
GR2                 147C
GR3                 1486
GR4                 150A
GR5                 1B78
GR6                 1C54
GR7                 1C9E
GR8                 1CD8
GR9                 1DFA
GRA                 1F36
GRB                 1F3A
GRC                 2064
GRD                 214E
GRE                 215C
GRF                 2258
GRTAB               10B4
GTEA0               17AA
GTEA1               186C
GWAN                13A
HALL                FC6
HEAD                0
HELP                FB6
HOWDY               C0
HPRN                FF6
HTAB                F62
HTOPIC              FE2
IBUFF               41C2
ILLEG               1B6A
ILOC                2
IMMSH               2226
INCMP               2CA
ININT               278
INLD                2A2
INSTR               0
INWRU               2C0
IOPS                12BC
IOPSC               131A
IOPSL               1314
IOPSW               1300
JMP                 15B8
JSR                 15F4
LAGN                388
LBLP                7DE
LBUFF               41AC
LCONT               36A
LD1                 78A
LDONE               7EE
LEA                 19DA
LEXT                1AA8
LGCH                388
LHLP                FE8
LINK                18B2
LL2                 834
LLP                 7B4
LMES                75E
LNOOF               782
LOAD                766
LOPS                12D6
LOUT                386
LPAREN              2270
LPD                 A002
LPINT               336
LPLEA               35A
LPST                A000
LR                  21B6
LREG                80C
LS                  218C
LSH                 21CC
LSIZE               22DA
LWAIT               3BC
M1                  26A
M6AD                23FC
M6D                 2410
M6L                 2438
M6NO                241A
M71                 2462
M72                 2478
M73                 24A0
M74                 24C8
M74L                2500
M74W                24EE
M75                 250A
MCOM                5DA
MDOT                5B4
MEM                 566
MEMERR              128
MEQU                5C6
MEXIT               5B2
MINUS               22A2
MLOC                5F6
MLP                 58C
MMES                55E
MMIN                5EC
MMLP                59E
MNOAD               57E
MODE1               2330
MODE2               2346
MODE3               2364
MODE4               2388
MODE5               23AC
MODE6               23D6
MODE7               2448
MOVE                148C
MOVEA               14CE
MOVEC               1AC2
MOVEM               1AE0
MOVEML              1B1A
MOVEMO              1B2A
MOVEMR              1B4C
MOVEP               1328
MOVEPL              135A
MOVEPR              13A0
MOVEPS              1362
MOVESP              18FC
MOVETS              193E
MOVFC               1668
MOVFS               16E0
MOVTC               162C
MOVTS               16A4
MPLP                580
MPLU                5E2
MPRMP               561
MT1                 FE
MT2                 118
MTAB                546
MULS                207C
MULU                20A2
N1                  450
NBCD                171C
NEG                 17E0
NEGX                1804
NOP                 150C
NOT                 1828
OR                  1DA4
OR3                 266
ORDREG              1DE0
ORI                 1294
ORICCR              11CC
ORISR               1202
OUT                 334
PEA                 1740
PHLR                DE8
PLUS                2298
PMESS               8CA
POUND               2284
PRMES               DE6
PRMP                CE
PROTO               8D2
PRPR                DFE
PRTS                928
PRUN                912
PTAB                4196
Q8                  1C42
QUEUE               6
QWRIT               1C18
RADDR               700
RADLP               708
RALL                6EA
RALP                6F0
RDOT                6A8
REGS                650
REGSH               21F0
REQU                6BA
REQUR               6E4
REQUS               6DC
RESET               1522
REXAM               419C
REXIT               6A6
RLOC                718
RLP                 680
RMES                648
RMLP                692
RNN0                C2
RNOAD               66C
RO                  21B0
ROX                 219E
RPAREN              227A
RPLP                674
RPRMP               64B
RPSR                754
RRTS                75C
RSTRT               3C2
RTAB                618
RTAB1               624
RTE                 1538
RTR                 154E
RTS                 1564
SAREA               403C
SBCDRG              1D34
SCC                 1BC6
SCLR                C02
SDONE               C44
SH17                2242
SHLP                FD4
SHTYP               21D0
SINGL               BDA
SIZ                 42DA
SLMES               760
SLP                 180
SLP1                196
SLP2                1B0
SMES                BD6
SON                 C18
SPC                 225C
SSRI                CA
SSRN                CC
START               D2
STOP                157A
SUB                 1E40
SUBAL               1E34
SUBEA1              1E8E
SUBEA2              1EA8
SUBI                12AA
SUBQ                1C12
SUBX                1EC2
SUBXDR              1F18
SWAP                198C
T1                  41A0
T2                  41A2
T3                  41A4
T4                  41A6
T5                  41A8
TAIL                2
TAS                 1778
TASOK               17A0
TCLR                BA2
TCRLF               E8A
TDONE               BD0
TEXIT               E2A
TGETB               E48
TGETC               E78
TGETL               E5C
TGETW               E52
THLR                D3C
THMA0               D80
TLOCM               D38
TMES                B78
TON                 BB4
TR                  DE4
TRACE               B7A
TRAP                195A
TRAPV               15A2
TREAL               D88
TRPR                DB0
TRTE                DCC
TRYAG               3DC
TST                 184C
TTYD                C002
TTYST               C000
TWRTB               E66
TWRTC               E84
TWRTL               E72
TWRTS               E7E
TWRTW               E6C
UAV3                4028
UAV4                402C
UAV5                4030
UAV6                4034
UAV7                4038
ULD1                86E
ULNOOF              866
ULOAD               84A
UNLK                19B6
USERS               41D8
USERV1              4014
USERV2              4018
USERV3              401C
USERV4              4020
USERV5              4024
UTRAPB              4000
UTRAPC              4004
UTRAPD              4008
UTRAPE              400C
UTRAPF              4010
UTRPB               AC
UTRPC               B0
UTRPD               B4
UTRPE               B8
UTRPF               BC
VECT1               CA
VECT2               CA
VECT3               CA
VECT4               CA
VECT5               CA
WAIT                40E
WAREG               22EA
WDIS                2516
WDISO               2548
WDISW               253C
WDREG               2300
WR                  23E
WRIT                1E0
WRITA               1F6
WRITB               224
WRITEA              2316
WRITL               238
WRITM               42DC
WRITP               20A
WRITS               218
WRITU               204
WRITW               22E
WSIZE               22C8
XBCD                1CEC
_PC                 4152
_SR                 4150
