00008000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 07/11/2021 21:20:20

00000000  =00F00009                  1  ACIAC    EQU $F00009
00000000  =00F0000B                  2  ACIAD    EQU ACIAC+2
00000000                             3  
00000000  =00F40041                  4  DATA_TX EQU $F40041
00000000  =00F40043                  5  DATA_RX EQU $F40043
00000000  =00F40045                  6  DATA_CTL EQU $F40045
00000000  =00F40046                  7  DATA_TX_SPACE EQU $F40046
00000000  =00F40048                  8  DATA_RX_COUNT EQU $F40048
00000000                             9  
00000000                            10  * TCP0_TxValid    => eth_ctl(6), --Transmit data valid
00000000                            11  *        TCP0_TxReady    => eth_ctl(3), --Transmit data ready
00000000                            12  *        TCP0_RxValid    => eth_ctl(2), --Receive data valid
00000000                            13  *        TCP0_RxReady    => eth_ctl(5)  --Receive data ready
00000000                            14  
00000000  =00000006                 15  TXVL EQU 6
00000000  =00000003                 16  TXRDY EQU 3
00000000  =00000002                 17  RXVLD EQU 2
00000000  =00000005                 18  RXRDY EQU 5
00000000                            19  
00000000  =00002000                 20  INT_ON   EQU  $2000    ; BOTH, SET SUPERVISOR MODE, S=1
00000000  =00002700                 21  INT_OFF  EQU  $2700
00000000                            22  
00000000  =00000000                 23  RDRF    EQU 0           ; ACIAC Receive Data Register Full
00000000  =00000001                 24  TDRE    EQU 1           ; ACIAC Transmit Data Register Empty
00000000                            25  
00000000  =00000005                 26  SUPERVISOR_BIT EQU 5
00000000                            27  
00000000  =00000007                 28  TRACE_BIT EQU 7
00000000                            29  
00000000  =0000000D                 30  CR      EQU 13
00000000  =0000000A                 31  LF      EQU 10
00000000  =00000020                 32  SP      EQU 32
00000000  =00000008                 33  BS      EQU 8
00000000  =0000001E                 34  RS      EQU $1E
00000000  =0000001B                 35  ESC     EQU $1B
00000000                            36  
00000000                            37  
00000000                            38  *-- sdControl f4000a
00000000                            39  *-- 0 - din valid (a)
00000000                            40  *-- 1 - dout ack (a)
00000000                            41  * 2 - rden
00000000                            42  * 3 - wren
00000000                            43  *-- sdstatus f40009
00000000                            44  *-- 0 error
00000000                            45  *-- 1,2,3 - Error code
00000000                            46  *-- 4 - dout valid
00000000                            47  *-- 5 - Busy
00000000                            48  *-- 6,7 - card TYPE
00000000                            49  
00000000                            50  *-- sd_type:
00000000                            51  *-- 00 No card
00000000                            52  *-- 01 SD V1
00000000                            53  *-- 10 SD V2
00000000                            54  *-- 11 SDHC
00000000                            55  
00000000                            56  
00000000  =00F40022                 57  SDADDRESS EQU $F40022  ;LONG (32BIT)
00000000  =00F40024                 58  SDADDRESS2 EQU $F40024
00000000  =00F40027                 59  SDDATA    EQU $F40027  
00000000  =00F40021                 60  SDCONTROL EQU $F40021
00000000  =00F40020                 61  SDSTATUS  EQU $F40020
00000000  =009E0000                 62  SDRAM     EQU $9E0000
00000000                            63  
00000000  =000001FE                 64  VOLOFFSET EQU $01FE
00000000  =000001C6                 65  PRTOFFSET EQU $01C6
00000000  =000055AA                 66  VOLIND    EQU $55AA
00000000                            67  
00008000                            68      ORG $8000
00008000                            69    
00008000                            70  
00008000                            71  **************************************************
00008000                            72  
00008000                            73  MAIN 
00008000                            74  
00008000                            75      ;MOVE.W #INT_OFF,SR 
00008000                            76      ;BSR INIT_ACIA
00008000                            77     
00008000  47F9 000083A5             78      LEA.L TITLE1.L,A3     ; print START MESSAGE
00008006  6100 0326                 79      BSR PSTR
0000800A                            80  
0000800A                            81      ;CHECK SD CARD
0000800A  6100 01E0                 82      BSR CHECK_DRIVE
0000800E                            83      
0000800E                            84      ; READ SD CARD 1ST 512 BYTES
0000800E  6100 0244                 85      BSR READ_DRV
00008012                            86      
00008012                            87      ; CHECK FOR FAT32 VOLUME
00008012  6100 01A4                 88      BSR CHECK_VOL
00008016                            89      
00008016                            90      ;get first clusters
00008016  6100 0172                 91      BSR GETFAT1
0000801A                            92      
0000801A                            93      ;load root dir
0000801A  6100 011C                 94      BSR GETROOTDIR 
0000801E                            95      
0000801E  4EB8 1146                 96          jsr $1146
00008022                            97  
00008022  43F9 00008451             98      LEA.L ROMFILE.L, A1
00008028  6100 00CC                 99      BSR FINDFILE    ; FIND THE FILE
0000802C                           100       
0000802C  6100 001C                101      BSR LOADFILE    ; LOAD THE FILE FIRST CLUSTER
00008030                           102  
00008030  21FC 009F0000 0000       103      MOVE.L #$9F0000,0
00008038  21FC 00002000 0004       104      MOVE.L #$2000,4
00008040                           105  
00008040  2E7C 009F0000            106      MOVE.L #$9F0000,SP
00008046                           107          
00008046                           108  
00008046  4EF8 1146                109      JMP $1146
0000804A                           110  
0000804A                           111  **************************************************     
0000804A                           112  *data buffer
0000804A                           113  *9e0000 -> 9e01ff
0000804A                           114  *
0000804A                           115  *fat buffer
0000804A                           116  *9e0200 -> 9e03ff 
0000804A                           117  *
0000804A                           118  *root dir buffer
0000804A                           119  *9e0400 -> 9e05ff
0000804A                           120  *
0000804A                           121  *found file details 9e0800
0000804A                           122  **************************************************
0000804A                           123  
0000804A  41F9 009E0800            124  LOADFILE    LEA.L $9E0800,A0
00008050                           125  
00008050  4280                     126              CLR.L D0
00008052  4281                     127              CLR.L D1
00008054  4282                     128              CLR.L D2
00008056                           129              
00008056  2239 009E081C            130              MOVE.L $9E081C,D1
0000805C  E159                     131              ROL.W #8,D1
0000805E  4841                     132              SWAP     D1
00008060  E159                     133              ROL.W #8,D1       ;GET LITTLE ENDIAN FILE SIZE
00008062                           134              
00008062  2001                     135              MOVE.L D1,D0
00008064  4EB9 000082DA            136              JSR OUT8X
0000806A                           137              
0000806A  82FC 0200                138              DIVU #$200,D1    ; GET NUM SECTORS
0000806E  5281                     139              ADD.L #$1,D1   + 1 (ROUND UP)
00008070                           140              
00008070  3839 009E081A            141              MOVE.w $9E081A,D4 ; LOW BYTES
00008076                           142              
00008076  2004                     143              MOVE.L D4,D0
00008078  4EB9 000082DA            144              JSR OUT8X
0000807E                           145              
0000807E  E15C                     146              ROL.W #8,D4       ;GET LITTLE ENDIAN START CLUSTER  
00008080                           147              
00008080  2004                     148              MOVE.L D4,D0
00008082  4EB9 000082DA            149              JSR OUT8X
00008088                           150             
00008088  5584                     151              SUB.L #$2,D4
0000808A  C8FC 0040                152              MULU  #$40,D4
0000808E  0684 00002788            153              ADDi.L   #$2788,D4 ; START ADDRESS
00008094                           154              
00008094  2004                     155              MOVE.L D4,D0
00008096  4EB9 000082DA            156              JSR OUT8X
0000809C                           157              
0000809C  49F9 00F40024            158              LEA.L SDADDRESS2,A4
000080A2  3884                     159              MOVE.W d4,(a4)
000080A4  49F9 00F40022            160              LEA.L SDADDRESS,A4
000080AA  4844                     161              SWAP D4
000080AC  3884                     162              MOVE.W d4,(a4)
000080AE  4844                     163              SWAP D4
000080B0                           164              
000080B0  2004                     165              MOVE.L D4,D0
000080B2  4EB9 000082DA            166              JSR OUT8X
000080B8                           167              
000080B8  47F8 4000                168              LEA.L $4000,A3              
000080BC  6000 0032                169              BRA ENDREAD
000080C0                           170              
000080C0                           171    
000080C0  6100 0192                172  READF       BSR READ_DRV
000080C4  41F9 009E0000            173              LEA.L $9E0000,A0
000080CA                           174              
000080CA                           175              for d5 = #1 to #512 do.s
000080CA  3A3C 0001                176s     MOVE.W  #1,D5
000080CE  6004                     177s     BRA.S   _20000001
000080D0                           178s _20000000
000080D0  16D8                     179              MOVE.B (A0)+,(A3)+
000080D2                           180              endf
000080D2  5245                     181s     ADD.W   #1,D5
000080D4                           182s _20000001
000080D4  BA7C 0200                183s     CMP.W   #512,D5
000080D8  6FF6                     184s     BLE.S   _20000000
000080DA                           185   
000080DA  5244                     186              addi #1,D4
000080DC  49F9 00F40024            187              LEA.L SDADDRESS2,A4
000080E2  3884                     188              MOVE.W d4,(a4)
000080E4  49F9 00F40022            189              LEA.L SDADDRESS,A4
000080EA  4844                     190              SWAP D4
000080EC  3884                     191              MOVE.W d4,(a4)
000080EE  4844                     192              SWAP D4
000080F0                           193              
000080F0                           194              
000080F0  51C9 FFCE                195  ENDREAD     DBRA D1,READF
000080F4                           196              
000080F4  4E75                     197              RTS
000080F6                           198              
000080F6                           199  **************************************************            
000080F6                           200  
000080F6  41F9 009E0400            201  FINDFILE    lea.l $9e0400,A0
000080FC                           202              
000080FC  4EB9 0000835C            203  FILELOOP    jsr STRCMP
00008102  B03C 0000                204              CMP.B #0, D0
00008106  6600 000E                205              BNE ENDFILE
0000810A  2008                     206              MOVE.L A0,D0
0000810C  0680 00000010            207              ADDI.L #$10,D0
00008112  2040                     208              MOVEA.L D0,A0
00008114                           209             
00008114  60E6                     210              BRA FILELOOP
00008116                           211  
00008116  47F9 0000845D            212  ENDFILE     LEA.L ROMFND.L,A3
0000811C  6100 0210                213              BSR PSTR
00008120                           214              
00008120  2008                     215              MOVE.L A0,D0
00008122  43F9 009E0800            216              LEA.L $9e0800,A1
00008128  7008                     217              MOVE.L #$8,D0
0000812A  4EB9 00008396            218              JSR MOVE_l
00008130                           219                   
00008130  4280                     220              CLR.L D0
00008132  08C0 0000                221              BSET.l #0, D0
00008136  4E75                     222              RTS
00008138                           223  
00008138                           224  **************************************************  
00008138                           225  * GET ROOT DIR
00008138                           226  *            
00008138                           227  GETROOTDIR     
00008138  33FC 0000 00F40022       228              MOVE.W #$0000,SDADDRESS
00008140  33FC 2788 00F40024       229              MOVE.W #$2788,SDADDRESS2
00008148                           230              
00008148  6100 010A                231              BSR READ_DRV
0000814C                           232              
0000814C  41F9 009E0000            233              lea.l $9e0000,A0
00008152  43F9 009E0400            234              lea.l $9e0400,A1
00008158  203C 00000080            235              move.l #$80,d0
0000815E  4EB9 00008396            236              jsr MOVE_l
00008164                           237              
00008164  33FC 2789 00F40024       238              MOVE.W #$2789,SDADDRESS2
0000816C  6100 00E6                239              BSR READ_DRV
00008170                           240              
00008170  41F9 009E0000            241              lea.l $9e0000,A0
00008176  43F9 009E0600            242              lea.l $9e0600,A1
0000817C  203C 00000080            243              move.l #$80,d0
00008182  4EB9 00008396            244              jsr MOVE_l
00008188                           245                   
00008188  4E75                     246              RTS
0000818A                           247              
0000818A                           248  
0000818A                           249  **************************************************  
0000818A                           250  * GET FIRST FAT
0000818A                           251  *            
0000818A                           252  GETFAT1     
0000818A  33FC 0000 00F40022       253              MOVE.W #$0000,SDADDRESS
00008192  33FC 2020 00F40024       254              MOVE.W #$2020,SDADDRESS2
0000819A                           255              
0000819A  6100 00B8                256              BSR READ_DRV
0000819E                           257              
0000819E  41F9 009E0000            258              lea.l $9e0000,A0
000081A4  43F9 009E0200            259              lea.l $9e0200,A1
000081AA  203C 00000080            260              move.l #$80,d0
000081B0  4EB9 00008396            261              jsr MOVE_l
000081B6                           262                   
000081B6  4E75                     263              RTS
000081B8                           264              
000081B8                           265  **************************************************  
000081B8                           266  
000081B8  48A7 FFFE                267  CHECK_VOL   MOVEM D0-D7/A0-A6,-(SP) ;Push D0-D7/A0-A6 onto the stack
000081BC                           268  
000081BC  41F9 009E0000            269              LEA.L SDRAM.L,A0
000081C2                           270              
000081C2  3028 01FE                271              MOVE.W VOLOFFSET(A0),D0
000081C6  6100 010E                272              BSR OUT4X
000081CA                           273              
000081CA  B07C 55AA                274              CMP.W #VOLIND,D0
000081CE  670C                     275              BEQ.S VOLOK
000081D0                           276              
000081D0  47F9 0000843D            277              LEA.L VOLERR.L,A3
000081D6  6100 0156                278              BSR PSTR
000081DA  600A                     279              BRA.S ENDVOL
000081DC                           280  
000081DC  47F9 00008426            281  VOLOK       LEA.L VOLSTR.L,A3
000081E2  6100 014A                282              BSR PSTR
000081E6                           283  
000081E6  4C9F 7FFF                284  ENDVOL      MOVEM (SP)+,D0-D7/A0-A6 ; Restore D0-D7/A0-A6 from the stack         
000081EA                           285              
000081EA  4E75                     286              RTS
000081EC                           287      
000081EC                           288  
000081EC                           289  **************************************************            
000081EC                           290  CHECK_DRIVE 
000081EC                           291  
000081EC  48A7 FFFE                292              MOVEM D0-D7/A0-A6,-(SP) ;Push D0-D7/A0-A6 onto the stack
000081F0                           293              
000081F0  49F9 00F40020            294              LEA.L SDSTATUS.L,A4
000081F6                           295              
000081F6  3214                     296              MOVE.W (A4), D1
000081F8  E049                     297              LSR.W #8, D1  ; GET BYTES 7,6 
000081FA  EC49                     298              LSR.W #6, D1  ; GET BYTES 7,6 
000081FC                           299  
000081FC  B23C 0000                300              CMP.B #$00,D1
00008200  6700 001A                301              BEQ NO_CARD
00008204                           302              
00008204  B23C 0001                303              CMP.B #$01,D1
00008208  6700 001E                304              BEQ CARD_V1
0000820C                           305              
0000820C  B23C 0002                306              CMP.B #$02,D1
00008210  6700 0024                307              BEQ CARD_V2
00008214                           308  
00008214  B23C 0003                309              CMP.B #$03,D1
00008218  6700 002A                310              BEQ CARD_HC   
0000821C                           311              
0000821C                           312  
0000821C                           313  NO_CARD     
0000821C  47F9 000083E1            314              LEA.L NOCARD.L,A3     ; print START MESSAGE
00008222  6100 010A                315              BSR PSTR 
00008226                           316              ;JMP $A00BB4 ;EXIT BACK TO MON
00008226  60C4                     317              BRA CHECK_DRIVE ; keep checking
00008228                           318  CARD_V1
00008228  47F9 000083ED            319              LEA.L CARDV1.L,A3     ; print START MESSAGE
0000822E  6100 00FE                320              BSR PSTR 
00008232  6000 001E                321              BRA RETURN
00008236                           322  CARD_V2
00008236  47F9 000083F9            323              LEA.L CARDV2.L,A3     ; print START MESSAGE
0000823C  6100 00F0                324              BSR PSTR 
00008240  6000 0010                325              BRA RETURN
00008244                           326  
00008244  47F9 00008405            327  CARD_HC     LEA.L CARDHC.L,A3     ; print START MESSAGE
0000824A  6100 00E2                328              BSR PSTR 
0000824E                           329  
0000824E                           330              
0000824E  4C9F 7FFF                331              MOVEM (SP)+,D0-D7/A0-A6 ; Restore D0-D7/A0-A6 from the stack         
00008252                           332              
00008252  4E75                     333  RETURN      RTS
00008254                           334  
00008254                           335  **************************************************
00008254                           336  ** read the data at sdaddress/2 into the buffer at 9e0000
00008254                           337  
00008254  48A7 FFFE                338  READ_DRV    MOVEM D0-D7/A0-A6,-(SP) ;Push D0-D7/A0-A6 onto the stack
00008258                           339           
00008258                           340           
00008258  2039 00F40022            341              MOVE.L SDADDRESS,D0
0000825E  4EB9 000082DA            342              JSR OUT8X
00008264                           343              
00008264  103C 000A                344              MOVE.B  #10,D0
00008268  4EB9 000082E8            345              JSR COUT
0000826E  103C 000D                346              MOVE.B  #13,D0
00008272  4EB9 000082E8            347              JSR COUT
00008278                           348              
00008278  49F9 00F40020            349  BUSY        LEA.L SDSTATUS.L,A4
0000827E  3214                     350              MOVE.W (A4), D1
00008280  B27C C000                351              CMP.W #$C000,D1
00008284  6700 0004                352              BEQ RDEN               ; busy 0
00008288                           353              
00008288  60EE                     354              BRA.S BUSY
0000828A                           355              
0000828A  45F9 00F40021            356  RDEN        LEA.L SDCONTROL.L,A2
00008290  08D2 0002                357              BSET.b #02, (a2)
00008294                           358              
00008294  43F9 009E0000            359              LEA.L SDRAM.L, A1
0000829A                           360   
0000829A                           361              for d5 = #1 to #512 do.s
0000829A  3A3C 0001                362s     MOVE.W  #1,D5
0000829E  6022                     363s     BRA.S   _20000003
000082A0                           364s _20000002
000082A0                           365              
000082A0  3214                     366  DOUT        MOVE.W (A4), D1
000082A2  0801 000C                367              BTST.L #12,D1
000082A6  67F8                     368              BEQ DOUT
000082A8                           369  
000082A8  4BF9 00F40027            370  READ        LEA.l SDDATA.L,A5   
000082AE                           371              
000082AE  12D5                     372              MOVE.B (A5), (A1)+
000082B0  08D2 0001                373              BSET.b   #01, (a2)  ;ACK
000082B4                           374  
000082B4  3214                     375  DAVAIL      MOVE.W (A4), D1
000082B6  0801 000C                376              BTST #12,D1
000082BA  66F8                     377              BNE DAVAIL
000082BC                           378              
000082BC  0892 0001                379              BCLR.b   #01, (a2)  ;ACK
000082C0                           380              
000082C0                           381              endf
000082C0  5245                     382s     ADD.W   #1,D5
000082C2                           383s _20000003
000082C2  BA7C 0200                384s     CMP.W   #512,D5
000082C6  6FD8                     385s     BLE.S   _20000002
000082C8                           386  
000082C8  0892 0002                387              BCLR.b  #02, (a2)  ; REMOVE RDEN
000082CC                           388              
000082CC                           389  
000082CC  4C9F 7FFF                390              MOVEM (SP)+,D0-D7/A0-A6 ; Restore D0-D7/A0-A6 from the stack   
000082D0                           391              
000082D0  4E75                     392              RTS
000082D2                           393  
000082D2                           394  **************************************************   
000082D2                           395  * PRINTING - numbers
000082D2                           396  
000082D2                           397  OUT1X      *  JSR $E00F86 
000082D2  4E75                     398               RTS
000082D4                           399  
000082D4                           400  OUT2X      *  JSR $E00FA0
000082D4  4E75                     401               RTS
000082D6                           402               
000082D6                           403  OUT4X      *  JSR $E00FA8
000082D6  4E75                     404               RTS
000082D8                           405  
000082D8                           406  OUT6X      *  JSR $E00FB0
000082D8  4E75                     407               RTS
000082DA                           408    
000082DA                           409  OUT8X      *  JSR $E00FB8
000082DA  4E75                     410               RTS         
000082DC                           411               
000082DC                           412  
000082DC  4E75                     413          RTS
000082DE                           414  **************************************************   
000082DE                           415  * PRINTING - coout/in
000082DE                           416  
000082DE  13FC 0000 00F00009       417  INIT_ACIA  MOVE.B #0,ACIAC.L   ; RESET ACIA
000082E6                           418  *           MOVE.W #100,D0
000082E6                           419  *           DBRA  D0,*
000082E6                           420  *           MOVE.B #$15,ACIAC.L   ; rts enabled 9600 8ne
000082E6  4E75                     421             RTS
000082E8                           422             
000082E8  0839 0003 00F40045       423  COUT      BTST.B #TXRDY,DATA_CTL.L
000082F0  67F6                     424            BEQ.S  COUT
000082F2                           425            
000082F2  13C0 00F40041            426            MOVE.B D0,DATA_TX.L 
000082F8  08F9 0006 00F40045       427            BSET.B #TXVL,DATA_CTL.L
00008300  08B9 0006 00F40045       428            BCLR.B #TXVL,DATA_CTL.L 
00008308  4E75                     429            RTS
0000830A                           430  
0000830A  0839 0002 00F40045       431  CIN      BTST.B #RXVLD,DATA_CTL.L
00008312  67F6                     432           BEQ.S  CIN
00008314                           433  
00008314  08F9 0005 00F40045       434           BSET.B #RXRDY,DATA_CTL.L
0000831C  1039 00F40043            435           MOVE.B DATA_RX.L,D0
00008322  08B9 0005 00F40045       436           BCLR.B #RXRDY,DATA_CTL.L
0000832A                           437           
0000832A  61BC                     438           BSR COUT
0000832C                           439  
0000832C                           440  
0000832C  4E75                     441           RTS
0000832E                           442  *************
0000832E                           443  * Print to console or wifi         
0000832E                           444  ; A3 POINTED TO FIRST BYTE
0000832E                           445  ; END WITH 0
0000832E                           446  
0000832E  101B                     447  PSTR     MOVE.B (A3)+,D0
00008330  B03C 0000                448           CMP.B  #0,D0
00008334  6704                     449           BEQ.S PSTR1
00008336  61B0                     450           BSR COUT
00008338  60F4                     451           BRA.S PSTR
0000833A                           452  
0000833A  4E75                     453  PSTR1    RTS
0000833C                           454  
0000833C                           455  ***************************************
0000833C                           456   * STRLEN - RETURNS LENGTH OP NULL TERMINATED STRING IN D0
0000833C                           457   * A0 -> STRING
0000833C  2F08                     458  STRLEN:   MOVE.L A0,-(SP) SAVE REG
0000833E  4280                     459            CLR.L  D0       INITIALIZE
00008340  4A18                     460  STRLENI:  TST.B  (A0)+    NULL?
00008342  6700 0006                461            BEQ    STRLENR  YES, RETURN
00008346  5280                     462            ADDQ.L #1, D0   BUMP COUNT
00008348  60F6                     463            BRA    STRLENI  LOOP
0000834A  205F                     464  STRLENR:  MOVE.L (SP)+,A0 RESTORE REG
0000834C  4E75                     465            RTS
0000834E                           466    
0000834E                           467    * STRCPY - COPY A NULL TERMINATED STRING
0000834E                           468    * A0 -> SOURCE STRING
0000834E                           469    * A1 -> DESTINATION STRING
0000834E  48E7 00C0                470  STRCPY:   MOVEM.L A0-A1,-(SP) SAVE REGS
00008352  12D8                     471  STRCPY1:  MOVE.B  (A0)+,(A1)+ MOVE A BYTE
00008354  66FC                     472            BNE     STRCPY1     GET ANOTHER IF NOT NULL
00008356  4CDF 0300                473            MOVEM.L (SP)+,A0-A1 RESTORE REGS
0000835A  4E75                     474            RTS
0000835C                           475  
0000835C                           476    
0000835C                           477    * STRCMP - COMPARE TWO NULL TERMINATED STRINGS
0000835C                           478    * A0 -> STRING 1
0000835C                           479    * A1 -> STRING 2
0000835C  48E7 00C0                480  STRCMP:   MOVEM.L A0-A1,-(SP)  SAVE REGS
00008360  4280                     481            CLR.L  D0       INITIALIZE
00008362  4281                     482            CLR.L  D1
00008364  B308                     483  STRCMP1:  CMPM.B  (A0)+,(A1)+  COMPARE BYTES
00008366  6600 0010                484            BNE     STRRET       RETURN IF DIFFERENT
0000836A  5241                     485            ADD     #1, D1
0000836C                           486            
0000836C  B2BC 0000000B            487            CMP.L   #11, D1
00008372  66F0                     488            BNE     STRCMP1      NOW MORE BYTES LEFT
00008374                           489            
00008374  103C 0001                490            MOVE.B  #1, D0
00008378                           491            
00008378  4CDF 0300                492  STRRET:   MOVEM.L (SP)+,A0-A1  RESTORE REGS
0000837C  4E75                     493            RTS
0000837E                           494  ***************************************
0000837E                           495  
0000837E  E158                     496  SWAPNUM     ROL.W #8,D0
00008380  4840                     497              SWAP     D0
00008382  E158                     498              ROL.W #8,D0
00008384                           499              
00008384  4E75                     500              RTS
00008386                           501      
00008386                           502  ********
00008386                           503  * memory copy
00008386                           504  ******** 
00008386                           505  MOVE_b  
00008386  12D8                     506          MOVE.B  (A0)+,(A1)+ ; do the long moves
00008388  51C8 FFFC                507          DBRA    D0,MOVE_b
0000838C  4E75                     508          RTS
0000838E                           509          
0000838E                           510  MOVE_w  
0000838E  32D8                     511          MOVE.W  (A0)+,(A1)+ ; do the long moves
00008390  51C8 FFFC                512          DBRA    D0,MOVE_w
00008394  4E75                     513          RTS  
00008396                           514  
00008396                           515  MOVE_l  
00008396  22D8                     516          MOVE.l  (A0)+,(A1)+ ; do the long moves
00008398  51C8 FFFC                517          DBRA    D0,MOVE_l
0000839C  4E75                     518          RTS        
0000839E                           519  **************************************************  
0000839E                           520  * constants
0000839E                           521  
0000839E= 0D 0A 41 54 0D 0A 00     522  AT DC.B 13,10,'AT',13,10,0
000083A5= 0D 0A 44 69 73 6B 20     523  TITLE1 DC.B 13,10,'Disk Checker',13,10,0
          43 68 65 63 6B 65 72  
          0D 0A 00              
000083B6= 0D 0A 4C 6F 61 64 69     526  WAITING DC.B 13,10,'Loading',13,10,0
          6E 67 0D 0A 00        
000083C2= 0D 0A 42 79 74 65 20     528  RECVD DC.B 13,10,'Byte Received',13,10,0
          52 65 63 65 69 76 65  
          64 0D 0A 00           
000083D4= 0D 0A 43 68 65 63 6B     531  CHECKING DC.B 13,10,'Checking',13,10,0
          69 6E 67 0D 0A 00     
000083E1= 0D 0A 4E 6F 20 43 61     533  NOCARD DC.B 13,10,'No Card',13,10,0
          72 64 0D 0A 00        
000083ED= 0D 0A 43 61 72 64 20     535  CARDV1 DC.B 13,10,'Card V1',13,10,0
          56 31 0D 0A 00        
000083F9= 0D 0A 43 61 72 64 20     537  CARDV2 DC.B 13,10,'Card V2',13,10,0
          56 32 0D 0A 00        
00008405= 0D 0A 43 41 52 44 20     539  CARDHC DC.B 13,10,'CARD HC',13,10,0
          48 43 0D 0A 00        
00008411= 0D 0A 52 65 61 64 69     541  READING DC.B 13,10,'Reading',13,10,0
          6E 67 0D 0A 00        
0000841D= 0D 0A 42 75 73 79 0D     543  BUSYSTR DC.B 13,10,'Busy',13,10,0
          0A 00                 
00008426= 0D 0A 56 61 6C 69 64     545  VOLSTR DC.B 13,10,'Valid fat32 Volume',13,10,0
          20 66 61 74 33 32 20  
          56 6F 6C 75 6D 65 0D  
          0A 00                 
0000843D= 0D 0A 4E 6F 20 76 6F     549  VOLERR DC.B 13,10,'No volume found',13,10,0
          6C 75 6D 65 20 66 6F  
          75 6E 64 0D 0A 00     
00008451                           552  
00008451= 54 49 43 54 41 43 20     553  ROMFILE DC.B 'TICTAC  BAS',0
          20 42 41 53 00        
0000845D= 0D 0A 52 4F 4D 20 46     555  ROMFND  DC.B 13,10,'ROM File found',13,10,0
          69 6C 65 20 66 6F 75  
          6E 64 0D 0A 00        
00008470                           558  
00008470                           559         END  MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACIAC               F00009
ACIAD               F0000B
AT                  839E
BS                  8
BUSY                8278
BUSYSTR             841D
CARDHC              8405
CARDV1              83ED
CARDV2              83F9
CARD_HC             8244
CARD_V1             8228
CARD_V2             8236
CHECKING            83D4
CHECK_DRIVE         81EC
CHECK_VOL           81B8
CIN                 830A
COUT                82E8
CR                  D
DATA_CTL            F40045
DATA_RX             F40043
DATA_RX_COUNT       F40048
DATA_TX             F40041
DATA_TX_SPACE       F40046
DAVAIL              82B4
DOUT                82A0
ENDFILE             8116
ENDREAD             80F0
ENDVOL              81E6
ESC                 1B
FILELOOP            80FC
FINDFILE            80F6
GETFAT1             818A
GETROOTDIR          8138
INIT_ACIA           82DE
INT_OFF             2700
INT_ON              2000
LF                  A
LOADFILE            804A
MAIN                8000
MOVE_B              8386
MOVE_L              8396
MOVE_W              838E
NOCARD              83E1
NO_CARD             821C
OUT1X               82D2
OUT2X               82D4
OUT4X               82D6
OUT6X               82D8
OUT8X               82DA
PRTOFFSET           1C6
PSTR                832E
PSTR1               833A
RDEN                828A
RDRF                0
READ                82A8
READF               80C0
READING             8411
READ_DRV            8254
RECVD               83C2
RETURN              8252
ROMFILE             8451
ROMFND              845D
RS                  1E
RXRDY               5
RXVLD               2
SDADDRESS           F40022
SDADDRESS2          F40024
SDCONTROL           F40021
SDDATA              F40027
SDRAM               9E0000
SDSTATUS            F40020
SP                  20
STRCMP              835C
STRCMP1             8364
STRCPY              834E
STRCPY1             8352
STRLEN              833C
STRLENI             8340
STRLENR             834A
STRRET              8378
SUPERVISOR_BIT      5
SWAPNUM             837E
TDRE                1
TITLE1              83A5
TRACE_BIT           7
TXRDY               3
TXVL                6
VOLERR              843D
VOLIND              55AA
VOLOFFSET           1FE
VOLOK               81DC
VOLSTR              8426
WAITING             83B6
_20000000           80D0
_20000001           80D4
_20000002           82A0
_20000003           82C2
